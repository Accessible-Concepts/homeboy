{"version":3,"sources":["pages/Home.js","components/UserDB.js","pages/SignUp.js","pages/Login.js","components/CommentDB.js","components/MessageDB.js","components/ImageHandler.js","components/InnerNavbar.js","components/Comments.js","components/IssueDB.js","components/IssuesAccordion.js","components/DashboardIssuesAccordion.js","components/TenantsAccordion.js","components/MessagesAccordion.js","components/DashboardNewMessagesAccordion.js","components/VoteDB.js","components/VotingDB.js","components/VotingsAccordion.js","components/PendingVotingsAccordion.js","components/RecordsDisplay.js","pages/Messages.js","pages/Tenants.js","pages/Votings.js","pages/Issues.js","components/ChartsDisplay.js","pages/Dashboard.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Main","Jumbotron","className","Button","href","variant","size","Container","CardDeck","Col","lg","Card","Header","Title","Img","src","Body","Text","Footer","block","React","Component","Home","Parse","require","serverURL","initialize","UserDB","GetUser","User","SignUpCommitteeMember","user","onSuccess","onError","email","get","set","signUp","then","catch","error","CreateTenant","current","sessionToken","become","Error","LogIn","password","logIn","LogOut","logOut","GetAllUsers","UserClass","Object","extend","query","Query","addDescending","find","results","UpdateUser","userId","updatedUser","id","object","save","response","mail","console","log","FindUserBymail","equalTo","FindUserById","IsLoggedIn","GetCurrentUser","GetCurrentUserName","GetCurrentUserType","DeleteUser","destroy","SignUp","props","state","username","community","address","validated","signUpError","errorMsg","handleNameChange","bind","handleEmailChange","handlePasswordChange","handleCommunityChange","handleAddressChange","handleSubmit","OnSignUpSuccess","OnSignUpError","e","value","target","this","setState","handleLogin","message","form","preventDefault","stopPropagation","checkValidity","destination","Alert","show","Form","noValidate","onSubmit","Group","controlId","Label","Control","type","placeholder","onChange","pattern","required","Feedback","Login","loginError","OnLoginSuccess","OnLoginError","replace","autoComplete","addCommentToObject","commentText","comments","newComment","CommentDB","GetComment","push","GetCommentComments","commentId","onSucces","Comment","AddCommentToObject","CommentComment","comment","GetObjectComments","objectId","MessageDB","GetMessage","CreateMessage","newMessage","result","GetAllMessages","sortByPriority","Message","descending","UpdateMessage","messageId","updatedMessage","GetMessageComments","CommentMessage","DeleteMessage","MessageId","ImageHandler","UploadImage","imageFile","onProgressChange","onImageUploadSuccess","onImageUploadError","xhr","XMLHttpRequest","fd","FormData","open","setRequestHeader","upload","addEventListener","progress","Math","round","loaded","total","onreadystatechange","readyState","status","JSON","parse","responseText","public_id","append","send","GetImageUrl","imageId","undefined","InnerNavbar","onSortChange","changeEvent","handleSortChange","filterType","filters","handleFilterChange","isHidden","colWidth","Row","name","defaultChecked","htmlFor","Comments","parentId","users","getUserName","getUserImage","getCommentRows","handleKeyPress","onGetAllCommentsSuccess","onGetAllCommentsError","onAddCommentSuccess","onAddCommentError","onGetAllUsersSuccess","onGetAllUsersError","commentInput","createRef","userMap","Map","map","key","addComment","commentUserId","commentUserName","userName","image","index","sm","xs","alt","as","rows","ref","onKeyPress","IssueDB","GetIssue","CreateIssue","newIssue","GetAllIssues","Issue","UpdateIssue","issueId","updatedIssue","GetIssueComments","CommentIssue","DeleteIssue","IssuesAccordion","activeCardId","getPriorityIcon","handleComment","addCommentHanlder","getAllComments","handleUpdateClick","handleDeleteClick","handleAccordionToggle","getToggleClass","priority","issue","openModal","deleteIssue","issueCards","records","Accordion","Toggle","eventKey","onClick","Collapse","getCardImage","getPriorityString","DashboardIssuesAccordion","TenantsAccordion","deleteUser","userCards","disabled","loggedInUserId","MessagesAccordion","deleteMessage","messageCards","DashboardNewMessagesAccordion","VotingDB","GetVoting","CreateVoting","newVoting","GetAllVotings","Voting","UpdateVoting","votingId","updatedVoting","GetVotingVotes","votes","AddVote","voteText","VotingsAccordion","voting","votingCards","PendingVotingsAccordion","votingAccordion","column","Records","accordion","recordType","votingStatus","userType","NoRecords","RecordsDisplay","hasRecords","Messages","messages","filter","inputFilter","selectFilter","filteredMessages","showModal","currentMessageId","currentMessageTitle","currentMessageDetails","currentMessagePriority","currentMessageImage","modalTrigger","showStatusSelect","messageError","onGetAllMessagesSuccess","onGetAllMessagesError","filterMessages","onCreateMessageSuccess","onCreateMessageError","onImageUploadProgress","closeModal","createMessage","updateMessage","onDeleteMessageError","onDeleteMessageSuccess","imgChange","titleInput","detailsInput","priorityInput","imgInput","indexOf","originalMessages","i","length","toUpperCase","checkCurrentMessage","input","tagName","newFilter","document","getElementById","innerHTML","ev","newMessageImg","file","files","URL","recordsDisplay","currentMessageImageUrl","modalAction","Modal","onHide","closeButton","defaultValue","accept","Image","fluid","Tenants","filteredUsers","currentUserId","currentUserName","currentUserEmail","currentUserApt","userError","filterUsers","onCreateTenantSuccess","onCreateTenantError","createTenant","updateUser","onDeleteUserError","onDeleteUserSuccess","nameInput","emailInput","aptInput","originalUsers","checkCurrentUser","currentUserImage","newUserImg","UserError","newUser","currentUserImageUrl","Votings","votings","filteredVotings","currentVotingId","currentVotingTitle","currentVotingDetails","currentVotingEndDate","currentVotingOptions","currentVotingResult","votingError","onGetAllVotingsSuccess","onGetAllVotingsError","filterVotings","onCreateVotingSuccess","onCreateVotingError","createVoting","updateVoting","endDateInput","optionsInput","optionInput1","optionInput2","originalVotings","checkCurrentVoting","recordsDisplayActive","recordsDisplayResults","Issues","issues","filteredIssues","currentIssueId","currentIssueTitle","currentIssueDetails","currentIssuePriority","currentIssueImage","currentIssueStatus","issueError","onGetAllIssuesSuccess","onGetAllIssuesError","filterIssues","onCreateIssueSuccess","onCreateIssueError","createIssue","updateIssue","onDeleteIssueError","onDeleteIssueSuccess","statusInput","originalIssues","checkCurrentIssue","newIssueImg","currentIssueImageUrl","charts","pageName","data","title","color","ChartsDisplay","CommitteeDashboard","Badge","TenantDashboard","Dashboard","dashboard","Navigation","handleLogout","logo","isLoggedIn","Navbar","fixed","collapseOnSelect","expand","Brand","Nav","Link","aria-controls","App","activeUser","activePage","handleLogoutSuccess","handleLogoutError","signUpDestination","to","loginDestination","homeDestination","issuesDestination","messagesDestination","dashboardDestination","tenantsDestination","votingsDestination","navigation","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ec971d5.chunk.js","sourcesContent":["import React from 'react';\n//import './Home.css';\n\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Button from 'react-bootstrap/Button'\nimport CardDeck from 'react-bootstrap/CardDeck'\nimport Card from 'react-bootstrap/Card'\nimport Col from 'react-bootstrap/Col'\n// import Navigation from '../components/Navigation'\nimport Container from 'react-bootstrap/Container'\n\n\nclass Main extends React.Component {\n  \n  render () {\n\n    return (\n      <main>\n        <Jumbotron className=\"hero text-center\">\n          <h1>Welcome to Homeboy - Your Building Management Buddy!</h1>\n          <p>\n          With our groundbreaking Homeowner Association Management System,\n          communication between tenants and the homeowner association committee has never been easier!\n          </p>\n          <p>\n            <Button href=\"#/SignUp\" variant=\"primary\" size=\"lg\" className=\"px-5 py-2\">Sign Up - It's Free!</Button>\n          </p>\n        </Jumbotron>\n        <Container className=\"featureWrapper text-center mt-4\">\n          <h2>Love Thy Neighbor</h2>\n          <p>\n          Use Homeboy to make it good in the hood! We’ve got the features you need to prevent gang fights and promote happy neighboring!\n          </p>\n          <CardDeck>\n            <Col lg={4}>\n              <Card>\n                  <Card.Header>\n                    <Card.Title>Issue Management</Card.Title>\n                  </Card.Header>\n                  <Card.Img variant=\"top\" src=\"./images/issue-management.png\" />\n                  <Card.Body>\n                    <Card.Text>\n                    Striving to achieve structured tracking for issues reported by homies?\n                    </Card.Text>\n                  </Card.Body>\n                  <Card.Footer className=\"border-0\">\n                    <Button href=\"#/Issues\" variant=\"primary\" block>Make It Work</Button>\n                  </Card.Footer>\n                </Card>\n              </Col>\n              <Col lg={4}>\n                <Card>\n                  <Card.Header>\n                    <Card.Title>Easy Messaging</Card.Title>\n                  </Card.Header>\n                  <Card.Img variant=\"top\" src=\"./images/messaging.png\" />\n                  <Card.Body>\n                    <Card.Text>\n                    Begging for homies to pay attention to messages from the building's committee?\n                    </Card.Text>\n                  </Card.Body>\n                  <Card.Footer className=\"border-0\">\n                    <Button href=\"#/Messages\" variant=\"primary\" block>Make It Happen</Button>\n                  </Card.Footer>\n                </Card>\n              </Col>\n              <Col lg={4}>\n                <Card>\n                  <Card.Header>\n                    <Card.Title>Open Voting</Card.Title>\n                  </Card.Header>\n                  <Card.Img variant=\"top\" src=\"./images/voting.png\" />\n                  <Card.Body>\n                    <Card.Text>\n                    Dreaming of improving the way financial decisions are made in your building? \n                    </Card.Text>\n                  </Card.Body>\n                  <Card.Footer className=\"border-0\">\n                    <Button href=\"#/Votings\" variant=\"primary\" block>Make It Count</Button>\n                  </Card.Footer>\n              </Card>\n            </Col>\n          </CardDeck>      \n      </Container>\n      </main>\n    );\n  }\n}\n\nclass Home extends React.Component {\n  render () {\n    return (\n      <div className=\"Home\">\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","var Parse = require('parse');\r\n\r\nInitialize();\r\n\r\n\r\nfunction Initialize() {\r\n  Parse.serverURL = 'https://parseapi.back4app.com'; // This is your Server URL\r\n  Parse.initialize(\r\n    'EjBHB6eHkPYe1zSnuvjLgLnAcimFgedDdkTQKKMp', // This is your Application ID\r\n    'x2qBBi1Ms1YMtws1NreUEgGsmFrrx13zuyZcxLRR' // This is your Javascript key\r\n  );\r\n}\r\n\r\nconst UserDB = {\r\n\r\n  GetUser: function GetUser() {\r\n    return new Parse.User()\r\n  },\r\n\r\n  SignUpCommitteeMember: function SignUpCommitteeMember(user, onSuccess, onError){\r\n    var email = user.get('mail');\r\n    user.set('mail', email);\r\n    user.set('isCommitteeMember', true);\r\n    user.signUp().then((user) => {\r\n      onSuccess(user);\r\n    }).catch(error => {\r\n      onError(error);\r\n    });\r\n  },\r\n\r\n  CreateTenant: function CreateTenant(user, onSuccess, onError){\r\n    debugger;\r\n    //Check if I'm logged in as a committee member.\r\n    if ((Parse.User.current() == null) || (!Parse.User.current().get(\"isCommitteeMember\"))) {\r\n      onError(new Error(\"Not logged in as committee member.\"))\r\n      return;\r\n    }\r\n    \r\n    //I save this user session for use later so I can revert back to who I am.\r\n    var sessionToken = Parse.User.current().get(\"sessionToken\");\r\n    var email = user.get('mail');\r\n    user.set('email', email);\r\n    user.set('isCommitteeMember', false);\r\n    user.set('password', '#Password123');\r\n    user.signUp().then((user) => {\r\n      Parse.User.become(sessionToken).then((user) => {\r\n        // The current user is now set back to creator.\r\n        onSuccess(user);\r\n      }).catch(error => {\r\n        onError(error);\r\n      });\r\n    }).catch(error => {\r\n      onError(error);\r\n    });\r\n  },\r\n\r\n  LogIn: function LogIn(email, password, onSuccess, onError) {\r\n    // Pass the username and password to logIn function\r\n    Parse.User.logIn(email,password).then((user) => {\r\n      // Do stuff after successful login\r\n      onSuccess(user);\r\n      //console.log('Logged in user', user);\r\n    }).catch(error => {\r\n      onError(error);\r\n      //console.error('Error while logging in user', error);\r\n    })\r\n  },\r\n\r\n  LogOut: function LogOut(onSuccess, onError) {\r\n    // Pass the username and password to logIn function\r\n    Parse.User.logOut().then(() => {\r\n      // Do stuff after successful login\r\n      onSuccess();\r\n      //console.log('Logged out');\r\n    }).catch(error => {\r\n      onError(error);\r\n      //console.error('Error while logging out user', error);\r\n    })\r\n  },\r\n\r\n  GetAllUsers: function GetAllUsers(onSuccess, onError) {\r\n\r\n    const UserClass = Parse.Object.extend(\"User\");\r\n\r\n    // Creates a new Query object to help us fetch UserClass objects\r\n    const query = new Parse.Query(UserClass);\r\n    query.addDescending(\"updatedAt\");\r\n\r\n    // Executes the query, which returns an array of UserClass\r\n    query.find().then(results => {\r\n      onSuccess(results);\r\n    }).catch((error) =>  {\r\n      onError(error);\r\n      //console.error('Error while trying to GetAllUsers', error);\r\n\r\n    });\r\n  },\r\n\r\n  UpdateUser: function UpdateUser(userId, updatedUser, onSuccess, onError) {\r\n    const User = Parse.Object.extend('User');\r\n    const query = new Parse.Query(User);\r\n\r\n    if (Parse.User.current().id === userId) {\r\n      query.get(userId).then((object) => {\r\n        // object.set('createdBy', Parse.User.current());\r\n        object.set('username', updatedUser.get('username'));\r\n        object.set('password', updatedUser.get('password'));\r\n        object.set('mail', updatedUser.get('mail'));\r\n        object.set('email', updatedUser.get('mail'));\r\n        object.set('apartment', updatedUser.get('apartment'));\r\n        object.set('userImage', updatedUser.get('userImage'));\r\n        object.save().then((response) => {\r\n            onSuccess(response);\r\n        }, (error) => {\r\n          onError(error);\r\n          //console.error('Error while updating Tenant', error);\r\n        });\r\n  \r\n      });      \r\n    } else \r\n    {\r\n      var sessionToken = Parse.User.current().get(\"sessionToken\");\r\n\r\n      // here you put the objectId that you want to update\r\n      query.get(userId).then((object) => {\r\n        //Login as tenantId\r\n        var mail = object.get('mail')\r\n        Parse.User.logIn(mail,\"#Password123\").then((user) => {\r\n          console.log('Logged in as: ', mail);\r\n\r\n          // object.set('createdBy', Parse.User.current());\r\n          object.set('username', updatedUser.get('username'));\r\n          object.set('password', updatedUser.get('password'));\r\n          object.set('mail', updatedUser.get('mail'));\r\n          object.set('email', updatedUser.get('mail'));\r\n          object.set('apartment', updatedUser.get('apartment'));\r\n          object.set('userImage', updatedUser.get('userImage'));\r\n          object.save().then((response) => {\r\n            Parse.User.become(sessionToken).then((user) => {\r\n              //console.log('back to user: ', Parse.User.current().getEmail());\r\n              onSuccess(response);\r\n            }).catch(error => {\r\n              //console.error('Error while going back to user', error);\r\n            });\r\n\r\n          }, (error) => {\r\n            onError(error);\r\n            console.error('Error while updating Tenant', error);\r\n          });\r\n        }).catch(error => {\r\n          onError(error);\r\n          console.error('Error while logging in as user', error);\r\n        })\r\n\r\n      });\r\n    }\r\n  },\r\n\r\n  FindUserBymail: function FindUserByEmail(email, onSuccess, onError) {\r\n\r\n    const UserClass = Parse.Object.extend(\"User\");\r\n\r\n    // Creates a new Query object to help us fetch UserClass objects\r\n    const query = new Parse.Query(UserClass);\r\n\r\n    query.equalTo(\"mail\", email);\r\n\r\n    // Executes the query, which returns an array of UserClass\r\n    query.find().then(results => {\r\n      onSuccess(results);\r\n    }).catch((error) =>  {\r\n      onError(error);\r\n      //console.error('Error while trying to FindUserByEmail', error);\r\n\r\n    });\r\n  },\r\n\r\n  FindUserById: function FindUserById(userId, onSuccess, onError) {\r\n\r\n    const UserClass = Parse.Object.extend(\"User\");\r\n\r\n    // Creates a new Query object to help us fetch UserClass objects\r\n    const query = new Parse.Query(UserClass);\r\n\r\n    query.equalTo(\"objectId\", userId);\r\n\r\n    // Executes the query, which returns an array of UserClass\r\n    query.find().then(results => {\r\n      onSuccess(results);\r\n    }).catch((error) =>  {\r\n      onError(error);\r\n      //console.error('Error while trying to FindUserByEmail', error);\r\n\r\n    });\r\n  },\r\n\r\n  IsLoggedIn: function IsLoggedIn() {\r\n    return Parse.User.current() != null;\r\n  },\r\n\r\n  GetCurrentUser: function GetCurrentUser() {\r\n    return Parse.User.current();\r\n  },\r\n\r\n  GetCurrentUserName: function GetCurrentUserName() {\r\n    if (Parse.User.current() != null) {\r\n      return Parse.User.current().get('username');\r\n    } else {\r\n      return \"\";\r\n    }\r\n  },\r\n\r\n  \r\n  GetCurrentUserType: function GetCurrentUserType() {\r\n    const user = Parse.User.current();\r\n    if (user == null) {\r\n      return null;\r\n    } else {\r\n      if (user.get('isCommitteeMember')) {\r\n        return \"admin\";\r\n      } else {\r\n        return \"tenant\";\r\n      }\r\n    }\r\n  },\r\n\r\n  DeleteUser: function DeleteUser(userId, onSuccess, onError) {\r\n    debugger;\r\n    const User = new Parse.User();\r\n    const query = new Parse.Query(User);\r\n    var sessionToken = Parse.User.current().get(\"sessionToken\");\r\n\r\n    // here you put the objectId that you want to update\r\n    query.get(userId).then((object) => {\r\n      //Login as tenantId\r\n      var mail = object.get('mail')\r\n      Parse.User.logIn(mail,\"#Password123\").then((user) => {\r\n        //console.log('Logged in as: ', mail);\r\n        object.destroy().then((response) => {\r\n          Parse.User.become(sessionToken).then((user) => {\r\n            //console.log('back to user: ', Parse.User.current().getEmail());\r\n            onSuccess(response);\r\n          }).catch(error => {\r\n            //console.error('Error while going back to user', error);\r\n          });\r\n\r\n        }, (error) => {\r\n          onError(error);\r\n          //console.error('Error while updating Tenant', error);\r\n        });\r\n      }).catch(error => {\r\n        onError(error);\r\n        //console.error('Error while logging in as user', error);\r\n      })\r\n\r\n    });\r\n  }\r\n  \r\n\r\n}\r\n\r\n\r\nexport default UserDB;\r\n","import React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Alert from 'react-bootstrap/Alert'\nimport UserDB from '../components/UserDB';\n\n\nclass SignUp extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          username: \"\",\n          email:\"\",\n          password: \"\",\n          community:\"\",\n          address:\"\",\n          validated:false,\n          signUpError:false,\n          errorMsg:\"\",\n          //signUpSuccess:false\n        };\n\n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.handleEmailChange = this.handleEmailChange.bind(this);\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\n        this.handleCommunityChange = this.handleCommunityChange.bind(this);\n        this.handleAddressChange = this.handleAddressChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.SignUp = this.SignUp.bind(this);\n        this.OnSignUpSuccess = this.OnSignUpSuccess.bind(this);\n        this.OnSignUpError = this.OnSignUpError.bind(this);\n    }\n\n    handleNameChange (e) {\n        let value = e.target.value;\n        this.setState({username:value});\n        // this.state.username = value;\n        // this.setState(this.state);\n    }\n\n    handleEmailChange (e) {\n        let value = e.target.value;\n        this.setState({email:value});\n        // this.state.email = value;\n        // this.setState(this.state);\n    }\n\n    handlePasswordChange (e) {\n        let value = e.target.value;\n        this.setState({password:value});\n        // this.state.password = value;\n        // this.setState(this.state);\n    }\n\n    handleCommunityChange (e) {\n        let value = e.target.value;\n        this.setState({community:value});\n        // this.state.community = value;\n        // this.setState(this.state);\n    }\n\n    handleAddressChange (e) {\n        let value = e.target.value;\n        this.setState({address:value});\n        // this.state.address = value;\n        // this.setState(this.state);\n    }\n    \n    OnSignUpSuccess(user) {\n        this.props.handleLogin();\n    }\n\n    OnSignUpError(error) {\n        // this.state.errorMsg = error.message;\n        this.setState({errorMsg:error.message, signUpError:true});\n\n        // this.state.signUpError = true;\n        // this.setState(this.state);\n    }\n\n    SignUp() {\n        const user = UserDB.GetUser()\n        user.set('username', this.state.username);\n        user.set('email', this.state.email);\n        user.set('password', this.state.password);\n        user.set('communityName', this.state.community);\n        user.set('address', this.state.address);\n        UserDB.SignUpCommitteeMember(user, this.OnSignUpSuccess, this.OnSignUpError);\n      }\n\n    handleSubmit(e) {\n        const form = e.target;\n        // this.state.validated = true;\n        // this.setState(this.state);\n        this.setState({validated:true});\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (form.checkValidity() === true) {\n            this.SignUp();\n        }\n      }\n\n    render() {\n\n        const destination = (\n            <div className=\"SignUp\">\n                <h1>Create a Homeboy Account</h1>\n                <p>or <a href=\"#/Login\">or log in to your account</a></p>\n                <Alert variant=\"danger\" show={this.state.signUpError}>\n                {this.state.errorMsg}\n                </Alert>\n                <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n                    <Form.Group controlId=\"formBasicName\">\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter name\" onChange={this.handleNameChange} pattern=\"[a-zA-Z]{4,0}\" required/>\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please provide a valid name.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n        \n                    <Form.Group controlId=\"formBasicEmail\">\n                        <Form.Label>Email address</Form.Label>\n                        <Form.Control type=\"email\" placeholder=\"Enter email\" onChange={this.handleEmailChange} pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{3,}$\" required/>\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please provide a valid email.\n                        </Form.Control.Feedback>\n                        <Form.Text className=\"text-muted\">\n                            We'll never share your email with anyone else.\n                        </Form.Text>\n                    </Form.Group>\n        \n                    <Form.Group controlId=\"formBasicPassword\">\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control type=\"password\" placeholder=\"Password\" onChange={this.handlePasswordChange} pattern=\"(?=.*\\d)(?=.*[a-z]).{8,20}\" required/>\n                        <Form.Control.Feedback type=\"invalid\">\n                        Password must be 8-20 characters, contain lowercase letters and numbers, and no spaces, special characters, or emoji.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n        \n                    <Form.Group controlId=\"formBasicCommunity\">\n                        <Form.Label>Building Community Name</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter community name\" onChange={this.handleCommunityChange} pattern=\"[a-zA-Z0-9]{2,}\" required/>\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please choose a name for your building.\n                        </Form.Control.Feedback>\n                        \n                    </Form.Group>\n        \n                    <Form.Group controlId=\"formBasicAddress\">\n                        <Form.Label>Full Address</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter address\" onChange={this.handleAddressChange} required/>\n                        <Form.Control.Feedback type=\"invalid\">\n                        Address is a required field.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    \n                    <Button type=\"submit\" variant=\"success\"  block>\n                        Create New Account\n                    </Button>\n                </Form>\n            </div>    \n        );\n        \n        return (\n            <div>{destination}</div>\n        );\n    }\n}\n\nexport default SignUp;\n","import React from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport UserDB from '../components/UserDB'\nimport Alert from 'react-bootstrap/Alert'\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          email:\"\",\n          password: \"\",\n          validated:false,\n          loginError:false,\n          errorMsg:\"\",\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.Login = this.Login.bind(this);\n        this.OnLoginSuccess = this.OnLoginSuccess.bind(this);\n        this.OnLoginError = this.OnLoginError.bind(this);\n        this.handleEmailChange = this.handleEmailChange.bind(this);\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    }\n\n    handleEmailChange (e) {\n        let value = e.target.value;\n        //this.state.email = value;\n        //this.setState(this.state);\n        this.setState({email:value});\n    }\n\n    handlePasswordChange (e) {\n        let value = e.target.value;\n        this.setState({password:value});\n        // this.state.password = value;\n        // this.setState(this.state);\n    }\n\n    OnLoginSuccess(user) {\n        // this.state.signUpError = false;\n        // this.state.signUpSuccess = true;\n        // this.setState(this.state);\n        this.props.handleLogin();\n    }\n\n    OnLoginError(error) {\n        let errorMsg = error.message.replace(\"username\", \"email\");\n        this.setState({\n                        errorMsg:errorMsg,\n                        loginError:true\n                      });\n\n        // this.state.errorMsg = errorMsg;\n        // this.state.loginError = true;\n        // this.setState(this.state);\n    }\n\n    Login() {\n        UserDB.LogIn(this.state.email, this.state.password, this.OnLoginSuccess, this.OnLoginError);\n      }\n\n    handleSubmit(e) {\n        const form = e.target;\n        // this.state.validated = true;\n        // this.setState(this.state);\n        this.setState({validated:true});\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (form.checkValidity() === true) {\n            this.Login();\n        }\n      }\n\n    render() {\n                return (\n                    <div className=\"Login\">\n                    <h1>Login to Homeboy</h1>\n                    <p>or <a href=\"#/SignUp\">or create an account</a></p>\n                    <Alert variant=\"danger\" show={this.state.loginError}>\n                        {this.state.errorMsg}\n                    </Alert>\n                    <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Email address</Form.Label>\n                            <Form.Control type=\"email\" placeholder=\"Enter email\" autoComplete=\"username\" onChange={this.handleEmailChange} pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{3,}$\" required/>\n                            <Form.Control.Feedback type=\"invalid\">\n                            </Form.Control.Feedback>\n                        </Form.Group>\n\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Password\" autoComplete=\"current-password\" onChange={this.handlePasswordChange} pattern=\"(?=.*\\d)(?=.*[a-z]).{8,20}\" required/>\n                             <Form.Control.Feedback type=\"invalid\">\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Button variant=\"success\" type=\"submit\" block>\n                            Come On In!\n                        </Button>\n                    </Form>\n                </div>\n                );\n        }\n}\n\nexport default Login;\n","var Parse = require('parse');\n\nInitialize();\n\nfunction Initialize() {\n  Parse.serverURL = 'https://parseapi.back4app.com'; // This is your Server URL\n  Parse.initialize(\n    'EjBHB6eHkPYe1zSnuvjLgLnAcimFgedDdkTQKKMp', // This is your Application ID\n    'x2qBBi1Ms1YMtws1NreUEgGsmFrrx13zuyZcxLRR' // This is your Javascript key\n  );\n}\n\nfunction addCommentToObject(object, commentText) {\n  var comments = object.get(\"comments\")\n  if (comments == null) {\n    comments = [];\n  }\n  const newComment = CommentDB.GetComment();\n  newComment.set('parentId', object.id)\n  newComment.set('createdBy', Parse.User.current());\n  newComment.set('createdByUserName', Parse.User.current().get('username'));\n  newComment.set('createdByUserImage', Parse.User.current().get('userImage'));\n\n  newComment.set('text', commentText);\n  comments.push(newComment)\n  object.set('comments', comments);\n}\n\nconst CommentDB = {\n  GetComment: function GetComment() {\n    const Comment = Parse.Object.extend('Comment');\n\n    return new Comment();\n  },\n\n  // CreateComment: function CreateComment(newComment, onSuccess, onError){\n  //\n  // },\n\n\n  GetCommentComments: function GetCommentComments(commentId, onSucces, onError) {\n    const Comment = Parse.Object.extend('Comment');\n    const query = new Parse.Query(Comment);\n    query.get(commentId).then((results) => {\n      const comments = results.get(\"comments\")\n      onSucces(comments);\n      // console.log('Comments found', comments);\n    }, (error) => {\n      onError(error)\n      // console.error('Error while fetching comments', error);\n    });\n  },\n\n  AddCommentToObject: function AddCommentToObject(object, commentText) {\n    addCommentToObject(object, commentText);\n  },\n\n  CommentComment: function CommentComment(commentId, comment, onSuccess, onError) {\n    const Comment = Parse.Object.extend('Comment');\n    const query = new Parse.Query(Comment);\n    // here you put the objectId that you want to update\n    query.get(commentId).then((object) => {\n      addCommentToObject(object, comment);\n      object.save().then((response) => {\n        onSuccess(response);\n        // console.log('Updated Comment', response);\n      }, (error) => {\n        onError(error);\n        // console.error('Error while updating Comment', error);\n      });\n    });\n  },\n  GetObjectComments: function GetObjectComments(objectId, onSucces, onError) {\n    const Comment = Parse.Object.extend('Comment');\n    const query = new Parse.Query(Comment);\n    query.equalTo(\"parentId\", objectId);\n      query.find().then((results) => {\n      onSucces(results);\n      // console.log('Comments found', results);\n    }, (error) => {\n      onError(error)\n      // console.error('Error while fetching comments', error);\n    });\n  },\n}\n\nexport default CommentDB;\n","import CommentDB from '../components/CommentDB';\nvar Parse = require('parse');\n\nInitialize();\n\nfunction Initialize() {\n  Parse.serverURL = 'https://parseapi.back4app.com'; // This is your Server URL\n  Parse.initialize(\n    'EjBHB6eHkPYe1zSnuvjLgLnAcimFgedDdkTQKKMp', // This is your Application ID\n    'x2qBBi1Ms1YMtws1NreUEgGsmFrrx13zuyZcxLRR' // This is your Javascript key\n  );\n}\n\nconst MessageDB = {\n  GetMessage: function GetMessage() {\n    const Message = Parse.Object.extend('Message');\n    return new Message()\n  },\n\n  CreateMessage: function CreateMessage(newMessage, onSuccess, onError){\n    newMessage.set('createdBy', Parse.User.current());\n    //newMessage.set('comments', []);\n\n    newMessage.save().then(\n      (result) => {\n        const id = result.id;\n        onSuccess(id, result);\n        // console.log('Message created', result);\n      },\n      (error) => {\n        onError(error);\n        // console.error('Error while creating Message: ', error);\n      }\n    );\n  },\n\n  GetAllMessages: function GetAllMessages(sortByPriority, onSuccess, onError) {\n    const Message = Parse.Object.extend('Message');\n    const query = new Parse.Query(Message);\n\n    if (sortByPriority === true) {\n      query.descending(\"priority\");\n      query.addDescending(\"updatedAt\");\n    } else {\n      query.descending(\"updatedAt\");\n    }\n    \n    query.find().then((results) => {\n      onSuccess(results);\n      // console.log('Message found', results);\n    }, (error) => {\n      onError(error);\n      // console.error('Error while fetching Message', error);\n    });\n  },\n\n  UpdateMessage: function UpdateMessage(messageId, updatedMessage, onSuccess, onError) {\n    const Message = Parse.Object.extend('Message');\n    const query = new Parse.Query(Message);\n    // here you put the objectId that you want to update\n    query.get(messageId).then((object) => {\n      object.set('createdBy', Parse.User.current());\n      object.set('title', updatedMessage.get('title'));\n      object.set('details', updatedMessage.get('details'));\n      object.set('priority', updatedMessage.get('priority'));\n      object.save().then((response) => {\n        onSuccess(response);\n        // console.log('Updated Message', response);\n      }, (error) => {\n        onError(error);\n        // console.error('Error while updating Message', error);\n      });\n    });\n  },\n\n  GetMessageComments: function GetMessageComments(messageId, onSucces, onError) {\n    const Message = Parse.Object.extend('Message');\n    const query = new Parse.Query(Message);\n    query.get(messageId).then((results) => {\n      const comments = results.get(\"comments\")\n      onSucces(comments);\n      // console.log('Comments found', comments);\n    }, (error) => {\n      onError(error)\n      // console.error('Error while fetching comments', error);\n    });\n\n  },\n\n  CommentMessage: function CommentMessage(messageId, commentText, onSuccess, onError) {\n    const Message = Parse.Object.extend('Message');\n    const query = new Parse.Query(Message);\n    // here you put the objectId that you want to update\n    query.get(messageId).then((object) => {\n      CommentDB.AddCommentToObject(object, commentText);\n      object.save().then((response) => {\n        onSuccess(response);\n        // console.log('Updated Message', response);\n      }, (error) => {\n        onError(error);\n        // console.error('Error while updating Message', error);\n      });\n    });\n  },\n\n  DeleteMessage: function DeleteMessage(MessageId, onSuccess, onError) {\n    const Message = Parse.Object.extend('Message');\n    const query = new Parse.Query(Message);\n    query.get(MessageId).then((object) => {\n      object.destroy().then((response) => {\n        onSuccess(response);\n        // console.log('Deleted Message', response);\n      }, (error) => {\n        // console.error('Error while deleting Message', error);\n      });\n    });\n  }\n\n}\n\nexport default MessageDB;\n","// import cloudinary from 'cloudinary-core';\n// const cloudinaryCore = new cloudinary.Cloudinary({cloud_name: 'dybzbstoi',api_key: \"695564997941263\",\n// api_secret: \"-jpNbRT83us6l2mfUQZfvebBvMg\"\n// });\n\nconst ImageHandler  = {\n  UploadImage: function UploadImage(imageFile, onProgressChange, onImageUploadSuccess, onImageUploadError) {\n    var url = `https://api.cloudinary.com/v1_1/dybzbstoi/upload`;\n    var xhr = new XMLHttpRequest();\n    var fd = new FormData();\n    xhr.open('POST', url, true);\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    // Update progress (can be used to show progress indicator)\n    xhr.upload.addEventListener(\"progress\", function(e) {\n      var progress = Math.round((e.loaded * 100.0) / e.total);\n      if (onProgressChange !== null) {\n        onProgressChange(progress)\n      }\n      // document.getElementById('progress').style.width = progress + \"%\";\n      //\n    //   console.log(`fileuploadprogress data.loaded: ${e.loaded},\n    // data.total: ${e.total}`);\n    });\n\n    xhr.onreadystatechange = function(e) {\n      if (xhr.readyState === 4 && xhr.status === 200) {\n        // File uploaded successfully\n         var response = JSON.parse(xhr.responseText);\n        // // https://res.cloudinary.com/cloudName/image/upload/v1483481128/public_id.jpg\n        //var url = response.secure_url;\n\n        onImageUploadSuccess(response.public_id)\n\n\n      } else if (xhr.status !== 200 ){\n        onImageUploadError(xhr.status)\n      }\n    };\n    const unsignedUploadPreset = 'v2ugydrc';\n    fd.append('upload_preset', unsignedUploadPreset);\n    fd.append('tags', 'browser_upload'); // Optional - add tag for image admin in Cloudinary\n    fd.append('file', imageFile);\n    xhr.send(fd);\n  },\n\n  GetImageUrl: function GetImageUrl(imageId) {\n    if (imageId !== null && imageId !== \"\" && imageId !== undefined) {\n      return (\"http://res.cloudinary.com/dybzbstoi/image/upload/\" + imageId + \".jpg\")\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default ImageHandler;\n","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n// import { thisExpression } from '@babel/types'\n\n\nclass InnerNavbar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { }\n\n        this.onSortChange = this.onSortChange.bind(this);\n\n    }\n\n    onSortChange(changeEvent) {\n        var sortByPriority = false;\n        if (changeEvent.target.value === \"priority\") {\n            sortByPriority = true;\n        } else {\n            sortByPriority = false;\n        }\n        this.props.handleSortChange(sortByPriority);\n    }\n\n    render() {\n        const placeholder = (\n            this.props.filterType === \"tenants\"?\n            \"Filter by name, email or apartment\" :\n            \"Filter by title or details\"\n            );\n        \n        const filters = (\n            this.props.filterType === \"messages\"?\n            <select className=\"browser-default custom-select mobile-center\" onChange={this.props.handleFilterChange}>\n                <option value=\"12\">Filter by priority</option>\n                <option value=\"1\">Information</option>\n                <option value=\"2\">Important</option>     \n            </select>\n            : this.props.filterType === \"issues\"?\n            <select className=\"browser-default custom-select mobile-center\" onChange={this.props.handleFilterChange}>\n                <option value=\"123\">Filter by priority</option>\n                <option value=\"1\">Normal</option>\n                <option value=\"2\">Important</option>     \n                <option value=\"3\">Urgent</option>     \n            </select>\n\n            :null\n        );\n\n        const isHidden = (\n            (this.props.filterType === \"messages\") || (this.props.filterType === \"issues\") ? null\n            : \"hide\"\n        );\n        \n        const colWidth = (\n            (this.props.filterType === \"tenants\") || (this.props.filterType === \"voting\")? \"12\"\n            : \"6\"\n        );\n\n        return (\n            <Container className=\"NavBar\">\n                {/* <Row className=\"border justify-content-center rounded\">\n                    <Col className=\"col-auto px-0 d-flex align-items-center\">\n                        <i className=\"fas fa-search\"></i>\n                    </Col>\n                    <Col className=\"col-11 px-0\">\n                        <Form.Control className=\"border-0\" type=\"text\" placeholder=\"Filter by text in title and details\" onChange={this.handleFilterChange} />\n                    </Col>\n                </Row> */}\n                <Row>\n                    <Col lg={colWidth} className=\"mobile-center pb-2\">\n                        <Row className=\"border rounded justify-content-center\">\n                            <div className=\"col-auto px-0 d-flex align-items-center\">\n                                <i className=\"fas fa-search\"></i>\n                            </div>\n                            <div className=\"col-11 px-0\">\n                                <Form.Control className=\"border-0\" type=\"text\" placeholder={placeholder} onChange={this.props.handleFilterChange} />\n                            </div>\n                        </Row>\n                    </Col>\n                    <Col lg={3} className=\"pr-0 select-wrapper mobile-center pb-2\">\n                        {filters}                           \n                    </Col>\n                    <Col lg={3} className={\"px-0 text-right mobile-center pb-2 \" + isHidden}>\n                        <h6 className=\"d-inline-block align-middle mr-3\">Sort by:</h6>\n                        <div className=\"form-check form-check-inline\">\n                            <input className=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio1\" value=\"date\" defaultChecked onChange={this.onSortChange}/>\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio1\">Date</label>\n                            </div>\n                            <div className=\"form-check form-check-inline mr-0\">\n                            <input className=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"priority\" onChange={this.onSortChange}/>\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Priority</label>\n                        </div>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\n\n\n\nexport default InnerNavbar;","import React from 'react'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Form from 'react-bootstrap/Form'\r\nimport CommentDB from '../components/CommentDB';\r\nimport ImageHandler from '../components/ImageHandler';\r\nimport UserDB from '../components/UserDB';\r\n\r\n\r\n\r\nclass Comments extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            comments : null,\r\n            parentId : this.props.parentId,\r\n            users: null\r\n        }\r\n\r\n        this.getUserName = this.getUserName.bind(this);\r\n        this.getUserImage = this.getUserImage.bind(this);\r\n        this.getCommentRows = this.getCommentRows.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n        this.onGetAllCommentsSuccess = this.onGetAllCommentsSuccess.bind(this);\r\n        this.onGetAllCommentsError = this.onGetAllCommentsError.bind(this);\r\n        this.onAddCommentSuccess = this.onAddCommentSuccess.bind(this);\r\n        this.onAddCommentError = this.onAddCommentError.bind(this);\r\n\r\n        this.onGetAllUsersSuccess = this.onGetAllUsersSuccess.bind(this);\r\n        this.onGetAllUsersError = this.onGetAllUsersError.bind(this);\r\n        \r\n        CommentDB.GetObjectComments(this.state.parentId, this.onGetAllCommentsSuccess, this.onGetAllCommentsError)\r\n\r\n        this.commentInput = React.createRef();\r\n\r\n\r\n    }\r\n\r\n    onGetAllUsersSuccess(users) {\r\n        var userMap = new Map();\r\n\r\n        users.map((user) => userMap.set(user.id, user));\r\n\r\n        this.setState({users: userMap});\r\n\r\n\r\n    }\r\n\r\n    onGetAllUsersError(error) {\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        // console.log(\"Getting All Comments for \" + this.state.parentId);\r\n       // CommentDB.GetObjectComments(this.state.parentId, this.onGetAllCommentsSuccess, this.onGetAllCommentsError)\r\n        //this.props.getAllComments(this.state.parentId, this.onGetAllCommentsSuccess, this.onGetAllCommentsError)\r\n        UserDB.GetAllUsers(this.onGetAllUsersSuccess, this.onGetAllUsersError);\r\n\r\n    }\r\n\r\n    onGetAllCommentsSuccess(comments) {\r\n        //this.state.comments = comments;\r\n        //this.setState(this.state);\r\n        this.setState({comments: comments});\r\n    }\r\n\r\n    onGetAllCommentsError(error) {\r\n\r\n    }\r\n\r\n    onAddCommentSuccess(response) {\r\n      this.commentInput.current.value = \"\";\r\n\r\n        CommentDB.GetObjectComments(this.state.parentId, this.onGetAllCommentsSuccess, this.onGetAllCommentsError);\r\n        // this.props.getAllComments(this.state.parentId, this.onGetAllCommentsSuccess, this.onGetAllCommentsError)\r\n    }\r\n\r\n    onAddCommentError(error) {\r\n        \r\n    }\r\n\r\n    handleKeyPress(e) {\r\n        if (e.key === \"Enter\") {\r\n            const commentText = e.target.value;     \r\n            // console.log(commentText);\r\n            this.props.addComment(this.props.parentId, commentText, this.onAddCommentSuccess, this.onAddCommentError);\r\n            // var newComment = { text: event.target.value };\r\n            // this.state.allTasks.push(newTask);\r\n            // this.state.openCount ++ ;\r\n            // this.setState(this.state);\r\n          }\r\n    }\r\n\r\n    getUserName(comment){\r\n        const commentUserId = comment.get('createdBy').id;\r\n        const commentUserName = comment.get('createdByUserName');\r\n        const user = this.state.users.get(commentUserId);\r\n        var userName = null;\r\n        if (user !== null && user !== undefined) {\r\n            userName = user.get('username');\r\n        }\r\n        if(userName == null) {\r\n            return commentUserName;\r\n        }\r\n        else {\r\n            return userName;\r\n        }\r\n    }\r\n\r\n    getUserImage(comment){\r\n\r\n        const user = this.state.users.get(comment.get('createdBy').id);\r\n        var image = null;\r\n        if (user !== null && user !== undefined) {\r\n            image = user.get('userImage');\r\n        }\r\n            //const image = null;//user.get('userImage');//comment.get('createdByUserImage');\r\n        if(image == null || image == undefined || image == \"\") {\r\n            return \"./images/avatar-placeholder.gif\";\r\n        }\r\n        else {\r\n            return ImageHandler.GetImageUrl(image);\r\n        }\r\n    }\r\n\r\n    getCommentRows(comments) {\r\n        if(comments === null) {\r\n            return null;\r\n        }\r\n        else {\r\n            const commentRows = comments.map((comment,index) =>\r\n                <Row className=\"Comment mt-4 my-2 mx-0\" key={index}>                                            \r\n                    <Col lg={2} sm={2} xs={2} className=\"p-0\">\r\n                        <img className=\"rounded-circle avatar\" src={this.getUserImage(comment)} alt=\"Avatar\"></img>\r\n                    </Col>\r\n                    <Col lg={10} sm={10} xs={10} className=\"pl-0\">\r\n                        <p className=\"font-weight-bold m-0\">{this.getUserName(comment)}</p>\r\n                        <p>{comment.get('text')}</p>\r\n                    </Col>\r\n                </Row>\r\n            );\r\n            return commentRows;\r\n        }\r\n    }\r\n\r\n    render () {\r\n        if (this.state.users === null) {\r\n            return <p>Loading</p>;\r\n        }\r\n        const comments = this.state.comments;\r\n        \r\n\r\n       return (\r\n        <div className=\"Comments\">\r\n            <h6>Comments:</h6>\r\n            {this.getCommentRows(comments)}\r\n            <Form.Control as=\"textarea\" rows=\"3\" ref={this.commentInput} placeholder=\"Add a comment\" className=\"mt-4\" onKeyPress={this.handleKeyPress}/>                   \r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Comments;","import CommentDB from '../components/CommentDB';\nvar Parse = require('parse');\n\nInitialize();\n\nfunction Initialize() {\n  Parse.serverURL = 'https://parseapi.back4app.com'; // This is your Server URL\n  Parse.initialize(\n    'EjBHB6eHkPYe1zSnuvjLgLnAcimFgedDdkTQKKMp', // This is your Application ID\n    'x2qBBi1Ms1YMtws1NreUEgGsmFrrx13zuyZcxLRR' // This is your Javascript key\n  );\n}\n\nconst IssueDB = {\n  GetIssue: function GetIssue() {\n    const Issue = Parse.Object.extend('Issue');\n    return new Issue();\n  },\n\n  CreateIssue: function CreateIssue(newIssue, onSuccess, onError){\n    newIssue.set('createdBy', Parse.User.current());\n    newIssue.set('comments', null);\n    newIssue.set('status', 'open');\n\n    newIssue.save().then(\n      (result) => {\n        const id = result.id;\n        onSuccess(id, result);\n        // console.log('Issue created', result);\n      },\n      (error) => {\n        onError(error);\n        // console.error('Error while creating Issue: ', error);\n      }\n    );\n  },\n\n  GetAllIssues: function GetAllIssues(sortByPriority, onSuccess, onError) {\n    const Issue = Parse.Object.extend('Issue');\n    const query = new Parse.Query(Issue);\n    if (sortByPriority === true) {\n      query.descending(\"priority\");\n      query.addDescending(\"updatedAt\");\n    } else {\n      query.descending(\"updatedAt\");\n    }\n\n    query.find().then((results) => {\n      // console.log('Issues found', results);\n      onSuccess(results);\n    }, (error) => {\n      onError(error);\n      // console.error('Error while fetching Issues', error);\n    });\n  },\n\n  UpdateIssue: function UpdateIssue(issueId, updatedIssue, onSuccess, onError) {\n    const Issue = Parse.Object.extend('Issue');\n    const query = new Parse.Query(Issue);\n    // here you put the objectId that you want to update\n    query.get(issueId).then((object) => {\n      object.set('createdBy', Parse.User.current());\n      object.set('title', updatedIssue.get('title'));\n      object.set('details', updatedIssue.get('details'));\n      object.set('image', updatedIssue.get('image'));\n      object.set('priority', updatedIssue.get('priority'));\n      object.set('status', updatedIssue.get('status'));\n      object.save().then((response) => {\n        onSuccess(response);\n        // console.log('Updated Issue', response);\n      }, (error) => {\n        onError(error);\n        // console.error('Error while updating Issue', error);\n      });\n    });\n  },\n\n  GetIssueComments: function GetIssueComments(issueId, onSucces, onError) {\n    const Issue = Parse.Object.extend('Issue');\n    const query = new Parse.Query(Issue);\n    query.get(issueId).then((results) => {\n      const comments = results.get(\"comments\")\n      onSucces(comments);\n      // console.log('Comments found', comments);\n    }, (error) => {\n      onError(error)\n      // console.error('Error while fetching comments', error);\n    });\n  },\n\n  CommentIssue: function CommentIssue(issueId, commentText, onSuccess, onError) {\n    const Issue = Parse.Object.extend('Issue');\n    const query = new Parse.Query(Issue);\n    // here you put the objectId that you want to update\n    query.get(issueId).then((object) => {\n      CommentDB.AddCommentToObject(object, commentText);\n      object.save().then((response) => {\n        onSuccess(response);\n        // console.log('Updated Issue', response);\n      }, (error) => {\n        onError(error);\n        // console.error('Error while updating Issue', error);\n      });\n    });\n  },\n\n  DeleteIssue: function DeleteIssue(issueId, onSuccess, onError) {\n    const Issue = Parse.Object.extend('Issue');\n    const query = new Parse.Query(Issue);\n    query.get(issueId).then((object) => {\n      object.destroy().then((response) => {\n        onSuccess(response);\n        // console.log('Deleted Issue', response);\n      }, (error) => {\n        // console.error('Error while deleting Issue', error);\n      });\n    });\n  }\n}\n\nexport default IssueDB;\n","import React from 'react'\r\nimport Accordion from 'react-bootstrap/Accordion'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Comments from '../components/Comments'\r\nimport IssueDB from '../components/IssueDB';\r\nimport ImageHandler from '../components/ImageHandler';\r\n\r\n\r\nclass IssuesAccordion extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeCardId: null\r\n        }\r\n\r\n        this.getPriorityIcon = this.getPriorityIcon.bind(this);\r\n        this.handleComment = this.addCommentHanlder.bind(this);\r\n        this.getAllComments = this.getAllComments.bind(this);\r\n        this.handleUpdateClick = this.handleUpdateClick.bind(this);\r\n        this.handleDeleteClick = this.handleDeleteClick.bind(this);\r\n        this.handleAccordionToggle = this.handleAccordionToggle.bind(this);\r\n        this.getToggleClass = this.getToggleClass.bind(this);\r\n    }\r\n\r\n    getPriorityIcon(priority) {\r\n        if (priority === \"3\") {\r\n            return \"exclamation\";\r\n        } else if (priority === \"2\") {\r\n            return \"info\";\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    getPriorityString(priority) {\r\n        if (priority === \"3\") {\r\n            return \"Urgent\";\r\n        } else if (priority === \"2\") {\r\n            return \"Important\";\r\n        } else {\r\n            return \"Normal\";\r\n        }   \r\n    }\r\n    getCardImage(imageId) {\r\n        if(imageId === \"\") {\r\n            return \"./images/placeholder-square.jpg\";\r\n        }\r\n        else {\r\n            return ImageHandler.GetImageUrl(imageId);\r\n        }\r\n    }\r\n\r\n    getAllComments(issueId, onGetAllCommentsSuccess, onGetAllCommentsError) {\r\n        IssueDB.GetIssueComments(issueId, onGetAllCommentsSuccess, onGetAllCommentsError)\r\n    }\r\n\r\n    addCommentHanlder (issueId, commentText, onAddCommentSuccess, onAddCommentError) {\r\n        IssueDB.CommentIssue(issueId, commentText, onAddCommentSuccess, onAddCommentError);\r\n    }\r\n\r\n    handleUpdateClick(e, issue) {\r\n        this.props.openModal(e, issue);\r\n    }\r\n\r\n    handleDeleteClick (issue) {\r\n        this.props.deleteIssue(issue);\r\n    }\r\n\r\n    getToggleClass(issue) { //Presentation logic\r\n        if(issue.id === this.state.activeCardId) { //User triggered re-rendering\r\n            return \"active\";\r\n        }\r\n    }\r\n\r\n    handleAccordionToggle(issue) { //Business logic\r\n        let activeCardId;\r\n        if(issue.id !== this.state.activeCardId) { //First click on card toggle\r\n            activeCardId = issue.id;\r\n        }\r\n        else {                                   //Second click on card toggle\r\n            activeCardId = null; \r\n        }\r\n            this.setState({activeCardId: activeCardId}); //Re-render - getToggleClass will be be triggered again\r\n    }\r\n\r\n    render() {\r\n        const issues = this.props.records;\r\n        const issueCards = issues.map((issue) => \r\n            \r\n                                        <Card key={issue.id}>\r\n                                            <Accordion.Toggle as={Card.Header} eventKey={issue.id} className={this.getToggleClass(issue)} onClick={(e)=>{this.handleAccordionToggle(issue)}}>\r\n                                                {issue.get(\"title\")}{Accordion.Toggle.eventKey}\r\n                                                <i className={\"fas fa-\" + this.getPriorityIcon(issue.get(\"priority\")) + \"-circle float-right\"}></i>\r\n                                            </Accordion.Toggle>\r\n                                            <Accordion.Collapse eventKey={issue.id}>\r\n                                                <Card.Body>\r\n                                                    <Row>\r\n                                                        <Col className=\"issue-box\" lg={6}>\r\n                                                            <Row className=\"h-100\">\r\n                                                                <Col lg={4}>\r\n                                                                    <Card.Img className=\"thumbnail\" src={this.getCardImage(issue.get(\"image\"))}/>\r\n                                                                </Col>\r\n                                                                <Col lg={8}>                    \r\n                                                                    <Card.Text>\r\n                                                                        <li className=\"list-group-item\"><span className=\"font-weight-bold\">Details: </span>{issue.get(\"details\")}</li>\r\n                                                                        <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Priority: </span>{this.getPriorityString(issue.get(\"priority\"))}</li>\r\n                                                                        <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Status: </span>{issue.get(\"status\")}</li>\r\n                                                                    </Card.Text>\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Col>\r\n                                                        <Col lg={4}>\r\n                                                            <Row>\r\n                                                                <Col>\r\n                                                                    <Comments addComment={this.addCommentHanlder} parentId={issue.id}/>\r\n                                                                    {/* {this.getIssueComments(issue)} */}\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Col>\r\n                                                        <Col lg={2} className=\"p-0 d-flex align-items-end justify-content-end pt-3\">\r\n                                                            <Row className=\"w-100 mx-0 text-center\">\r\n                                                                <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\r\n                                                                    <Button variant=\"outline-dark\" className=\"m-0 responsive-btn\" onClick={(e)=>{this.handleUpdateClick(e, issue)}}>Update</Button>\r\n                                                                </Col>\r\n                                                                <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\r\n                                                                    <Button variant=\"danger\" className=\"m-0 responsive-btn\" onClick={(e)=>{this.handleDeleteClick(issue)}}>Delete</Button>\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Col>\r\n                                                    </Row>                                                           \r\n                                                </Card.Body>\r\n                                            </Accordion.Collapse>\r\n                                        </Card>     \r\n                                    );\r\n\r\n        return (\r\n           <div className=\"IssuesAccordion\">\r\n               <Accordion>\r\n                   {issueCards}\r\n                </Accordion>\r\n            </div>\r\n            );\r\n        }\r\n    }\r\n\r\n export default IssuesAccordion;","import React from 'react'\r\nimport Accordion from 'react-bootstrap/Accordion'\r\n// import Card from 'react-bootstrap/Card'\r\n// import Row from 'react-bootstrap/Row'\r\n// import Col from 'react-bootstrap/Col'\r\n// import Form from 'react-bootstrap/Form'\r\n// import Button from 'react-bootstrap/Button'\r\n\r\nclass DashboardIssuesAccordion extends React.Component {\r\n    \r\n    render () {\r\n        // const issues = this.props.records;\r\n        //  const priority = (\r\n        //                     issue.priority == \"important\"? \"star\" : \"exclamation\"\r\n        //                  );\r\n        // const issueCards = issues.map(issue =>\r\n        //     <Card>\r\n        //         <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\r\n        //         {issue.title}\r\n        //         <i className={\"fas fa-\" + issue.priority  + \"-circle float-right\"}></i>\r\n        //         </Accordion.Toggle>\r\n        //         <Accordion.Collapse eventKey=\"0\">\r\n        //             <Card.Body>\r\n        //                 <Row>\r\n        //                     <Col>\r\n        //                         <Row>\r\n        //                             <Col lg={4}>\r\n        //                                 <Card.Img src={issue.image}/>\r\n        //                             </Col>\r\n        //                             <Col lg={8} className=\"pl-0\">                    \r\n        //                                 <Card.Text>\r\n        //                                     <li className=\"text-left list-group-item mobile-center\"><span className=\"font-weight-bold\">Details: </span>{issue.details}</li>\r\n        //                                 </Card.Text>\r\n        //                             </Col>\r\n        //                         </Row>\r\n        //                     </Col>\r\n        //                 </Row>                             \r\n        //             </Card.Body>\r\n        //         </Accordion.Collapse>\r\n        //     </Card>\r\n        // )\r\n\r\n       \r\n    \r\n        return (\r\n            <div className=\"DashboardNewIssuesAccordion\">\r\n                    <Accordion>\r\n                        {/* {issueCards} */}\r\n                        {/* <Card>\r\n                            <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\r\n                            {issue.title}\r\n                            <i className={\"fas fa-\" + priority  + \"-circle float-right\"}></i>\r\n                            </Accordion.Toggle>\r\n                            <Accordion.Collapse eventKey=\"0\">\r\n                                <Card.Body>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Row>\r\n                                                <Col lg={4}>\r\n                                                    <Card.Img src={issue.image}/>\r\n                                                </Col>\r\n                                                <Col lg={8} className=\"pl-0\">                    \r\n                                                    <Card.Text>\r\n                                                        <li className=\"text-left list-group-item mobile-center\"><span className=\"font-weight-bold\">Details: </span>{issue.details}</li>\r\n                                                    </Card.Text>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Col>\r\n                                    </Row>                             \r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>      */}\r\n                </Accordion>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DashboardIssuesAccordion;","import React from 'react'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport ImageHandler from '../components/ImageHandler';\n\nclass TenantsAccordion extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeCardId: null,\n        }\n\n        this.handleUpdateClick = this.handleUpdateClick.bind(this);\n        this.handleDeleteClick = this.handleDeleteClick.bind(this);\n        this.handleAccordionToggle = this.handleAccordionToggle.bind(this);\n        this.getToggleClass = this.getToggleClass.bind(this);\n    }\n\n    getCardImage(imageId) {\n        if(imageId === \"\") {\n            return \"./images/placeholder-square.jpg\";\n        }\n        else {\n            return ImageHandler.GetImageUrl(imageId);\n        }\n    }\n\n    handleUpdateClick(e, user) {\n        this.props.openModal(e, user);\n    }\n\n    handleDeleteClick (user) {\n        this.props.deleteUser(user);\n    }\n\n    getToggleClass(user) { //Presentation logic\n        if(user.id === this.state.activeCardId) { //User triggered re-rendering\n            return \"active\";\n        }\n    }\n\n    handleAccordionToggle(user) { //Business logic\n        let activeCardId;\n        if(user.id !== this.state.activeCardId) { //First click on card toggle\n            activeCardId = user.id;\n        }\n        else {                                   //Second click on card toggle\n            activeCardId = null; \n        }\n            this.setState({activeCardId: activeCardId}); //Re-render - getToggleClass will be be triggered again\n    }\n\n\n    render() {\n        const users = this.props.records;\n        const userCards = users.map((user) => \n            \n                                        <Card key={user.id}>\n                                            <Accordion.Toggle as={Card.Header} eventKey={user.id} className={this.getToggleClass(user)} onClick={(e)=>{this.handleAccordionToggle(user)}}>\n                                                {user.get(\"username\")}{Accordion.Toggle.eventKey}\n                                            </Accordion.Toggle>\n                                            <Accordion.Collapse eventKey={user.id}>\n                                                <Card.Body>\n                                                    <Row>\n                                                        <Col lg={10} className=\"user-box\">\n                                                            <Row className=\"h-100\">\n                                                                <Col lg={3} className=\"col-width-20\">\n                                                                    <Card.Img className=\"thumbnail\" src={this.getCardImage(user.get(\"userImage\"))}/>\n                                                                </Col>\n                                                                <Col lg={9}>                    \n                                                                    <Card.Text>\n                                                                        <li className=\"list-group-item\"><span className=\"font-weight-bold\">Name: </span>{user.get(\"username\")}</li>\n                                                                        <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Email: </span>{user.get(\"mail\")}</li>\n                                                                        <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Apartment: </span>{user.get(\"apartment\")}</li>\n                                                                    </Card.Text>\n                                                                </Col>\n                                                            </Row>\n                                                        </Col>\n                                                        \n                                                        <Col lg={2} className=\"p-0 d-flex align-items-end justify-content-end pt-3\">\n                                                            <Row className=\"w-100 mx-0 text-center\">\n                                                                <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n                                                                    <Button variant=\"outline-dark\" className=\"m-0 responsive-btn\" onClick={(e)=>{this.handleUpdateClick(e, user)}}>Update</Button>\n                                                                </Col>\n                                                                <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n                                                                    <Button disabled={this.props.loggedInUserId === user.id? true : false} variant=\"danger\" className=\"m-0 responsive-btn\" onClick={(e)=>{this.handleDeleteClick(user)}}>Delete</Button>\n                                                                </Col>\n                                                            </Row>\n                                                        </Col>\n                                                    </Row>                                                           \n                                                </Card.Body>\n                                            </Accordion.Collapse>\n                                        </Card>     \n                                    );\n\n        return (\n        //    <div className=\"TenantsAccordion\">\n        //        <Accordion>\n        //             <Card>\n        //                 <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\n        //                 Dynamic Tenant Name\n        //                 </Accordion.Toggle>\n        //                 <Accordion.Collapse eventKey=\"0\">\n        //                     <Card.Body>\n        //                         <Row>\n        //                             <Col lg={10} className=\"pb-1\">\n        //                                 <Row>\n        //                                     <Col lg={4}>\n        //                                         <Card.Img src=\"https://upload.wikimedia.org/wikipedia/commons/9/92/Backyardpool.jpg\"/>\n        //                                     </Col>\n        //                                     <Col lg={8}>                    \n        //                                         <Card.Text>\n        //                                             <li className=\"list-group-item\"><span className=\"font-weight-bold\">Name: </span>**Dynamic Tenant Name**</li>\n        //                                             <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Email: </span>**Dynamic Tenant Email**</li>\n        //                                             <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Apt: </span>**Dynamic Apt**</li>\n        //                                         </Card.Text>\n        //                                     </Col>\n        //                                 </Row>\n        //                             </Col>\n        //                             <Col lg={2} className=\"p-0 d-flex align-items-end justify-content-end pt-3\">\n        //                                 <Row className=\"w-100 mx-0 text-center\">\n        //                                     <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n        //                                         <Button variant=\"outline-dark\" className=\"m-0 responsive-btn\">Update</Button>\n        //                                     </Col>\n        //                                     <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n        //                                         <Button variant=\"danger\" className=\"m-0 responsive-btn\">Delete</Button>\n        //                                     </Col>\n        //                                 </Row>\n        //                                 {/* <Button variant=\"outline-dark\" className=\"mx-2 align-bottom\">Update</Button>\n        //                                 <Button variant=\"danger\" className=\"mx-2  align-bottom\">Delete</Button> */}\n        //                             </Col>\n        //                         </Row>\n        //                     </Card.Body>\n        //                 </Accordion.Collapse>\n        //             </Card>\n        //         </Accordion>\n        //    </div>\n            <div className=\"TenantsAccordion\">\n                <Accordion>\n                    {userCards}\n                </Accordion>\n            </div>\n        );\n    }\n}\n\nexport default TenantsAccordion;","import React from 'react'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport Comments from '../components/Comments'\nimport MessageDB from '../components/MessageDB';\nimport ImageHandler from '../components/ImageHandler';\n\nclass MessagesAccordion extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeCardId: null\n        }\n\n        this.getPriorityIcon = this.getPriorityIcon.bind(this);\n        this.handleComment = this.addCommentHanlder.bind(this);\n        this.getAllComments = this.getAllComments.bind(this);\n        this.handleUpdateClick = this.handleUpdateClick.bind(this);\n        this.handleDeleteClick = this.handleDeleteClick.bind(this);\n        this.handleAccordionToggle = this.handleAccordionToggle.bind(this);\n        this.getToggleClass = this.getToggleClass.bind(this);\n    }\n\n    getPriorityIcon(priority) {\n        if (priority === \"2\") {\n            return \"exclamation\";\n        } else if (priority === \"1\") {\n            return \"info\";\n        } else {\n            return \"\";\n        }\n    }\n\n    getPriorityString(priority) {\n        if (priority === \"1\") {\n            return \"Information\";\n        }\n        else if (priority === \"2\") {\n            return \"Important\";\n        }\n    }\n\n    getCardImage(imageId) {\n        if(imageId === \"\") {\n            return \"./images/placeholder-square.jpg\";\n        }\n        else {\n            return ImageHandler.GetImageUrl(imageId);\n        }\n    }\n\n    getAllComments(messageId, onGetAllCommentsSuccess, onGetAllCommentsError) {\n        MessageDB.GetMessageComments(messageId, onGetAllCommentsSuccess, onGetAllCommentsError)\n    }\n\n    addCommentHanlder (messageId, commentText, onAddCommentSuccess, onAddCommentError) {\n        MessageDB.CommentMessage(messageId, commentText, onAddCommentSuccess, onAddCommentError);\n    }\n\n    handleUpdateClick(e, message) {\n        this.props.openModal(e, message);\n    }\n\n    handleDeleteClick (message) {\n        this.props.deleteMessage(message);\n    }\n\n    getToggleClass(message) { //Presentation logic\n        if(message.id === this.state.activeCardId) { //User triggered re-rendering\n            return \"active\";\n        }\n    }\n\n    handleAccordionToggle(message) { //Business logic\n        let activeCardId;\n        if(message.id !== this.state.activeCardId) { //First click on card toggle\n            activeCardId = message.id;\n        }\n        else {                                   //Second click on card toggle\n            activeCardId = null; \n        }\n            this.setState({activeCardId: activeCardId}); //Re-render - getToggleClass will be be triggered again\n    }\n\n\n    render() {\n        const messages = this.props.records;\n        const messageCards = messages.map((message) => \n            \n                                        <Card key={message.id}>\n                                            <Accordion.Toggle as={Card.Header} eventKey={message.id} className={this.getToggleClass(message)} onClick={(e)=>{this.handleAccordionToggle(message)}}>\n                                                {message.get(\"title\")}{Accordion.Toggle.eventKey}\n                                                <i className={\"fas fa-\" + this.getPriorityIcon(message.get(\"priority\")) + \"-circle float-right\"}></i>\n                                            </Accordion.Toggle>\n                                            <Accordion.Collapse eventKey={message.id}>\n                                                <Card.Body>\n                                                    <Row>\n                                                        <Col className=\"message-box\" lg={6}>\n                                                            <Row className=\"h-100\">\n                                                                <Col lg={4}>\n                                                                    <Card.Img className=\"thumbnail\" src={this.getCardImage(message.get(\"image\"))}/>\n                                                                </Col>\n                                                                <Col lg={8}>                    \n                                                                    <Card.Text>\n                                                                        <li className=\"list-group-item\"><span className=\"font-weight-bold\">Details: </span>{message.get(\"details\")}</li>\n                                                                        <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Priority: </span>{this.getPriorityString(message.get(\"priority\"))}</li>\n                                                                    </Card.Text>\n                                                                </Col>\n                                                            </Row>\n                                                        </Col>\n                                                        <Col lg={4}>\n                                                            <Row>\n                                                                <Col>\n                                                                    <Comments addComment={this.addCommentHanlder} parentId={message.id}/>\n                                                                    {/* {this.getMessageComments(message)} */}\n                                                                </Col>\n                                                            </Row>\n                                                        </Col>\n                                                        <Col lg={2} className=\"p-0 d-flex align-items-end justify-content-end pt-3\">\n                                                            <Row className=\"w-100 mx-0 text-center\">\n                                                                <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n                                                                    <Button variant=\"outline-dark\" className=\"m-0 responsive-btn\" onClick={(e)=>{this.handleUpdateClick(e, message)}}>Update</Button>\n                                                                </Col>\n                                                                <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n                                                                    <Button variant=\"danger\" className=\"m-0 responsive-btn\" onClick={(e)=>{this.handleDeleteClick(message)}}>Delete</Button>\n                                                                </Col>\n                                                            </Row>\n                                                        </Col>\n                                                    </Row>                                                           \n                                                </Card.Body>\n                                            </Accordion.Collapse>\n                                        </Card>     \n                                    );\n\n        return (\n           <div className=\"MessagesAccordion\">\n               <Accordion>\n                   {messageCards}\n                </Accordion>\n            </div>\n            );\n        }\n\n    //     return (\n    //        <div className=\"MessagesAccordion\">\n    //            <Accordion>\n    //                 <Card>\n    //                     <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\n    //                     Dynamic Message Title With Dynamic Icon 2\n    //                     <i className=\"fas fa-exclamation-circle float-right\"></i>\n    //                     </Accordion.Toggle>\n    //                     <Accordion.Collapse eventKey=\"0\">\n    //                         <Card.Body>\n    //                             <Row>\n    //                                 <Col className=\"Message-box\" lg={6}>\n    //                                     <Row>\n    //                                         <Col lg={4}>\n    //                                             <Card.Img src=\"https://upload.wikimedia.org/wikipedia/commons/9/92/Backyardpool.jpg\"/>\n    //                                         </Col>\n    //                                         <Col lg={8}>                    \n    //                                             <Card.Text>\n    //                                                 <li className=\"list-group-item\"><span className=\"font-weight-bold\">Details: </span>**Dynamic Content for message details**</li>\n    //                                                 <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Priority: </span>**Dynamic Content for message priority**</li>\n    //                                             </Card.Text>\n    //                                         </Col>\n    //                                     </Row>\n    //                                 </Col>\n    //                                 <Col lg={4}>\n    //                                     <Row>\n    //                                         <Col>\n    //                                            <Comments />\n    //                                         </Col>\n    //                                     </Row>\n    //                                 </Col>\n    //                                 <Col lg={2} className=\"p-0 d-flex align-items-end justify-content-end pt-3\">\n    //                                     <Row className=\"w-100 mx-0 text-center\">\n    //                                         <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n    //                                             <Button variant=\"outline-dark\" className=\"m-0 responsive-btn\">Update</Button>\n    //                                         </Col>\n    //                                         <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n    //                                             <Button variant=\"danger\" className=\"m-0 responsive-btn\">Delete</Button>\n    //                                         </Col>\n    //                                     </Row>\n    //                                 </Col>\n    //                             </Row>                                            \n    //                         </Card.Body>\n    //                     </Accordion.Collapse>\n    //                 </Card>     \n    //             </Accordion>\n    //        </div>\n    //     );\n    // }\n}\n\nexport default MessagesAccordion;","import React from 'react'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n// import Form from 'react-bootstrap/Form'\n// import Button from 'react-bootstrap/Button'\n\nclass DashboardNewMessagesAccordion extends React.Component {\n   \n    render() {\n        return (\n           <div className=\"DashboardNewMessagesAccordion\">\n               <Accordion>\n                    <Card>\n                        <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\n                        Dynamic Message Title With Dynamic Icon\n                        <i className=\"fas fa-info-circle float-right\"></i>\n                        </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"0\">\n                            <Card.Body>\n                                <Row>\n                                    <Col>\n                                        <Row>\n                                            <Col lg={4}>\n                                                <Card.Img src=\"https://upload.wikimedia.org/wikipedia/commons/9/92/Backyardpool.jpg\"/>\n                                            </Col>\n                                            <Col lg={8}>                    \n                                                <Card.Text>\n                                                    <li className=\"list-group-item\"><span className=\"font-weight-bold\">Details: </span>**Dynamic Content for message details**</li>\n                                                    <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Priority: </span>**Dynamic Content for message details**</li>\n                                                </Card.Text>\n                                            </Col>\n                                        </Row>\n                                    </Col>\n                                </Row>\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </Card>                     \n                    <Card>\n                        <Accordion.Toggle as={Card.Header} eventKey=\"1\" className=\"font-weight-bold\">\n                        Dynamic Message Title With Dynamic Icon 2\n                        <i className=\"fas fa-exclamation-circle float-right\"></i>\n                        </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"1\">\n                            <Card.Body>\n                                <Row>\n                                    <Col>\n                                        <Row>\n                                        <Col lg={4}>\n                                                <Card.Img src=\"https://upload.wikimedia.org/wikipedia/commons/9/92/Backyardpool.jpg\"/>\n                                        </Col>\n                                        <Col lg={8}>                    \n                                            <Card.Text>\n                                                <li className=\"list-group-item\"><span className=\"font-weight-bold\">Details: </span>**Dynamic Content for message details**</li>\n                                                <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Priority: </span>**Dynamic Content for message details**</li>\n                                            </Card.Text>\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Row>                             \n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>     \n            </Accordion>\n        </div>\n        );\n    }\n}\n\nexport default DashboardNewMessagesAccordion;","var Parse = require('parse');\n\nInitialize();\n\nfunction Initialize() {\n  Parse.serverURL = 'https://parseapi.back4app.com'; // This is your Server URL\n  Parse.initialize(\n    'EjBHB6eHkPYe1zSnuvjLgLnAcimFgedDdkTQKKMp', // This is your Application ID\n    'x2qBBi1Ms1YMtws1NreUEgGsmFrrx13zuyZcxLRR' // This is your Javascript key\n  );\n}\n\nconst VoteDB = {\n  GetVote: function GetVote() {\n    const Vote = Parse.Object.extend('Vote');\n\n    return new Vote();\n  },\n\n}\n\nexport default VoteDB;\n","import VoteDB from '../components/VoteDB';\n\nvar Parse = require('parse');\n\nInitialize();\n\nfunction Initialize() {\n  Parse.serverURL = 'https://parseapi.back4app.com'; // This is your Server URL\n  Parse.initialize(\n    'EjBHB6eHkPYe1zSnuvjLgLnAcimFgedDdkTQKKMp', // This is your Application ID\n    'x2qBBi1Ms1YMtws1NreUEgGsmFrrx13zuyZcxLRR' // This is your Javascript key\n  );\n}\n\nfunction addVoteToVoting(voting, voteText) {\n\n  // var votes = object.get(\"votes\")\n  // if (votes == null) {\n  //   votes = [];\n  // }\n  // const newVote = VoteDB.GetVote();\n  // newVote.set('votedBy', Parse.User.current());\n  // newVote.set('vote', voteText);\n  // votes.push(newVote)\n  // voting.set('votes', votes);\n}\n\nconst VotingDB = {\n  GetVoting: function GetVoting() {\n    const Voting = Parse.Object.extend('Voting');\n    return new Voting()\n  },\n\n  CreateVoting: function CreateVoting(newVoting, onSuccess, onError){\n    newVoting.set('createdBy', Parse.User.current());\n\n    newVoting.save().then(\n      (result) => {\n        const id = result.id;\n        onSuccess(id, result);\n        console.log('Voting created', result);\n      },\n      (error) => {\n        onError(error);\n        console.error('Error while creating Voting: ', error);\n      }\n    );\n  },\n\n  GetAllVotings: function GetAllVotings(onSuccess, onError) {\n    const Voting = Parse.Object.extend('Voting');\n    const query = new Parse.Query(Voting);\n    query.find().then((results) => {\n      onSuccess(results);\n      console.log('Votings found', results);\n    }, (error) => {\n      onError(error);\n      console.error('Error while fetching Votings', error);\n    });\n  },\n\n  UpdateVoting: function UpdateVoting(votingId, updatedVoting, onSuccess, onError) {\n    const Voting = Parse.Object.extend('Voting');\n    const query = new Parse.Query(Voting);\n    // here you put the objectId that you want to update\n    query.get(votingId).then((object) => {\n      object.set('createdBy', Parse.User.current());\n      object.set('title', updatedVoting.get('title'));\n      object.set('details', updatedVoting.get('details'));\n      object.set('options', updatedVoting.get('options'));\n      object.set('dueDate', updatedVoting.get('dueDate'));\n      object.save().then((response) => {\n        onSuccess(response);\n        console.log('Updated Voting', response);\n      }, (error) => {\n        onError(error);\n        console.error('Error while updating Voting', error);\n      });\n    });\n  },\n\n  GetVotingVotes: function GetVotingVotes(votingId, onSucces, onError) {\n    const Voting = Parse.Object.extend('Voting');\n    const query = new Parse.Query(Voting);\n    query.get(votingId).then((results) => {\n      const votes = results.get(\"votes\")\n      onSucces(votes);\n      console.log('Votes found', votes);\n    }, (error) => {\n      onError(error)\n      console.error('Error while fetching votes', error);\n    });\n\n  },\n\n  AddVote: function AddVote(votingId, voteText, onSuccess, onError) {\n    const Voting = Parse.Object.extend('Voting');\n    const query = new Parse.Query(Voting);\n    // here you put the objectId that you want to update\n    query.get(votingId).then((object) => {\n      addVoteToVoting(object, voteText);\n      object.save().then((response) => {\n        onSuccess(response);\n        console.log('Updated Voting', response);\n      }, (error) => {\n        onError(error);\n        console.error('Error while updating Voting', error);\n      });\n    });\n  }\n}\n\nexport default VotingDB;\n","import React from 'react'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport PieChart from 'react-minimal-pie-chart'\nimport DatePicker from \"react-datepicker\"\nimport VotingDB from '../components/VotingDB';\nimport 'react-datepicker/dist/react-datepicker.css'\n\n\nclass VotingsAccordion extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeCardId: null\n        } \n\n        this.handleUpdateClick = this.handleUpdateClick.bind(this);\n        this.handleAccordionToggle = this.handleAccordionToggle.bind(this);\n        this.getToggleClass = this.getToggleClass.bind(this);\n\n    }\n\n    handleUpdateClick(e, voting) {\n        //this.props.openModal(e, voting);\n    }\n\n    getToggleClass(voting) { //Presentation logic\n        if(voting.id === this.state.activeCardId) { //User triggered re-rendering\n            return \"active\";\n        }\n    }\n\n    handleAccordionToggle(voting) { //Business logic\n        let activeCardId;\n        if(voting.id !== this.state.activeCardId) { //First click on card toggle\n            activeCardId = voting.id;\n        }\n        else {                                   //Second click on card toggle\n            activeCardId = null; \n        }\n            this.setState({activeCardId: activeCardId}); //Re-render - getToggleClass will be be triggered again\n    }\n\n    render() {\n\n        const votings = this.props.records;\n        const votingCards = votings.map((voting) => \n\n                                        <Card key={voting.id}>\n                                            <Accordion.Toggle as={Card.Header} eventKey={voting.id} className={this.getToggleClass(voting)} onClick={(e)=>{this.handleAccordionToggle(voting)}}>\n                                                {/* <Row>\n                                                    <Col lg={6} className=\"mobile-center\">Dynamic Voting Title</Col>\n                                                    <Col lg={6} className=\"text-right mobile-center\">{this.props.votingStatus === \"results\"? <h6>Result: <span className=\"font-weight-normal\">Dynamic record result</span></h6>: null}</Col>\n                                                </Row> */}\n                                                {voting.get(\"title\")}{Accordion.Toggle.eventKey}\n                                            </Accordion.Toggle>\n                                            <Accordion.Collapse eventKey={voting.id}>\n                                                <Card.Body>\n                                                    <Row>\n                                                        <Col className=\"voting-box\" lg={6}>\n                                                            <Row className=\"h-100\">\n                                                                <Col lg={8}>                    \n                                                                    <Card.Text>\n                                                                        <li className=\"list-group-item\"><span className=\"font-weight-bold\">Details: </span>{voting.get(\"details\")}</li>\n                                                                        <li className=\"list-group-item\"><span  className=\"font-weight-bold\">End Date: </span>{voting.get(\"endDate\")}</li>\n                                                                    </Card.Text>\n                                                                </Col>\n                                                            </Row>\n                                                        </Col>\n                                                        <Col lg={4}>\n                                                            <Row>\n                                                                <Col>\n                                                                    {/* <Comments addComment={this.addCommentHanlder} parentId={voting.id}/> */}\n                                                                    {/* {this.getVotingComments(voting)} */}\n                                                                </Col>\n                                                            </Row>\n                                                        </Col>\n                                                        <Col lg={2} className=\"p-0 d-flex align-items-end justify-content-end pt-3\">\n                                                            <Row className=\"w-100 mx-0 text-center\">\n                                                                <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n                                                                    <Button variant=\"outline-dark\" className=\"m-0 responsive-btn\" onClick={(e)=>{this.handleUpdateClick(e, voting)}}>Update</Button>\n                                                                </Col>\n                                                                <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n                                                                    <Button variant=\"danger\" className=\"m-0 responsive-btn\" onClick={(e)=>{this.handleDeleteClick(voting)}}>Delete</Button>\n                                                                </Col>\n                                                            </Row>\n                                                        </Col>\n                                                    </Row>                                                           \n                                                </Card.Body>\n                                            </Accordion.Collapse>\n                                        </Card>     \n                                    );\n\n        // const votingAccordion = (\n        //     <Accordion>\n        //             <Card>\n        //                 <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\n        //                 <Row>\n        //                     <Col lg={6} className=\"mobile-center\">Dynamic Voting Title</Col>\n        //                     <Col lg={6} className=\"text-right mobile-center\">{this.props.votingStatus === \"results\"? <h6>Result: <span className=\"font-weight-normal\">Dynamic record result</span></h6>: null}</Col>\n        //                 </Row>\n        //                 {/* {this.props.votingStatus === \"results\"? } */}\n\n        //                 </Accordion.Toggle>\n        //                 <Accordion.Collapse eventKey=\"0\">\n        //                     <Card.Body>\n        //                         <Row className=\"mx-0\">\n        //                             <Col lg={this.props.votingStatus === \"results\"? 5 : 8} className=\"px-0 d-flex flex-column justify-content-between\">                    \n        //                                 <Row className=\"py-1 mx-0 mobile-center\">\n        //                                         <h6 className=\"mr-1\">Details:</h6> <span>*Dynamic Voting Details*</span>\n        //                                 </Row>\n        //                                 <Row className=\"py-1 mx-0 mobile-center\">\n        //                                     <Col className=\"px-0 d-flex align-items-center\">\n        //                                         <h6 className=\"mr-1\">{this.props.votingStatus === \"active\"? 'End Date': 'Ended'}:</h6> <span>*Date &amp; Hour*</span>\n        //                                     </Col>\n        //                                     {this.props.votingStatus === \"results\"? null:\n                                                \n        //                                     <Col className={this.props.userType === \"tenant\"? \"hide\" : \"px-0\"}>\n        //                                         <DatePicker placeholderText=\"Update End Date\" withPortal showTimeSelect\n        //                                         timeFormat=\"HH:mm\"\n        //                                         timeIntervals={30}\n        //                                         timeCaption=\"time\"\n        //                                         dateFormat=\"MMMM d, hh:mm\"/>\n        //                                     </Col>\n        //                                     }\n        //                                 </Row>\n        //                                 <Row className={this.props.votingStatus === \"results\" || this.props.userType === \"admin\" ? \"hide\" : \"py-1 mx-0 mobile-center\"}>\n        //                                      <Col className=\"px-0 d-flex align-items-center\">\n        //                                         <Form.Group as={Row} controlId=\"formPrioritySelect\" className=\"vote-form mx-0 mobile-center w-100\">\n        //                                                 <Form.Label column lg={3}>\n        //                                                     Your Vote:\n        //                                                 </Form.Label>\n        //                                                 <Col lg={5}>\n        //                                                     <Form.Control required as=\"select\" className=\"priority-select\">\n        //                                                         <option value=\"In Favor\">In Favor</option>\n        //                                                         <option value=\"Against\">Against</option>\n        //                                                     </Form.Control>\n        //                                                 </Col>\n        //                                                 <Col lg={4} className=\"text-right mobile-center\">\n        //                                                     <Button type=\"submit\">Submit Vote</Button>\n        //                                                 </Col>\n        //                                             </Form.Group>\n        //                                     </Col>\n        //                                 </Row>\n        //                             </Col>\n        //                             <Col lg={this.props.votingStatus === \"results\"? 7 : 4}>\n        //                                 <Row>\n\n        //                                 {this.props.votingStatus === \"results\"? \n        //                                     <Col lg={6} className=\"py-4-mobile\">\n        //                                         <h6 className=\"text-center mb-3\">Results</h6>\n        //                                         <PieChart className=\"chart\"\n        //                                             data={[\n        //                                                 { title: 'For', value: 80, color: '#90ee90' },\n        //                                                 { title: 'Against', value: 20, color: '#a2012c' },\n        //                                             ]}\n        //                                             />\n        //                                     </Col>\n        //                                     :null}\n        //                                     <Col>\n        //                                         <h6 className=\"text-center mb-3\">Voting Precentage</h6>\n        //                                         <PieChart className=\"chart\"\n        //                                             data={[\n        //                                                 { title: 'For', value: 10, color: '#90ee90' },\n        //                                                 { title: 'Against', value: 15, color: '#a2012c' },\n        //                                             ]}\n        //                                             />\n        //                                     </Col>    \n        //                                 </Row>                                           \n        //                             </Col>\n        //                         </Row>\n        //                     </Card.Body>\n        //                 </Accordion.Collapse>\n        //             </Card>\n        //         </Accordion>\n        // );\n\n        return (\n           <div className=\"VotingsAccordion\">\n              <Accordion>\n               {votingCards}\n            </Accordion>\n           </div>\n        );\n    }\n}\n\nexport default VotingsAccordion;","import React from 'react'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport 'react-datepicker/dist/react-datepicker.css'\n\n\nclass PendingVotingsAccordion extends React.Component {\n    \n    render() {\n        const votingAccordion = (\n            <Accordion>\n                    <Card>\n                        <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\n                        <Row>\n                            <Col>Dynamic Voting Title</Col>\n                        </Row>\n                        {/* {this.props.votingStatus === \"results\"? } */}\n\n                        </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"0\">\n                            <Card.Body>\n                                <Row className=\"py-1 mx-0 mobile-center\">\n                                        <Col lg={12} className=\"px-0 d-flex align-items-center\">\n                                            <Form.Group as={Row} controlId=\"formPrioritySelect\" className=\"vote-form mx-0 mobile-center w-100\">\n                                                    <Form.Label column lg={2}>\n                                                        Your Vote:\n                                                    </Form.Label>\n                                                    <Col lg={5}>\n                                                        <Form.Control required as=\"select\" className=\"priority-select\">\n                                                            <option value=\"In Favor\">In Favor</option>\n                                                            <option value=\"Against\">Against</option>\n                                                        </Form.Control>\n                                                    </Col>\n                                                    <Col lg={5} className=\"mobile-center text-left\">\n                                                        <Button type=\"submit\" className=\"ml-2 responsive-btn\">Submit Vote</Button>\n                                                    </Col>\n                                                </Form.Group>\n                                        </Col>\n                                </Row>\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </Card>\n                </Accordion>\n        );\n\n        return (\n           <div className=\"PendingVotingsAccordion\">\n               {votingAccordion}\n           </div>\n        );\n    }\n}\n\nexport default PendingVotingsAccordion;","import React from 'react'\n// import PaginationNav from '../components/PaginationNav';\nimport IssuesAccordion from '../components/IssuesAccordion';\nimport DashboardIssuesAccordion from '../components/DashboardIssuesAccordion';\nimport TenantsAccordion from '../components/TenantsAccordion';\nimport MessagesAccordion from '../components/MessagesAccordion';\nimport DashboardNewMessagesAccordion from '../components/DashboardNewMessagesAccordion';\nimport VotingsAccordion from '../components/VotingsAccordion';\nimport PendingVotingsAccordion from '../components/PendingVotingsAccordion';\n\n\nclass Records extends React.Component {\n    \n    render () {\n        // console.log(\"rendering records \" + this.props.records);\n        const accordion = (\n                    <div>\n                        {\n                            (() => {\n                            switch(this.props.recordType) {\n                                case 'issues':\n                                return <IssuesAccordion records={this.props.records} openModal={this.props.openModal} deleteIssue={this.props.deleteIssue}/>;\n                                case 'new issues':\n                                return <DashboardIssuesAccordion />;\n                                case 'overdue issues':\n                                return <DashboardIssuesAccordion />;\n                                case 'new resolved issues':\n                                return <DashboardIssuesAccordion />;\n                                case 'tenants':\n                                return <TenantsAccordion records={this.props.records} openModal={this.props.openModal} deleteUser={this.props.deleteUser} loggedInUserId={this.props.loggedInUserId}/>;\n                                case 'messages':\n                                return <MessagesAccordion records={this.props.records} openModal={this.props.openModal} deleteMessage={this.props.deleteMessage} />;\n                                case 'new messages':\n                                return <DashboardNewMessagesAccordion />;\n                                case 'active votings':\n                                return <VotingsAccordion records={this.props.records} openModal={this.props.openModal} votingStatus=\"active\" userType={this.props.userType} />;\n                                case 'pending votings':\n                                return <PendingVotingsAccordion />;\n                                case 'voting results':\n                                return <VotingsAccordion records={this.props.records} openModal={this.props.openModal} votingStatus=\"results\" userType={this.props.userType} />;\n                                default:\n                                return null;\n                            }\n                            })()\n                        }\n                  </div>\n            \n        );\n\n        return (\n            //Add a switch for different record types / module name this.props.recordType == \"new issues\" etc \n            <div className=\"Records\">\n                {accordion}\n            </div>\n        );     \n    }\n}\n\nclass NoRecords extends React.Component {\n   \n    render() {\n\n        return (\n            <p className=\"noRecordsMsg\">There are no {this.props.recordType}. :)</p>\n        );\n    }\n}\nclass RecordsDisplay extends React.Component {\n  \n    render() {\n        // console.log(\"rendering RecordsDisplay \" + this.props.records);\n        return (\n            this.props.hasRecords? \n                <div className=\"recordsDisplay\">\n                    <Records recordType={this.props.recordType} records={this.props.records} openModal={this.props.openModal} deleteIssue={this.props.deleteIssue} deleteMessage={this.props.deleteMessage} deleteUser={this.props.deleteUser} votingStatus={this.props.votingStatus} userType={this.props.userType} loggedInUserId={this.props.loggedInUserId}/>\n                    {/* <PaginationNav />  */}\n                    {/* which class should manage the activePage and totalItemsCount? */}\n                    {/* <PaginationNav activePage={this.state.activePage} totalItemsCount={this.state.totalItemsCount}/> */}\n                </div>\n            : <NoRecords recordType={this.props.recordType}/>\n        );\n    }\n}\n\nexport default RecordsDisplay;","import React from 'react';\nimport MessageDB from '../components/MessageDB';\nimport ImageHandler from '../components/ImageHandler'\nimport InnerNavbar from '../components/InnerNavbar'\nimport RecordsDisplay from '../components/RecordsDisplay'\nimport { Container, Row, Col, Button, Modal, Form, Image } from 'react-bootstrap'\nimport Alert from 'react-bootstrap/Alert'\n\n\n\nclass Messages extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        messages: null, //Get from Parse DB\n        hasRecords: null,\n        filter: {\n            inputFilter:\"\",\n            selectFilter:\"123\"\n        },\n        filteredMessages: null, \n        showModal: false,\n        currentMessageId: null,\n        currentMessageTitle: null,\n        currentMessageDetails: null,\n        currentMessagePriority: null,\n        currentMessageImage: null,\n        modalTrigger: null,\n        showStatusSelect: \"hide\",\n        validated: false,\n        messageError: false,\n        errorMsg:\"\",\n        sortByPriority: false\n      }\n\n      this.onGetAllMessagesSuccess = this.onGetAllMessagesSuccess.bind(this);\n      this.onGetAllMessagesError = this.onGetAllMessagesError.bind(this);\n      this.filterMessages = this.filterMessages.bind(this);\n      this.onCreateMessageSuccess = this.onCreateMessageSuccess.bind(this);\n      this.onCreateMessageError = this.onCreateMessageError.bind(this);\n      this.onImageUploadSuccess = this.onImageUploadSuccess.bind(this);\n      this.onImageUploadError = this.onImageUploadError.bind(this);\n      this.onImageUploadProgress = this.onImageUploadProgress.bind(this);\n      this.openModal = this.openModal.bind(this);\n      this.closeModal = this.closeModal.bind(this);\n      this.createMessage = this.createMessage.bind(this);\n      this.updateMessage = this.updateMessage.bind(this);\n      this.onDeleteMessageError = this.onDeleteMessageError.bind(this);\n      this.onDeleteMessageSuccess = this.onDeleteMessageSuccess.bind(this);\n      this.deleteMessage = this.deleteMessage.bind(this);\n      this.imgChange = this.imgChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n      this.handleFilterChange = this.handleFilterChange.bind(this);\n      this.handleSortChange = this.handleSortChange.bind(this);\n\n      this.titleInput = React.createRef();\n      this.detailsInput = React.createRef();\n      this.priorityInput = React.createRef();\n      this.imgInput = React.createRef();\n    }\n    \n    componentDidMount(){\n        MessageDB.GetAllMessages(this.state.sortByPriority, this.onGetAllMessagesSuccess, this.onGetAllMessagesError);\n    }\n\n    checkCurrentMessage(filter, currentMessageTitle, currentMessageDetails, currentMessagePriority) { //Check if current message matches filter\n        if (\n                // filter by select\n                (filter.selectFilter.indexOf(currentMessagePriority) > -1) && \n\n                //Filter by Input\n                (\n                    //Input filter is not empty\n                    ((filter.inputFilter !== \"\") && (currentMessageTitle.indexOf(filter.inputFilter) > -1 || currentMessageDetails.indexOf(filter.inputFilter) > -1)) ||\n                    //Input Filter is empty so accept any\n                    (filter.inputFilter === \"\")\n                )\n            ) \n        { return true; }\n        \n        else\n        { return false; }\n    }\n\n    filterMessages(filter, originalMessages, filteredMessages) {\n        // Loop through all messages keys, and add those who match the search query to matches array\n        for (var i = 0; i < originalMessages.length; i++) {\n                var currentMessageTitle = originalMessages[i].get(\"title\").toUpperCase();\n                var currentMessageDetails = originalMessages[i].get(\"details\").toUpperCase();\n                var currentMessagePriority = originalMessages[i].get(\"priority\").toUpperCase();\n\n                if (this.checkCurrentMessage(filter, currentMessageTitle, currentMessageDetails, currentMessagePriority)) {\n                    filteredMessages.push(originalMessages[i]);\n                }\n\n         }\n    }\n\n    handleFilterChange(e) {\n        var input;\n        input = e.target;\n        var inputFilter = this.state.filter.inputFilter;\n        var selectFilter = this.state.filter.selectFilter;\n        var filteredMessages = [];\n\n        if(input.tagName === \"INPUT\") {\n            inputFilter = input.value.toUpperCase();\n        }\n        else if (input.tagName === \"SELECT\") {\n            selectFilter = input.value;\n        }\n\n        const newFilter = {\n            inputFilter: inputFilter,\n            selectFilter:selectFilter\n        }\n\n        this.setState({\n            filter:newFilter\n        });  \n\n\n            this.filterMessages(newFilter, this.state.messages, filteredMessages);\n\n        this.setState({filteredMessages:filteredMessages});\n      }\n\n\n\n    handleSortChange(sortByPriority) {\n        this.setState({sortByPriority: sortByPriority});\n        MessageDB.GetAllMessages(sortByPriority, this.onGetAllMessagesSuccess, this.onGetAllMessagesError);\n\n    }\n\n\n    onImageUploadSuccess(imageId) {\n        let currentMessageImage = imageId;\n        this.setState({currentMessageImage: currentMessageImage})\n    }\n\n    onImageUploadError(error) {\n    }\n\n    onImageUploadProgress(progress) {\n        if (progress < 100) {\n            document.getElementById(\"image_progress\").innerHTML = \"Image Uploading: \" + progress + \"%\";\n        } else {\n            document.getElementById(\"image_progress\").innerHTML = \"Image Uploaded Successfully\";\n\n        }\n    }\n    imgChange(ev) {\n\n        let newMessageImg = {};\n        newMessageImg.file = ev.target.files[0];\n        if (newMessageImg.file) {\n            ImageHandler.UploadImage(newMessageImg.file, this.onImageUploadProgress, this.onImageUploadSuccess, this.onImageUploadError);\n\n        } else {\n            newMessageImg.URL = \"\";\n        }\n\n    }\n    \n    handleSubmit(e) {\n        const form = e.target;\n        this.setState({validated:true});\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (form.checkValidity() === true) {\n            if(this.state.modalTrigger === \"New Message\"){\n                this.createMessage();\n            }\n            else {\n                this.updateMessage();\n            }\n        }\n      }\n\n\n    openModal(e, message) {\n        let modalTrigger = e.target.innerHTML;\n        let showStatusSelect;\n        let currentMessageId;\n        let currentMessageTitle = \"\";\n        let currentMessageDetails = \"\";\n        let currentMessagePriority = \"\";\n        // let currentMessageStatus = \"\";\n        let currentMessageImage = \"\";\n\n        if(modalTrigger === \"Update\") {\n            modalTrigger = \"Update Message\";\n            showStatusSelect = \"show\";\n            currentMessageTitle = message.get(\"title\");\n            currentMessageDetails = message.get(\"details\");\n            currentMessagePriority = message.get(\"priority\");\n            // currentMessageStatus = message.get(\"status\");\n            currentMessageImage = message.get(\"image\");\n            currentMessageId = message.id;\n        }\n        else {\n            showStatusSelect = \"hide\";\n        }\n        this.setState({ showModal: true, showStatusSelect: showStatusSelect, modalTrigger: modalTrigger, currentMessageId: currentMessageId, currentMessageTitle: currentMessageTitle, currentMessageDetails:currentMessageDetails, currentMessagePriority: currentMessagePriority, currentMessageImage: currentMessageImage})\n    }\n\n    closeModal() {\n        this.setState({ currentMessageId: null, currentMessageImage:null, showModal: false, validated: false, messageError: false })\n    }\n\n    onCreateMessageSuccess(messageId, message) {\n        MessageDB.GetAllMessages(this.state.sortByPriority, this.onGetAllMessagesSuccess, this.onGetAllMessagesError);\n    }\n\n    onCreateMessageError(error) {\n        \n    }\n    \n    createMessage() {\n         const newMessage = MessageDB.GetMessage();\n         newMessage.set('title', this.titleInput.current.value);\n         newMessage.set('details', this.detailsInput.current.value);\n         newMessage.set('priority', this.priorityInput.current.value);\n        //  newMessage.set('status', this.statusInput.current.value);\n         newMessage.set('image', this.state.currentMessageImage);\n\n        MessageDB.CreateMessage(newMessage, this.onCreateMessageSuccess, this.onCreateMessageError)\n\n        this.closeModal();\n    }\n\n    updateMessage() {\n        const newMessage = MessageDB.GetMessage();\n        newMessage.set('title', this.titleInput.current.value);\n        newMessage.set('details', this.detailsInput.current.value);\n        newMessage.set('priority', this.priorityInput.current.value);\n        // newMessage.set('status', this.statusInput.current.value);\n        newMessage.set('image', this.state.currentMessageImage);\n\n        MessageDB.UpdateMessage(this.state.currentMessageId, newMessage, this.onCreateMessageSuccess, this.onCreateMessageError)\n        this.closeModal();\n   }\n\n   onDeleteMessageSuccess(messageId, message) {\n    MessageDB.GetAllMessages(this.state.sortByPriority, this.onGetAllMessagesSuccess, this.onGetAllMessagesError);\n    }\n\n    onDeleteMessageError(error) {\n        \n    }\n\n\n   deleteMessage(message) {\n    MessageDB.DeleteMessage(message.id, this.onDeleteMessageSuccess, this.onDeleteMessageError)\n    this.closeModal();\n}\n\n\n    onGetAllMessagesSuccess(messages) {\n        var filteredMessages = []\n        var hasRecords = false;\n        if (messages.length > 0) {\n            hasRecords = true;\n        }\n        \n        if(this.state.filter !== null) {\n            this.filterMessages(this.state.filter, messages, filteredMessages);\n        }\n\n        this.setState({messages:messages, filteredMessages:filteredMessages, hasRecords:hasRecords});\n    }\n\n    onGetAllMessagesError(error) {\n    }\n  \n    render() {\n        let recordsDisplay = null;\n        if (this.state.messages == null) {\n            //loading\n            recordsDisplay = \"Loading...\";\n        }\n        else {\n            recordsDisplay = <RecordsDisplay hasRecords={this.state.hasRecords} recordType=\"messages\" records={this.state.filteredMessages} openModal={this.openModal} deleteMessage={this.deleteMessage}/> ;\n        }\n\n        const { showModal, currentMessageImage } = this.state;\n        const currentMessageImageUrl = (currentMessageImage === \"\"? \"./images/placeholder-square.jpg\" : ImageHandler.GetImageUrl(currentMessageImage));\n        const modalAction = (\n            this.state.modalTrigger === \"New Message\" ?  <Button variant=\"primary\" type=\"submit\">Create Message</Button>\n                                                    :  <Button variant=\"primary\" type=\"submit\">Update Message</Button>\n        );\n\n      \n      return (\n                <div className=\"Messages h-100\">\n                    {/* <Navigation isLoggedIn={this.props.isLoggedIn} pageName=\"Messages\"/> */}\n\n                    <Container className=\"py-6 px-5 mobile-padding\">\n                        <InnerNavbar filterType=\"messages\" handleFilterChange={this.handleFilterChange} handleSortChange={this.handleSortChange}/>\n                        <div className=\"text-right pt-4 pb-1 mobile-center\">\n                            <Button variant=\"link\" className=\"new-btn\" onClick={this.openModal}>New Message</Button>\n                        </div>\n                        {recordsDisplay}\n                    </Container>\n                    <Modal show={showModal} onHide={this.closeModal} size=\"lg\">\n                    <Form className=\"messageModalFrm\" noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n\n                        <Modal.Header closeButton>\n                            <Modal.Title>{this.state.modalTrigger}</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <Alert variant=\"danger\" show={this.state.messageError}>\n                                {this.state.errorMsg}\n                            </Alert>\n                                <Form.Group as={Row} controlId=\"formNameTxt\">\n                                    <Form.Label column sm={2}>\n                                        Title:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control type=\"text\" ref={this.titleInput} defaultValue={this.state.currentMessageTitle} pattern=\"([a-zA-Z0-9]{1,20}\\s?){1,10}\" required/>\n                                        <Form.Control.Feedback type=\"invalid\">\n                                        </Form.Control.Feedback>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formDetailsTxt\">\n                                    <Form.Label column sm={2}>\n                                        Details:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control ref={this.detailsInput} defaultValue={this.state.currentMessageDetails} as=\"textarea\" rows=\"3\"/>\n                                        <Form.Control.Feedback type=\"invalid\">\n                                        </Form.Control.Feedback>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formPrioritySelect\">\n                                    <Form.Label column sm={2}>\n                                        Priority:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control ref={this.priorityInput} defaultValue={this.state.currentMessagePriority} as=\"select\" className=\"priority-select\" required>\n                                            <option value=\"1\">Information</option>\n                                            <option value=\"2\">Important</option>\n                                        </Form.Control>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formImgControl\" className=\"align-items-center\">\n                                    <Form.Label column sm={2}>\n                                        Image URL:\n                                    </Form.Label>\n                                    <Col sm={7}>\n                                        <div className=\"custom-file\">\n                                            <input ref={this.imgInput} type=\"file\" className=\"custom-file-input\" id=\"customFile\" accept=\"image/*\" onChange={this.imgChange}/>\n                                            <p id=\"image_progress\"></p>\n                                            <label className=\"custom-file-label\" htmlFor=\"customFile\">Choose image</label>\n                                        </div>\n                                    </Col>\n                                    <Col sm={3}>\n                                        <Image src={currentMessageImageUrl} fluid className=\"thumbnail\"/>\n                                    </Col>\n                                </Form.Group>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button variant=\"secondary\" onClick={this.closeModal}>\n                                Close\n                            </Button>\n                            {modalAction}\n                        </Modal.Footer>\n                        </Form>\n                    </Modal>\n            </div>\n        );\n\n    }\n  }   \n\n\nexport default Messages;\n","import React from 'react';\nimport UserDB from '../components/UserDB';\nimport ImageHandler from '../components/ImageHandler'\nimport InnerNavbar from '../components/InnerNavbar'\nimport RecordsDisplay from '../components/RecordsDisplay'\nimport { Container, Row, Col, Button, Modal, Form, Image } from 'react-bootstrap'\nimport Alert from 'react-bootstrap/Alert'\n\n\nclass Tenants extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        users: null, //Get from Parse DB\n        hasRecords: null,\n        filter: {\n            inputFilter:\"\",\n            //selectFilter:\"123\"\n        },\n        filteredUsers: null, \n        showModal: false,\n        currentUserId: null,\n        currentUserName: null,\n        currentUserEmail: null,\n        currentUserApt: null,\n        modalTrigger: null,\n        showStatusSelect: \"hide\",\n        validated: false,\n        userError: false,\n        errorMsg:\"\",\n        sortByPriority: false,\n        loggedInUserId: UserDB.GetCurrentUser().id\n    }\n\n    this.onGetAllUsersSuccess = this.onGetAllUsersSuccess.bind(this);\n    this.onGetAllUsersError = this.onGetAllUsersError.bind(this);\n    // this.checkCurrentUser = this.checkCurrentUser.bind(this);\n    this.filterUsers = this.filterUsers.bind(this);\n    this.onCreateTenantSuccess = this.onCreateTenantSuccess.bind(this);\n    this.onCreateTenantError = this.onCreateTenantError.bind(this);\n    this.onImageUploadSuccess = this.onImageUploadSuccess.bind(this);\n    this.onImageUploadError = this.onImageUploadError.bind(this);\n    this.onImageUploadProgress = this.onImageUploadProgress.bind(this);\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.createTenant = this.createTenant.bind(this);\n    this.updateUser = this.updateUser.bind(this);\n    this.onDeleteUserError = this.onDeleteUserError.bind(this);\n    this.onDeleteUserSuccess = this.onDeleteUserSuccess.bind(this);\n    this.deleteUser = this.deleteUser.bind(this);\n    this.imgChange = this.imgChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n\n    this.nameInput = React.createRef();\n    this.emailInput = React.createRef();\n    this.aptInput = React.createRef();\n    this.imgInput = React.createRef();\n\n    }\n    \n    componentDidMount(){\n        UserDB.GetAllUsers(this.onGetAllUsersSuccess, this.onGetAllUsersError);\n    }\n\n    checkCurrentUser(filter, currentUserName, currentUserEmail, currentUserApt) { //Check if current User matches filter\n        if (\n                    //Input filter is not empty\n                    ((filter.inputFilter !== \"\") && (currentUserName.indexOf(filter.inputFilter) > -1 || currentUserEmail.indexOf(filter.inputFilter) > -1 || currentUserApt.indexOf(filter.inputFilter) > -1)) ||\n                    //Input Filter is empty so accept any\n                    (filter.inputFilter === \"\")\n            ) \n        { return true; }\n        \n        else\n        { return false; }\n    }\n\n    filterUsers(filter, originalUsers, filteredUsers) {\n        //debugger;\n\n        // Loop through all users keys, and add those who match the search query to matches array\n        for (var i = 0; i < originalUsers.length; i++) {\n                var currentUserName = originalUsers[i].get(\"username\").toUpperCase();\n                var currentUserEmail = originalUsers[i].get(\"mail\").toUpperCase();\n                var currentUserApt = originalUsers[i].get(\"apartment\").toUpperCase();\n\n                if (this.checkCurrentUser(filter, currentUserName, currentUserEmail, currentUserApt)) {\n                    filteredUsers.push(originalUsers[i]);\n                }\n\n\n         }\n    }\n\n    handleFilterChange(e) {\n        var input;\n        input = e.target;\n        var inputFilter = this.state.filter.inputFilter;\n        var filteredUsers = [];\n\n        if(input.tagName === \"INPUT\") {\n            inputFilter = input.value.toUpperCase();\n        }\n        \n        const newFilter = {\n            inputFilter: inputFilter,\n        }\n\n        this.setState({\n            filter:newFilter\n        });  \n\n\n            this.filterUsers(newFilter, this.state.users, filteredUsers);\n\n        this.setState({filteredUsers:filteredUsers});\n      }\n\n   onImageUploadSuccess(imageId) {\n        let currentUserImage = imageId;\n        this.setState({currentUserImage: currentUserImage})\n    }\n\n    onImageUploadError(error) {\n    }\n\n    onImageUploadProgress(progress) {\n        if (progress < 100) {\n            document.getElementById(\"image_progress\").innerHTML = \"Image Uploading: \" + progress + \"%\";\n        } else {\n            document.getElementById(\"image_progress\").innerHTML = \"Image Uploaded Successfully\";\n\n        }\n    }\n    imgChange(ev) {\n\n        let newUserImg = {};\n        newUserImg.file = ev.target.files[0];\n        if (newUserImg.file) {\n            ImageHandler.UploadImage(newUserImg.file, this.onImageUploadProgress, this.onImageUploadSuccess, this.onImageUploadError);\n\n        } else {\n            newUserImg.URL = \"\";\n        }\n\n    }\n    \n    handleSubmit(e) {\n        const form = e.target;\n        this.setState({validated:true});\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (form.checkValidity() === true) {\n            if(this.state.modalTrigger === \"New Tenant\"){\n                this.createTenant();\n            }\n            else {\n                this.updateUser();\n            }\n        }\n      }\n\n\n    openModal(e, user) {\n        let modalTrigger = e.target.innerHTML;\n        let showStatusSelect;\n        let currentUserId;\n        let currentUserName = \"\";\n        let currentUserEmail = \"\";\n        let currentUserApt = \"\";\n        let currentUserImage = \"\";\n\n        if(modalTrigger === \"Update\") {\n            console.log(\"modal trigger - update\");\n            debugger;\n            modalTrigger = \"Update User\";\n            showStatusSelect = \"show\";\n            currentUserName = user.get(\"username\");\n            currentUserEmail = user.get(\"mail\");\n            currentUserApt = user.get(\"apartment\");\n            currentUserImage = user.get(\"userImage\");\n            currentUserId = user.id;\n            console.log(user.id);\n\n        }\n        else {\n            showStatusSelect = \"hide\";\n        }\n        this.setState({ showModal: true, showStatusSelect: showStatusSelect, modalTrigger: modalTrigger, currentUserId: currentUserId, currentUserName: currentUserName, currentUserEmail:currentUserEmail, currentUserApt: currentUserApt, currentUserImage: currentUserImage})\n    }\n\n    closeModal() {\n        this.setState({ currentUserId: null, currentUserImage:null, showModal: false, validated: false, UserError: false })\n    }\n\n    onCreateTenantSuccess(userId, user) {\n        // console.log(\"onCreateTenantSuccess\");\n        UserDB.GetAllUsers(this.onGetAllUsersSuccess, this.onGetAllUsersError);\n    }\n\n    onCreateTenantError(error) {\n        \n    }\n    \n    createTenant() {\n         const newUser = UserDB.GetUser();\n         newUser.set('username', this.nameInput.current.value);\n         newUser.set('mail', this.emailInput.current.value);\n         newUser.set('apartment', this.aptInput.current.value);\n         newUser.set('userImage', this.state.currentUserImage);\n\n        UserDB.CreateTenant(newUser, this.onCreateTenantSuccess, this.onCreateTenantError)\n\n        this.closeModal();\n    }\n\n    updateUser() {\n        debugger;\n        console.log(this.state.currentUserId);\n        const newUser = UserDB.GetUser();\n        newUser.set('username', this.nameInput.current.value);\n        newUser.set('mail', this.emailInput.current.value);\n        newUser.set('apartment', this.aptInput.current.value);\n        newUser.set('userImage', this.state.currentUserImage);\n\n        UserDB.UpdateUser(this.state.currentUserId, newUser, this.onCreateTenantSuccess, this.onCreateTenantError)\n        this.closeModal();\n   }\n\n   onDeleteUserSuccess(userId, user) {\n    UserDB.GetAllUsers(this.onGetAllUsersSuccess, this.onGetAllUsersError);\n    }\n\n    onDeleteUserError(error) {\n        \n    }\n\n\n   deleteUser(user) {\n    debugger;\n    UserDB.DeleteUser(user.id, this.onDeleteUserSuccess, this.onDeleteUserError)\n    this.closeModal();\n}\n\n\n    onGetAllUsersSuccess(users) {\n        console.log(\"get all users success\");\n        console.log(users.length);\n\n        var filteredUsers = []\n        var hasRecords = false;\n        if (users.length > 0) {\n            hasRecords = true;\n            console.log(hasRecords);\n        }\n        \n        if(this.state.filter !== null) { //is this really needed considering the initial state value?\n            this.filterUsers(this.state.filter, users, filteredUsers);\n        }\n        this.setState({users:users, filteredUsers:filteredUsers, hasRecords:hasRecords});\n    }\n\n    onGetAllUsersError(error) {\n    }\n\n\n    render() {\n        let recordsDisplay = null;\n        if (this.state.users == null) {\n            //loading\n            recordsDisplay = \"Loading...\";\n        }\n        else {\n            recordsDisplay = <RecordsDisplay hasRecords={this.state.hasRecords} recordType=\"tenants\" records={this.state.filteredUsers} openModal={this.openModal} deleteUser={this.deleteUser} loggedInUserId={this.state.loggedInUserId}/> ;\n        }\n\n        const { showModal, currentUserImage } = this.state;\n        const currentUserImageUrl = (currentUserImage === \"\"? \"./images/placeholder-square.jpg\" : ImageHandler.GetImageUrl(currentUserImage));\n        const modalAction = (\n            this.state.modalTrigger === \"New Tenant\" ?  <Button variant=\"primary\" type=\"submit\">Create Tenant</Button>\n                                                    :  <Button variant=\"primary\" type=\"submit\">Update Tenant</Button>\n        );\n      \n      return (\n        <div className=\"Tenants h-100\">\n            <Container className=\"py-6 px-5 mobile-padding\">\n                {/* <TenantsNavbar /> */}\n                <InnerNavbar filterType=\"tenants\" handleFilterChange={this.handleFilterChange}/>\n\n                <div className=\"text-right pt-4 pb-1 mobile-center\">\n                    <Button variant=\"link\" className=\"new-btn\" onClick={this.openModal}>New Tenant</Button>\n                </div>\n                {recordsDisplay}\n            </Container>\n\n            {/* All tenants will have a default password of 1-6 */}\n            \n            <Modal show={showModal} onHide={this.closeModal} size=\"lg\">\n                <Form className=\"userModalFrm\" noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modalTrigger}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Alert variant=\"danger\" show={this.state.userError}>\n                            {this.state.errorMsg}\n                        </Alert>\n                            <Form.Group as={Row} controlId=\"formNameTxt\">\n                                <Form.Label column sm={2}>\n                                    Name:\n                                </Form.Label>\n                                <Col sm={10}>\n                                    <Form.Control type=\"text\" ref={this.nameInput} defaultValue={this.state.currentUserName} placeholder=\"Enter tenant's name\" pattern=\"([a-zA-Z0-9]{1,20}\\s?){1,10}\" required/>\n\n                                    <Form.Control.Feedback type=\"invalid\">\n                                    </Form.Control.Feedback>\n                                </Col>\n                            </Form.Group>\n\n                            <Form.Group as={Row} controlId=\"formEmailTxt\">\n                                <Form.Label column sm={2}>\n                                    Email:\n                                </Form.Label>\n                                <Col sm={10}>\n                                    <Form.Control type=\"text\" ref={this.emailInput} defaultValue={this.state.currentUserEmail} placeholder=\"Enter tenant's email\" pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{3,}$\" required/>\n                                    <Form.Control.Feedback type=\"invalid\">\n                                    </Form.Control.Feedback>\n                                </Col>\n                            </Form.Group>\n\n                            <Form.Group as={Row} controlId=\"formAptTxt\">\n                                <Form.Label column sm={2}>\n                                    Apartment:\n                                </Form.Label>\n                                <Col sm={10}>\n                                    <Form.Control type=\"text\" ref={this.aptInput} defaultValue={this.state.currentUserApt} placeholder=\"Enter tenant's apartment\" pattern=\"([a-zA-Z0-9]{1,20}\\s?){1,5}\" required/>\n                                </Col>\n                            </Form.Group>\n\n                            <Form.Group as={Row} controlId=\"formImgControl\" className=\"align-items-center\">\n                                <Form.Label column sm={2}>\n                                    Image URL:\n                                </Form.Label>\n                                <Col sm={7}>\n                                    <div className=\"custom-file\">\n                                        <input ref={this.imgInput} type=\"file\" className=\"custom-file-input\" id=\"customFile\" accept=\"image/*\" onChange={this.imgChange}/>\n                                        {/* <Form.Control type=\"file\" placeholder=\"User image URL\" accept=\"image/*\" onChange={this.imgChange}/> */}\n                                        <p id=\"image_progress\"></p>\n                                        <label className=\"custom-file-label\" htmlFor=\"customFile\">Choose image</label>\n                                    </div>\n                                </Col>\n                                <Col sm={3}>\n                                    <Image src={currentUserImageUrl} fluid className=\"thumbnail\"/>\n                                </Col>\n                            </Form.Group>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.closeModal}>\n                            Close\n                        </Button>\n                        {modalAction}\n                    </Modal.Footer>\n                    </Form>\n                </Modal>\n        </div>\n        );\n\n    }\n  }   \n\nexport default Tenants;\n","import React from 'react';\nimport VotingDB from '../components/VotingDB';\nimport InnerNavbar from '../components/InnerNavbar'\nimport RecordsDisplay from '../components/RecordsDisplay'\nimport { Container, Row, Col, Button, Modal, Form, Image } from 'react-bootstrap'\nimport Alert from 'react-bootstrap/Alert'\n\nclass Votings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          votings: null, //Get from Parse DB\n          hasRecords: null,\n          filter: {\n              inputFilter:\"\",\n          },\n          filteredVotings: null, \n          showModal: false,\n          currentVotingId: null,\n          currentVotingTitle: null,\n          currentVotingDetails: null,\n          currentVotingEndDate: null,\n          currentVotingOptions: null,\n          currentVotingResult: null,\n          //currentVotingPrecentage: null,\n        // currentVotingPros: null,\n        //   currentVotingAgainst: null,\n          validated: false,\n          votingError: false,\n          errorMsg:\"\"\n      }\n        \n        this.onGetAllVotingsSuccess = this.onGetAllVotingsSuccess.bind(this);\n        this.onGetAllVotingsError = this.onGetAllVotingsError.bind(this);\n        this.filterVotings = this.filterVotings.bind(this);\n        this.onCreateVotingSuccess = this.onCreateVotingSuccess.bind(this);\n        this.onCreateVotingError = this.onCreateVotingError.bind(this);\n        this.openModal = this.openModal.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n        this.createVoting = this.createVoting.bind(this);\n        this.updateVoting = this.updateVoting.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleFilterChange = this.handleFilterChange.bind(this);\n  \n        this.titleInput = React.createRef();\n        this.detailsInput = React.createRef();\n        this.endDateInput = React.createRef();\n        this.optionsInput = React.createRef();\n        this.optionInput1 = React.createRef();\n        this.optionInput2 = React.createRef();\n        this.endDateInput = React.createRef();\n      }\n      \n      componentDidMount(){\n        VotingDB.GetAllVotings(this.onGetAllVotingsSuccess, this.onGetAllVotingsError);\n    }\n\n    checkCurrentVoting(filter, currentVotingTitle, currentVotingDetails) { //Check if current voting matches filter\n        if (\n            //Input filter is not empty\n            ((filter.inputFilter !== \"\") && (currentVotingTitle.indexOf(filter.inputFilter) > -1 || currentVotingDetails.indexOf(filter.inputFilter) > -1)) ||\n            //Input Filter is empty so accept any\n            (filter.inputFilter === \"\")\n            \n            ) \n        { return true; }\n        \n        else\n        { return false; }\n    }\n\n    filterVotings(filter, originalVotings, filteredVotings) {\n        // Loop through all votings keys, and add those who match the search query to matches array\n        for (var i = 0; i < originalVotings.length; i++) {\n                var currentVotingTitle = originalVotings[i].get(\"title\").toUpperCase();\n                var currentVotingDetails = originalVotings[i].get(\"details\").toUpperCase();\n\n                if (this.checkCurrentVoting(filter, currentVotingTitle, currentVotingDetails)) {\n                    filteredVotings.push(originalVotings[i]);\n                }\n\n         }\n    }\n\n    handleFilterChange(e) {\n        var input;\n        input = e.target;\n        var inputFilter = this.state.filter.inputFilter;\n        var filteredVotings = [];\n\n        if(input.tagName === \"INPUT\") {\n            inputFilter = input.value.toUpperCase();\n        }\n\n        const newFilter = {\n            inputFilter: inputFilter\n        }\n\n        this.setState({\n            filter:newFilter\n        });  \n\n\n            this.filterVotings(newFilter, this.state.votings, filteredVotings);\n\n        this.setState({filteredVotings:filteredVotings});\n      }\n\n    \n    handleSubmit(e) {\n        const form = e.target;\n        this.setState({validated:true});\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (form.checkValidity() === true) {\n            // if(this.state.modalTrigger === \"New Voting\"){\n                this.createVoting();\n            // }\n            // else {\n            //     this.updateVoting();\n            // }\n        }\n      }\n\n\n    openModal(e) {\n        //let modalTrigger = e.target.innerHTML;\n        //let showStatusSelect;\n        // let currentVotingId;\n        // let currentVotingTitle = \"\";\n        // let currentVotingDetails = \"\";\n        // let currentVotingEndDate = \"\";\n        // let currentVotingOptions = \"\";\n        // let currentVotingResult = \"\";\n\n        // if(modalTrigger === \"Update\") {\n        //     modalTrigger = \"Update Voting\";\n        //     showStatusSelect = \"show\";\n        //     currentVotingTitle = voting.get(\"title\");\n        //     currentVotingDetails = voting.get(\"details\");\n        //     currentVotingPriority = voting.get(\"priority\");\n        //     currentVotingStatus = voting.get(\"status\");\n        //     currentVotingImage = voting.get(\"image\");\n        //     currentVotingId = voting.id;\n        // }\n        // else {\n            //showStatusSelect = \"hide\";\n        // }\n        this.setState({ showModal: true})\n    }\n\n    closeModal() {\n        this.setState({ currentVotingId: null, showModal: false, validated: false, votingError: false })\n    }\n\n    onCreateVotingSuccess(votingId, voting) {\n        VotingDB.GetAllVotings(this.onGetAllVotingsSuccess, this.onGetAllVotingsError);\n    }\n\n    onCreateVotingError(error) {\n        \n    }\n    \n    createVoting() {\n         const newVoting = VotingDB.GetVoting();\n         newVoting.set('title', this.titleInput.current.value);\n         newVoting.set('details', this.detailsInput.current.value);\n         newVoting.set('options', [this.optionInput1.current.value, this.optionInput2.current.value]);\n         newVoting.set('dueDate', this.endDateInput.current.value);\n\n        VotingDB.CreateVoting(newVoting, this.onCreateVotingSuccess, this.onCreateVotingError)\n\n        this.closeModal();\n    }\n\n    updateVoting() {\n        const newVoting = VotingDB.GetVoting();\n        // newVoting.set('title', this.titleInput.current.value);\n        // newVoting.set('details', this.detailsInput.current.value);\n        // newVoting.set('options', this.optionsInput.current.value);\n        newVoting.set('dueDate', this.endDateInput.current.value);\n\n        VotingDB.updateVoting(this.state.currentVotingId, newVoting, this.onCreateVotingSuccess, this.onCreateVotingError)\n        this.closeModal();\n   }\n\n    onGetAllVotingsSuccess(votings) {\n        var filteredVotings = []\n        var hasRecords = false;\n        if (votings.length > 0) {\n            hasRecords = true;\n        }\n        \n        if(this.state.filter !== null) {\n            this.filterVotings(this.state.filter, votings, filteredVotings);\n        }\n\n        this.setState({votings:votings, filteredVotings:filteredVotings, hasRecords:hasRecords});\n    }\n\n    onGetAllVotingsError(error) {\n    }\n\n  \n    render() {\n        let recordsDisplayActive = null;\n        let recordsDisplayResults = null;\n\n        if (this.state.votings == null) {\n            //loading\n            recordsDisplayActive = \"Loading...\";\n        }\n        else {\n            recordsDisplayActive = <RecordsDisplay hasRecords={this.state.hasRecords} recordType=\"active votings\" records={this.state.votings} openModal={this.openModal}/> ;\n        }\n\n        \n        if (this.state.votings == null) {\n            //loading\n            recordsDisplayResults = \"Loading...\";\n        }\n        else {\n            recordsDisplayResults = <RecordsDisplay hasRecords={this.state.hasRecords} recordType=\"voting results\" records={this.state.votings} openModal={this.openModal}/> ;\n        }\n\n        const { showModal } = this.state;\n        // const modalAction = (\n        //     this.state.modalTrigger === \"New Voting\" ?  <Button variant=\"primary\" type=\"submit\">Create Voting</Button>\n        //                                             :  <Button variant=\"primary\" type=\"submit\">Update Voting</Button>\n        // );\n\n      \n            return (\n                    <div className=\"Votings h-100\">\n                        <Container fluid className=\"py-6 px-5 mobile-padding\">\n                            <Row>\n                                <Col lg={6} className=\"Voting-box\">\n                                        <h2>Active Votings</h2>\n                                         <div className=\"text-right pt-4 pb-1 mobile-center\">\n                                            <Button variant=\"link\" className=\"new-btn\" onClick={this.openModal}>New Voting</Button>\n                                        </div>\n                                        {recordsDisplayActive}\n                                </Col>\n                                <Col lg={6}>\n                                    <h2>Voting Results</h2>\n                                    <InnerNavbar filterType=\"voting\" handleFilterChange={this.handleFilterChange}/>\n                                    {recordsDisplayResults}\n                                </Col>\n                            </Row>\n                        </Container>\n                        <Modal show={showModal} onHide={this.closeModal} size=\"lg\">\n                            <Form className=\"votingModalFrm\" noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n\n                            <Modal.Header closeButton>\n                                <Modal.Title>New Voting</Modal.Title>\n                            </Modal.Header>\n                            <Modal.Body>\n                                <Alert variant=\"danger\" show={this.state.votingError}>\n                                    {this.state.errorMsg}\n                                </Alert>\n                                    <Form.Group as={Row} controlId=\"formNameTxt\">\n                                        <Form.Label column lg={2}>\n                                            Title:\n                                        </Form.Label>\n                                        <Col lg={10}>\n                                            <Form.Control type=\"text\" ref={this.titleInput} pattern=\"([a-zA-Z0-9]{1,20}\\s?){1,10}\" required/>\n                                            <Form.Control.Feedback type=\"invalid\">\n                                            </Form.Control.Feedback>\n                                        </Col>\n                                    </Form.Group>\n\n                                    <Form.Group as={Row} controlId=\"formDetailsTxt\">\n                                        <Form.Label column sm={2}>\n                                            Details:\n                                        </Form.Label>\n                                        <Col sm={10}>\n                                            <Form.Control ref={this.detailsInput} as=\"textarea\" rows=\"3\"/>\n                                            <Form.Control.Feedback type=\"invalid\">\n                                            </Form.Control.Feedback>\n                                        </Col>\n                                    </Form.Group>\n\n                                    <Form.Group as={Row} controlId=\"formOptionsTxt\">\n                                        <Form.Label column sm={2}>\n                                            Options:\n                                        </Form.Label>\n                                        <Col sm={10}>\n                                            <Form.Control ref={this.optionInput1} type=\"text\" className=\"mb-2\" required pattern=\"([a-zA-Z0-9]{1,20}\\s?){1,10}\" />\n                                            <Form.Control ref={this.optionInput2} type=\"text\" required pattern=\"([a-zA-Z0-9]{1,20}\\s?){1,10}\" />\n                                        </Col>\n                                    </Form.Group>\n\n                                    <Form.Group as={Row} controlId=\"formDateControl\" className=\"align-items-center\">\n                                        <Form.Label column sm={2}>\n                                            End Date:\n                                        </Form.Label>\n                                        <Col sm={10}>\n                                            <Form.Control ref={this.endDateInput} required type=\"datetime-local\" className=\"w-50\" />     \n                                        </Col>\n                                    </Form.Group>\n                                </Modal.Body>\n                                <Modal.Footer>\n                                    <Button variant=\"secondary\">\n                                        Close\n                                    </Button>\n                                    <Button variant=\"primary\" type=\"submit\">\n                                        Create Voting\n                                    </Button>\n                                </Modal.Footer>\n                                </Form>\n                        </Modal>\n                </div>\n                );\n    }\n}\n\nexport default Votings;\n","import React from 'react';\nimport IssueDB from '../components/IssueDB';\nimport ImageHandler from '../components/ImageHandler'\nimport InnerNavbar from '../components/InnerNavbar'\nimport RecordsDisplay from '../components/RecordsDisplay'\nimport { Container, Row, Col, Button, Modal, Form, Image } from 'react-bootstrap'\nimport Alert from 'react-bootstrap/Alert'\n\nclass Issues extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        issues: null, //Get from Parse DB\n        hasRecords: null,\n        filter: {\n            inputFilter:\"\",\n            selectFilter:\"123\"\n        },\n        filteredIssues: null, \n        // activeUserIssues: [],\n        // activePage: 1,\n        showModal: false,\n        currentIssueId: null,\n        currentIssueTitle: null,\n        currentIssueDetails: null,\n        currentIssuePriority: null,\n        currentIssueImage: null,\n        currentIssueStatus: null,\n        modalTrigger: null,\n        showStatusSelect: \"hide\",\n        //totalItemsCount: null, \n        validated: false,\n        issueError: false,\n        errorMsg:\"\",\n        sortByPriority: false\n    }\n      \n      this.onGetAllIssuesSuccess = this.onGetAllIssuesSuccess.bind(this);\n      this.onGetAllIssuesError = this.onGetAllIssuesError.bind(this);\n      this.filterIssues = this.filterIssues.bind(this);\n      this.onCreateIssueSuccess = this.onCreateIssueSuccess.bind(this);\n      this.onCreateIssueError = this.onCreateIssueError.bind(this);\n      this.onImageUploadSuccess = this.onImageUploadSuccess.bind(this);\n      this.onImageUploadError = this.onImageUploadError.bind(this);\n      this.onImageUploadProgress = this.onImageUploadProgress.bind(this);\n      this.openModal = this.openModal.bind(this);\n      this.closeModal = this.closeModal.bind(this);\n      this.createIssue = this.createIssue.bind(this);\n      this.updateIssue = this.updateIssue.bind(this);\n      this.onDeleteIssueError = this.onDeleteIssueError.bind(this);\n      this.onDeleteIssueSuccess = this.onDeleteIssueSuccess.bind(this);\n      this.deleteIssue = this.deleteIssue.bind(this);\n      this.imgChange = this.imgChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n      this.handleFilterChange = this.handleFilterChange.bind(this);\n      this.handleSortChange = this.handleSortChange.bind(this);\n\n      this.titleInput = React.createRef();\n      this.detailsInput = React.createRef();\n      this.priorityInput = React.createRef();\n      this.statusInput = React.createRef();\n      this.imgInput = React.createRef();\n    }\n\n    componentDidMount(){\n        IssueDB.GetAllIssues(this.state.sortByPriority, this.onGetAllIssuesSuccess, this.onGetAllIssuesError);\n    }\n\n    checkCurrentIssue(filter, currentIssueTitle, currentIssueDetails, currentIssuePriority) { //Check if current issue matches filter\n        if (\n                // filter by select\n                (filter.selectFilter.indexOf(currentIssuePriority) > -1) && \n\n                //Filter by Input\n                (\n                    //Input filter is not empty\n                    ((filter.inputFilter !== \"\") && (currentIssueTitle.indexOf(filter.inputFilter) > -1 || currentIssueDetails.indexOf(filter.inputFilter) > -1)) ||\n                    //Input Filter is empty so accept any\n                    (filter.inputFilter === \"\")\n                )\n            ) \n        { return true; }\n        \n        else\n        { return false; }\n    }\n\n    filterIssues(filter, originalIssues, filteredIssues) {\n        // Loop through all issues keys, and add those who match the search query to matches array\n        for (var i = 0; i < originalIssues.length; i++) {\n                var currentIssueTitle = originalIssues[i].get(\"title\").toUpperCase();\n                var currentIssueDetails = originalIssues[i].get(\"details\").toUpperCase();\n                var currentIssuePriority = originalIssues[i].get(\"priority\").toUpperCase();\n\n                if (this.checkCurrentIssue(filter, currentIssueTitle, currentIssueDetails, currentIssuePriority)) {\n                    filteredIssues.push(originalIssues[i]);\n                }\n\n         }\n    }\n\n    handleFilterChange(e) {\n        var input;\n        input = e.target;\n        var inputFilter = this.state.filter.inputFilter;\n        var selectFilter = this.state.filter.selectFilter;\n        var filteredIssues = [];\n\n        if(input.tagName === \"INPUT\") {\n            inputFilter = input.value.toUpperCase();\n        }\n        else if (input.tagName === \"SELECT\") {\n            selectFilter = input.value;\n        }\n\n        const newFilter = {\n            inputFilter: inputFilter,\n            selectFilter:selectFilter\n        }\n\n        this.setState({\n            filter:newFilter\n        });  \n\n\n            this.filterIssues(newFilter, this.state.issues, filteredIssues);\n\n        this.setState({filteredIssues:filteredIssues});\n      }\n\n\n\n    handleSortChange(sortByPriority) {\n        this.setState({sortByPriority: sortByPriority});\n        IssueDB.GetAllIssues(sortByPriority, this.onGetAllIssuesSuccess, this.onGetAllIssuesError);\n\n    }\n\n\n    onImageUploadSuccess(imageId) {\n        let currentIssueImage = imageId;\n        this.setState({currentIssueImage: currentIssueImage})\n    }\n\n    onImageUploadError(error) {\n    }\n\n    onImageUploadProgress(progress) {\n        if (progress < 100) {\n            document.getElementById(\"image_progress\").innerHTML = \"Image Uploading: \" + progress + \"%\";\n        } else {\n            document.getElementById(\"image_progress\").innerHTML = \"Image Uploaded Successfully\";\n\n        }\n    }\n    imgChange(ev) {\n\n        let newIssueImg = {};\n        newIssueImg.file = ev.target.files[0];\n        if (newIssueImg.file) {\n            ImageHandler.UploadImage(newIssueImg.file, this.onImageUploadProgress, this.onImageUploadSuccess, this.onImageUploadError);\n\n        } else {\n            newIssueImg.URL = \"\";\n        }\n\n    }\n    \n    handleSubmit(e) {\n        const form = e.target;\n        this.setState({validated:true});\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (form.checkValidity() === true) {\n            if(this.state.modalTrigger === \"New Issue\"){\n                this.createIssue();\n            }\n            else {\n                this.updateIssue();\n            }\n        }\n      }\n\n\n    openModal(e, issue) {\n        let modalTrigger = e.target.innerHTML;\n        let showStatusSelect;\n        let currentIssueId;\n        let currentIssueTitle = \"\";\n        let currentIssueDetails = \"\";\n        let currentIssuePriority = \"\";\n        let currentIssueStatus = \"\";\n        let currentIssueImage = \"\";\n\n        if(modalTrigger === \"Update\") {\n            modalTrigger = \"Update Issue\";\n            showStatusSelect = \"show\";\n            currentIssueTitle = issue.get(\"title\");\n            currentIssueDetails = issue.get(\"details\");\n            currentIssuePriority = issue.get(\"priority\");\n            currentIssueStatus = issue.get(\"status\");\n            currentIssueImage = issue.get(\"image\");\n            currentIssueId = issue.id;\n        }\n        else {\n            showStatusSelect = \"hide\";\n        }\n        this.setState({ showModal: true, showStatusSelect: showStatusSelect, modalTrigger: modalTrigger, currentIssueId: currentIssueId, currentIssueTitle: currentIssueTitle, currentIssueDetails:currentIssueDetails, currentIssuePriority: currentIssuePriority, currentIssueStatus: currentIssueStatus, currentIssueImage: currentIssueImage})\n    }\n\n    closeModal() {\n        this.setState({ currentIssueId: null, currentIssueImage:null, showModal: false, validated: false, issueError: false })\n    }\n\n    onCreateIssueSuccess(issueId, issue) {\n        IssueDB.GetAllIssues(this.state.sortByPriority, this.onGetAllIssuesSuccess, this.onGetAllIssuesError);\n    }\n\n    onCreateIssueError(error) {\n        \n    }\n    \n    createIssue() {\n         const newIssue = IssueDB.GetIssue();\n         newIssue.set('title', this.titleInput.current.value);\n         newIssue.set('details', this.detailsInput.current.value);\n         newIssue.set('priority', this.priorityInput.current.value);\n         newIssue.set('status', this.statusInput.current.value);\n         newIssue.set('image', this.state.currentIssueImage);\n\n        IssueDB.CreateIssue(newIssue, this.onCreateIssueSuccess, this.onCreateIssueError)\n\n        this.closeModal();\n    }\n\n    updateIssue() {\n        const newIssue = IssueDB.GetIssue();\n        newIssue.set('title', this.titleInput.current.value);\n        newIssue.set('details', this.detailsInput.current.value);\n        newIssue.set('priority', this.priorityInput.current.value);\n        newIssue.set('status', this.statusInput.current.value);\n        newIssue.set('image', this.state.currentIssueImage);\n\n        IssueDB.UpdateIssue(this.state.currentIssueId, newIssue, this.onCreateIssueSuccess, this.onCreateIssueError)\n        this.closeModal();\n   }\n\n   onDeleteIssueSuccess(issueId, issue) {\n    IssueDB.GetAllIssues(this.state.sortByPriority, this.onGetAllIssuesSuccess, this.onGetAllIssuesError);\n    }\n\n    onDeleteIssueError(error) {\n        \n    }\n\n\n   deleteIssue(issue) {\n    IssueDB.DeleteIssue(issue.id, this.onDeleteIssueSuccess, this.onDeleteIssueError)\n    this.closeModal();\n}\n\n\n    onGetAllIssuesSuccess(issues) {\n        var filteredIssues = []\n        var hasRecords = false;\n        if (issues.length > 0) {\n            hasRecords = true;\n        }\n        \n        if(this.state.filter !== null) {\n            this.filterIssues(this.state.filter, issues, filteredIssues);\n        }\n\n        this.setState({issues:issues, filteredIssues:filteredIssues, hasRecords:hasRecords});\n    }\n\n    onGetAllIssuesError(error) {\n    }\n\n    render() {\n        let recordsDisplay = null;\n        if (this.state.issues == null) {\n            //loading\n            recordsDisplay = \"Loading...\";\n        }\n        else {\n            recordsDisplay = <RecordsDisplay hasRecords={this.state.hasRecords} recordType=\"issues\" records={this.state.filteredIssues} openModal={this.openModal} deleteIssue={this.deleteIssue}/> ;\n        }\n\n        const { showModal, currentIssueImage } = this.state;\n        const currentIssueImageUrl = (currentIssueImage === \"\"? \"./images/placeholder-square.jpg\" : ImageHandler.GetImageUrl(currentIssueImage));\n        const modalAction = (\n            this.state.modalTrigger === \"New Issue\" ?  <Button variant=\"primary\" type=\"submit\">Create Issue</Button>\n                                                    :  <Button variant=\"primary\" type=\"submit\">Update Issue</Button>\n        );\n\n      return (\n                <div className=\"Issues h-100\">\n                    <Container className=\"py-6 px-5 mobile-padding\">\n                        <InnerNavbar filterType=\"issues\" handleFilterChange={this.handleFilterChange} handleSortChange={this.handleSortChange}/>\n                        <div className=\"text-right pt-4 pb-1 mobile-center\">\n                            <Button variant=\"link\" className=\"new-btn\" onClick={this.openModal}>New Issue</Button>\n                        </div>\n                        {recordsDisplay}\n                    </Container>\n                    \n                    <Modal show={showModal} onHide={this.closeModal} size=\"lg\">\n                    <Form className=\"issueModalFrm\" noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n\n                        <Modal.Header closeButton>\n                            <Modal.Title>{this.state.modalTrigger}</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <Alert variant=\"danger\" show={this.state.issueError}>\n                                {this.state.errorMsg}\n                            </Alert>\n                                <Form.Group as={Row} controlId=\"formNameTxt\">\n                                    <Form.Label column sm={2}>\n                                        Title:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control type=\"text\" ref={this.titleInput} defaultValue={this.state.currentIssueTitle} pattern=\"([a-zA-Z0-9]{1,20}\\s?){1,10}\" required/>\n\n                                        <Form.Control.Feedback type=\"invalid\">\n                                        </Form.Control.Feedback>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formDetailsTxt\">\n                                    <Form.Label column sm={2}>\n                                        Details:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control ref={this.detailsInput} defaultValue={this.state.currentIssueDetails} as=\"textarea\" rows=\"3\"/>\n                                        <Form.Control.Feedback type=\"invalid\">\n                                        </Form.Control.Feedback>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formPrioritySelect\">\n                                    <Form.Label column sm={2}>\n                                        Priority:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control ref={this.priorityInput} defaultValue={this.state.currentIssuePriority} as=\"select\" className=\"priority-select\" required>\n                                            <option value=\"1\">Normal</option>\n                                            <option value=\"2\">Important</option>\n                                            <option value=\"3\">Urgent</option>\n                                        </Form.Control>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formImgControl\" className=\"align-items-center\">\n                                    <Form.Label column sm={2}>\n                                        Image URL:\n                                    </Form.Label>\n                                    <Col sm={7}>\n                                        <div className=\"custom-file\">\n                                            <input ref={this.imgInput} type=\"file\" className=\"custom-file-input\" id=\"customFile\" accept=\"image/*\" onChange={this.imgChange}/>\n                                            {/* <Form.Control type=\"file\" placeholder=\"Issue image URL\" accept=\"image/*\" onChange={this.imgChange}/> */}\n                                            <p id=\"image_progress\"></p>\n                                            <label className=\"custom-file-label\" htmlFor=\"customFile\">Choose image</label>\n                                        </div>\n                                    </Col>\n                                    <Col sm={3}>\n                                        <Image src={currentIssueImageUrl} fluid className=\"thumbnail\"/>\n                                    </Col>\n                                </Form.Group>\n                                \n                                <Form.Group as={Row} controlId=\"formStatusSelect\" className={this.state.showStatusSelect}>\n                                    <Form.Label column sm={2}>\n                                        Status:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control ref={this.statusInput} defaultValue={this.state.currentIssueStatus} as=\"select\" className=\"status-select\">\n                                            <option value=\"open\">Open</option>\n                                            <option value=\"closed\">Closed</option>\n                                        </Form.Control>\n                                    </Col>\n                                </Form.Group>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button variant=\"secondary\" onClick={this.closeModal}>\n                                Close\n                            </Button>\n                           {modalAction}\n                        </Modal.Footer>\n                        </Form>\n                    </Modal>\n            </div>\n        );\n\n    }\n  }   \n\n\nexport default Issues;\n","import React from 'react'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport PieChart from 'react-minimal-pie-chart'\n\nclass Records extends React.Component {\n    \n    render () {\n        const charts = (\n            this.props.pageName === \"CommitteeDashboard\"?\n            <Row className=\"text-center py-3\">\n\n                <Col className=\"pb-4\" lg={4}>\n                    <h6>Voting Title1</h6> \n                    <p className=\"mb-1 font-weight-normal\">By: Date</p>\n                    <PieChart className=\"chart\"\n                        data={[\n                            { title: 'For', value: 80, color: '#90ee90' },\n                            { title: 'Against', value: 20, color: '#a2012c' },\n                    ]}/>\n                 </Col>\n                  <Col className=\"pb-4\" lg={4}>\n                  <h6>Voting Title1</h6> \n                  <p className=\"mb-1 font-weight-normal\">By: Date</p>\n                  <PieChart className=\"chart\"\n                      data={[\n                          { title: 'For', value: 80, color: '#90ee90' },\n                          { title: 'Against', value: 20, color: '#a2012c' },\n                  ]}/>\n               </Col>\n                <Col className=\"chartBox\" lg={4}>\n                <h6>Voting Title1</h6> \n                <p className=\"mb-1 font-weight-normal\">By: Date</p>\n                <PieChart className=\"chart\"\n                    data={[\n                        { title: 'For', value: 80, color: '#90ee90' },\n                        { title: 'Against', value: 20, color: '#a2012c' },\n                ]}/>\n             </Col>\n             </Row>\n            :\n            <Row className=\"text-center\">\n                <Col className=\"chartBox\" lg={12}>\n                    <h6>Voting Title1</h6> \n                    <p className=\"mb-1 font-weight-normal\">By: Date</p>\n                    <PieChart className=\"chart\"\n                        data={[\n                            { title: 'For', value: 80, color: '#90ee90' },\n                            { title: 'Against', value: 20, color: '#a2012c' },\n                    ]}/>\n                </Col>\n            </Row>\n        );\n\n        return (\n          <div className=\"w-100\"> {charts} </div>\n            \n        );     \n    }\n}\n\nclass NoRecords extends React.Component {\n   \n    render() {\n\n        return (\n            <p className=\"noRecordsMsg\">There are no {this.props.recordType}. :)</p>\n        );\n    }\n}\nclass ChartsDisplay extends React.Component {\n  \n    render() {\n        \n        return (\n            this.props.hasRecords? \n                <Records pageName={this.props.pageName}/>\n            :   <NoRecords recordType={this.props.recordType}/>\n        );\n    }\n}\n\nexport default ChartsDisplay;","import React from 'react';\n//import Nav from 'react-bootstrap/Nav'\n//import Navbar from 'react-bootstrap/Navbar'\n//import Jumbotron from 'react-bootstrap/Jumbotron'\n//import Button from 'react-bootstrap/Button'\n//import DashboardIssuesAccordion from '../components/RecordsDisplay'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport RecordsDisplay from '../components/RecordsDisplay';\n// import Navigation from '../components/Navigation';\nimport ChartsDisplay from '../components/ChartsDisplay';\nimport Badge from 'react-bootstrap/Badge';\n// import PieChart from 'react-minimal-pie-chart'\n\nclass CommitteeDashboard extends React.Component {\n    \n    render() {\n      \n      return (\n                \n                    <Container fluid className=\"px-4\"> \n                            <Row className=\"pb-2\">\n                                <Col lg={6} className=\"issue-box\">\n                                    <h2>New Reported Issues <Badge variant=\"light\">0</Badge></h2> \n                                    {/* Who manages the hasRecords state? */}\n                                    <RecordsDisplay hasRecords={true} recordType=\"new issues\" /> \n                                </Col>\n                                <Col lg={6}>\n                                    <h2>Overdue Issues <Badge variant=\"light\">9</Badge></h2>\n                                     {/* Who manages the hasRecords state? */}\n                                    <RecordsDisplay hasRecords={true} recordType=\"overdue issues\" />\n                                </Col>\n                            </Row>\n                           \n                            <Row className=\"pt-3 border-top\">\n                                <Col>                    \n                                    <h2>Active Voting Percentage</h2>\n                                    {/* Who manages the hasRecords state? */}\n\n                                    <ChartsDisplay hasRecords={true} recordType=\"active votings\" pageName=\"CommitteeDashboard\"/>\n                                    \n                                   \n                                </Col>\n                            </Row>\n                        </Container>\n      );\n\n    }\n  }   \n\n\nclass TenantDashboard extends React.Component {\n  \n    render() {\n     \n      return (\n        <Container fluid className=\"px-4\">\n                <Row className=\"pb-2\">\n                    <Col lg={6} className=\"issue-box\">\n                        <h2>New Messages <Badge variant=\"light\">0</Badge></h2> \n                        {/* Who manages the hasRecords state? */}\n                        <RecordsDisplay hasRecords={true} recordType=\"new messages\" /> \n                    </Col>\n                    <Col lg={6}>\n                        <h2>Pending Votings <Badge variant=\"light\">9</Badge></h2>\n                        <RecordsDisplay hasRecords={true} recordType=\"pending votings\" />\n                    </Col>\n                </Row>\n                \n                <Row className=\"pt-3 border-top\">\n                    <Col className=\"issue-box\" lg={4}>\n                        <h2 className=\"mb-4\">Voting Results</h2>\n                        <ChartsDisplay hasRecords={true} recordType=\"voting results\" pageName=\"TenantDashboard\"/>\n                    </Col>\n                    \n                    <Col className=\"issue-box\" lg={4}>                   \n                        <h2>New Issues <Badge variant=\"light\">2</Badge></h2>\n                        <RecordsDisplay hasRecords={true} recordType=\"new issues\" />\n                    </Col>\n                        <Col lg={4}>                    \n                        <h2>New Resolved Issues <Badge variant=\"light\">3</Badge></h2>\n                        <RecordsDisplay hasRecords={true} recordType=\"new resolved issues\" />\n                        </Col>\n                </Row>\n            </Container>\n        );\n    }\n  }   \n\n  class Dashboard extends React.Component {\n    \n    render() {\n        // console.log(\"this.props.userType = \" + this.props.userType);\n      const dashboard = (\n        this.props.userType === \"admin\"? <CommitteeDashboard /> : <TenantDashboard />\n      );\n\n      return (\n        <div className=\"Dashboard h-100\">\n            {/* <Navigation isLoggedIn={this.props.isLoggedIn} pageName=\"Dashboard\"/> */}\n            {dashboard}\n        </div>\n        );\n\n    }\n}   \n\n\nexport default Dashboard;\n","import React from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\n\nclass Navigation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleLogout = this.handleLogout.bind(this);\n\n}\n\nhandleLogout (e) {\n  this.props.handleLogout();\n}\n  \n\n    render () {\n        const logo = (this.props.isLoggedIn? \"App-logo-inner\" : \"App-logo\");\n        const isLoggedIn = this.props.isLoggedIn;\n        \n        return (\n            <Navbar fixed=\"top\" collapseOnSelect expand=\"lg\">\n              <Row className=\"w-100\">\n                    <Col lg={1} sm= {4} xs={4}>\n                      <Navbar.Brand href=\"#/\"><img className={logo} src=\"./images/homeboy.png\" alt=\"Homeboy - Your Buddy In Da Building\" /></Navbar.Brand>\n                    </Col>\n                   \n                  <Col lg={11} sm= {4} xs={4} className=\"px-0\">\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\n                        <Nav className={isLoggedIn? \"mr-auto\" : \"hide\"}>\n                          <Nav.Link href=\"#/Dashboard\">Dashboard</Nav.Link>\n                          <Nav.Link href=\"#/Tenants\">Tenants</Nav.Link>\n                          <Nav.Link href=\"#/Messages\">Messages</Nav.Link>\n                          <Nav.Link href=\"#/Issues\">Issues</Nav.Link>\n                          <Nav.Link href=\"#/Votings\">Voting</Nav.Link>\n                        </Nav>\n\n                        <Nav className={isLoggedIn? \"hide\" : \"ml-auto\"}>\n                            <Nav.Link href=\"#/Login\">Login</Nav.Link>\n                            <Nav.Link eventKey={2} href=\"#/SignUp\">\n                            Sign Up\n                            </Nav.Link>\n                        </Nav>\n\n                        <Nav className={isLoggedIn? \"ml-auto\" : \"hide\"}>\n                            <Nav.Link onClick={this.handleLogout}>Logout</Nav.Link>\n                        </Nav>\n                    </Navbar.Collapse>\n                  </Col>\n\n                  <Col sm= {4} xs={4} className=\"text-right px-0\">\n                      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                  </Col>\n                \n              </Row>\n          </Navbar>\n  \n        );     \n    }\n}\n\n\n  \nexport default Navigation;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  // Link\n} from \"react-router-dom\";\nimport { Redirect } from 'react-router-dom'\nimport Home from './pages/Home';\nimport SignUp from './pages/SignUp';\nimport Login from './pages//Login';\nimport Messages from './pages/Messages';\nimport Tenants from './pages/Tenants';\nimport Votings from './pages/Votings';\nimport Issues from './pages/Issues';\nimport Dashboard from './pages/Dashboard';\nimport Navigation from './components/Navigation'\nimport UserDB from './components/UserDB';\n\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      activeUser: null,\n      isLoggedIn: UserDB.IsLoggedIn(),\n      // isLoggedIn: null,\n      activePage: \"Home\",\n      //userType: null\n      userType: UserDB.IsLoggedIn() ? UserDB.GetCurrentUserType() : null\n      // allUsers: jsonUsers,\n  }\n\n  // this.changeActivePage = this.changeActivePage.bind(this);\n  this.handleLogin = this.handleLogin.bind(this);\n  this.handleLogout = this.handleLogout.bind(this);\n  this.handleLogoutSuccess = this.handleLogoutSuccess.bind(this);\n  this.handleLogoutError = this.handleLogoutError.bind(this);\n\n  // //Make sure you have all the information you need\n  // if ( this.state.isLoggedIn == null) {\n  //   // this.state.isLoggedIn = UserDB.IsLoggedIn();\n  //   //this.setState(this.state); \n  //   this.setState({isLoggedIn:UserDB.IsLoggedIn()}); \n  // }\n  // if (this.state.isLoggedIn && this.state.userType == null) {\n  //   this.setState({userType:UserDB.GetCurrentUserType()}); \n\n  //   // this.state.userType = UserDB.GetCurrentUserType();\n  //   //this.setState(this.state); \n  // }\n}\n\nhandleLogin() {\n // this.state.isLoggedIn = true;\n  //Check userType with the DB\n  //this.state.userType = UserDB.GetCurrentUserType();\n\n  this.setState({isLoggedIn:true, userType:UserDB.GetCurrentUserType()}); \n\n  // this.setState(this.state);\n}\n\nhandleLogout() {\n  UserDB.LogOut(this.handleLogoutSuccess, this.handleLogoutError);\n}\n\nhandleLogoutSuccess() {\n  // this.state.isLoggedIn = false;\n  // this.state.userType = null;\n  // this.setState(this.state);\n\n  this.setState({isLoggedIn:false, userType:null});\n}\n\nhandleLogoutError() {\n}\n\n// changeActivePage(pageName){\n// if(pageName === \"Dashboard\") {\n//   this.state.isLoggedIn = true;\n// }\n//   this.state.activePage = pageName;\n//   this.setState(this.state);\n// }\n\n  render() {\n    const activeUser = this.state.activeUser;\n\n    const signUpDestination = (\n      this.state.isLoggedIn? <Redirect to=\"/Dashboard\"/>\n      : <SignUp handleLogin={this.handleLogin} />\n    );\n\n    const loginDestination = (\n      this.state.isLoggedIn? <Redirect to=\"/Dashboard\"/>\n      : <Login handleLogin={this.handleLogin} isLoggedIn={this.state.isLoggedIn}/>\n    );\n\n    const homeDestination = (\n      this.state.isLoggedIn? <Redirect to=\"/Dashboard\"/>\n      : <Home />\n    );\n\n    const issuesDestination = (\n      this.state.isLoggedIn? <Issues activeUser={activeUser} handleLogout={this.handleLogout} isLoggedIn={this.state.isLoggedIn}/>\n      :  <Redirect to=\"/Login\"/>\n    );\n\n    const messagesDestination = (\n      this.state.isLoggedIn? <Messages activeUser={activeUser} handleLogout={this.handleLogout} isLoggedIn={this.state.isLoggedIn}/>\n      : <Redirect to=\"/Login\"/>\n    );\n\n    const dashboardDestination = (\n      this.state.isLoggedIn? <Dashboard userType={this.state.userType} activeUser={activeUser} handleLogout={this.handleLogout} isLoggedIn={this.state.isLoggedIn}/>\n      :  <Redirect to=\"/Login\"/>\n    );\n\n    const tenantsDestination = (\n      this.state.isLoggedIn? <Tenants activeUser={activeUser} handleLogout={this.handleLogout} isLoggedIn={this.state.isLoggedIn}/>\n      :  <Redirect to=\"/Login\"/>\n    );\n\n    const votingsDestination = (\n      this.state.isLoggedIn? <Votings activeUser={activeUser} handleLogout={this.handleLogout} isLoggedIn={this.state.isLoggedIn}/>\n      :  <Redirect to=\"/Login\"/>\n    );\n\n    const navigation = (\n      <Navigation isLoggedIn={this.state.isLoggedIn} handleLogout={this.handleLogout}/>\n    );\n\n    return (\n      <div className=\"App\">\n          <Router>\n            <Switch>\n            <Route exact path=\"/\">\n              {navigation}\n              {homeDestination}\n            </Route>\n            <Route path=\"/Login\">\n              {loginDestination}\n            </Route>\n            <Route path=\"/Issues\">\n              {navigation}\n              {issuesDestination}\n            </Route>\n            <Route path=\"/Messages\">\n              {navigation}\n              {messagesDestination}\n            </Route>\n            <Route path=\"/SignUp\">\n              {signUpDestination}\n              </Route>\n            <Route path=\"/Dashboard\">\n              {navigation}\n              {dashboardDestination}\n            </Route>\n            <Route path=\"/Tenants\">\n              {navigation}\n              {tenantsDestination}\n            </Route>\n            <Route path=\"/Votings\">\n              {navigation}\n              {votingsDestination}\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}