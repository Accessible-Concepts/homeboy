{"version":3,"sources":["pages/Home.js","components/UserDB.js","pages/SignUp.js","pages/Login.js","components/CommentDB.js","components/MessageDB.js","components/ImageHandler.js","components/InnerNavbar.js","components/Comments.js","components/IssueDB.js","components/IssuesAccordion.js","components/DashboardIssuesAccordion.js","components/TenantsAccordion.js","components/MessagesAccordion.js","components/DashboardNewMessagesAccordion.js","components/VotingsAccordion.js","components/PendingVotingsAccordion.js","components/RecordsDisplay.js","pages/Messages.js","pages/Tenants.js","pages/Votings.js","pages/Issues.js","components/ChartsDisplay.js","pages/Dashboard.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Main","Jumbotron","className","Button","href","variant","size","Container","CardDeck","Col","lg","Card","Header","Title","Img","src","Body","Text","Footer","block","React","Component","Home","Parse","require","serverURL","initialize","UserDB","GetUser","User","SignUpCommitteeMember","user","onSuccess","onError","set","signUp","then","catch","error","CreateTenant","current","get","sessionToken","become","Error","LogIn","email","password","logIn","LogOut","logOut","GetAllUsers","UserClass","Object","extend","Query","find","results","FindUserByEmail","query","equalTo","FindUserById","userId","IsLoggedIn","GetCurrentUser","GetCurrentUserName","GetCurrentUserType","SignUp","props","state","username","community","address","validated","signUpError","errorMsg","handleNameChange","bind","handleEmailChange","handlePasswordChange","handleCommunityChange","handleAddressChange","handleSubmit","OnSignUpSuccess","OnSignUpError","e","value","target","this","setState","handleLogin","message","form","preventDefault","stopPropagation","checkValidity","destination","Alert","show","Form","noValidate","onSubmit","Group","controlId","Label","Control","type","placeholder","onChange","pattern","required","Feedback","Login","loginError","OnLoginSuccess","OnLoginError","replace","autoComplete","addCommentToObject","object","commentText","comments","newComment","CommentDB","GetComment","id","push","GetCommentComments","commentId","onSucces","Comment","AddCommentToObject","CommentComment","comment","save","response","GetObjectComments","objectId","MessageDB","GetMessage","CreateMessage","newMessage","result","GetAllMessages","sortByPriority","Message","descending","addDescending","UpdateMessage","messageId","updatedMessage","GetMessageComments","CommentMessage","DeleteMessage","MessageId","destroy","ImageHandler","UploadImage","imageFile","onProgressChange","onImageUploadSuccess","onImageUploadError","xhr","XMLHttpRequest","fd","FormData","open","setRequestHeader","upload","addEventListener","progress","Math","round","loaded","total","onreadystatechange","readyState","status","JSON","parse","responseText","public_id","append","send","GetImageUrl","imageId","undefined","InnerNavbar","onSortChange","changeEvent","handleSortChange","filterType","filters","handleFilterChange","isHidden","colWidth","Row","name","defaultChecked","htmlFor","Comments","parentId","getUserImage","getCommentRows","handleKeyPress","onGetAllCommentsSuccess","onGetAllCommentsError","onAddCommentSuccess","onAddCommentError","commentInput","createRef","key","addComment","image","map","index","sm","xs","alt","as","rows","ref","onKeyPress","IssueDB","GetIssue","CreateIssue","newIssue","GetAllIssues","Issue","UpdateIssue","issueId","updatedIssue","GetIssueComments","CommentIssue","DeleteIssue","IssuesAccordion","activeCardId","getPriorityIcon","handleComment","addCommentHanlder","getAllComments","handleUpdateClick","handleDeleteClick","handleAccordionToggle","getToggleClass","priority","issue","openModal","deleteIssue","issueCards","records","Accordion","Toggle","eventKey","onClick","Collapse","getCardImage","getPriorityString","DashboardIssuesAccordion","TenantsAccordion","MessagesAccordion","deleteMessage","messageCards","DashboardNewMessagesAccordion","VotingsAccordion","votingAccordion","votingStatus","userType","placeholderText","withPortal","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","column","data","title","color","PendingVotingsAccordion","Records","accordion","recordType","NoRecords","RecordsDisplay","hasRecords","Messages","messages","filter","inputFilter","selectFilter","filteredMessages","showModal","currentMessageId","currentMessageTitle","currentMessageDetails","currentMessagePriority","currentMessageImage","modalTrigger","showStatusSelect","messageError","onGetAllMessagesSuccess","onGetAllMessagesError","filterMessages","onCreateMessageSuccess","onCreateMessageError","onImageUploadProgress","closeModal","createMessage","updateMessage","onDeleteMessageError","onDeleteMessageSuccess","imgChange","titleInput","detailsInput","priorityInput","imgInput","indexOf","originalMessages","i","length","toUpperCase","checkCurrentMessage","input","tagName","newFilter","document","getElementById","innerHTML","ev","newMessageImg","file","files","URL","recordsDisplay","currentMessageImageUrl","modalAction","Modal","onHide","closeButton","defaultValue","accept","Image","fluid","Tenants","activePage","totalItemsCount","handlePageChange","val","parseInt","pageNumber","isNaN","console","log","innerText","includes","Votings","Issues","issues","filteredIssues","currentIssueId","currentIssueTitle","currentIssueDetails","currentIssuePriority","currentIssueImage","currentIssueStatus","issueError","onGetAllIssuesSuccess","onGetAllIssuesError","filterIssues","onCreateIssueSuccess","onCreateIssueError","createIssue","updateIssue","onDeleteIssueError","onDeleteIssueSuccess","statusInput","originalIssues","checkCurrentIssue","newIssueImg","currentIssueImageUrl","charts","pageName","ChartsDisplay","CommitteeDashboard","Badge","TenantDashboard","Dashboard","dashboard","Navigation","handleLogout","logo","isLoggedIn","Navbar","fixed","collapseOnSelect","expand","Brand","Nav","Link","aria-controls","App","activeUser","handleLogoutSuccess","handleLogoutError","signUpDestination","to","loginDestination","homeDestination","issuesDestination","messagesDestination","dashboardDestination","tenantsDestination","votingsDestination","navigation","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ba467e1.chunk.js","sourcesContent":["import React from 'react';\n//import './Home.css';\n\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Button from 'react-bootstrap/Button'\nimport CardDeck from 'react-bootstrap/CardDeck'\nimport Card from 'react-bootstrap/Card'\nimport Col from 'react-bootstrap/Col'\n// import Navigation from '../components/Navigation'\nimport Container from 'react-bootstrap/Container'\n\n\nclass Main extends React.Component {\n  \n  render () {\n\n    return (\n      <main>\n        <Jumbotron className=\"hero text-center\">\n          <h1>Welcome to Homeboy - Your Building Management Buddy!</h1>\n          <p>\n          With our groundbreaking Homeowner Association Management System,\n          communication between tenants and the homeowner association committee has never been easier!\n          </p>\n          <p>\n            <Button href=\"#/SignUp\" variant=\"primary\" size=\"lg\" className=\"px-5 py-2\">Sign Up - It's Free!</Button>\n          </p>\n        </Jumbotron>\n        <Container className=\"featureWrapper text-center mt-4\">\n          <h2>Love Thy Neighbor</h2>\n          <p>\n          Use Homeboy to make it good in the hood! We’ve got the features you need to prevent gang fights and promote happy neighboring!\n          </p>\n          <CardDeck>\n            <Col lg={4}>\n              <Card>\n                  <Card.Header>\n                    <Card.Title>Issue Management</Card.Title>\n                  </Card.Header>\n                  <Card.Img variant=\"top\" src=\"./images/issue-management.png\" />\n                  <Card.Body>\n                    <Card.Text>\n                    Striving to achieve structured tracking for issues reported by homies?\n                    </Card.Text>\n                  </Card.Body>\n                  <Card.Footer className=\"border-0\">\n                    <Button href=\"#/Issues\" variant=\"primary\" block>Make It Work</Button>\n                  </Card.Footer>\n                </Card>\n              </Col>\n              <Col lg={4}>\n                <Card>\n                  <Card.Header>\n                    <Card.Title>Easy Messaging</Card.Title>\n                  </Card.Header>\n                  <Card.Img variant=\"top\" src=\"./images/messaging.png\" />\n                  <Card.Body>\n                    <Card.Text>\n                    Begging for homies to pay attention to messages from the building's committee?\n                    </Card.Text>\n                  </Card.Body>\n                  <Card.Footer className=\"border-0\">\n                    <Button href=\"#/Messages\" variant=\"primary\" block>Make It Happen</Button>\n                  </Card.Footer>\n                </Card>\n              </Col>\n              <Col lg={4}>\n                <Card>\n                  <Card.Header>\n                    <Card.Title>Open Voting</Card.Title>\n                  </Card.Header>\n                  <Card.Img variant=\"top\" src=\"./images/voting.png\" />\n                  <Card.Body>\n                    <Card.Text>\n                    Dreaming of improving the way financial decisions are made in your building? \n                    </Card.Text>\n                  </Card.Body>\n                  <Card.Footer className=\"border-0\">\n                    <Button href=\"#/Votings\" variant=\"primary\" block>Make It Count</Button>\n                  </Card.Footer>\n              </Card>\n            </Col>\n          </CardDeck>      \n      </Container>\n      </main>\n    );\n  }\n}\n\nclass Home extends React.Component {\n  render () {\n    return (\n      <div className=\"Home\">\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","var Parse = require('parse');\n\nInitialize();\n\n\nfunction Initialize() {\n  Parse.serverURL = 'https://parseapi.back4app.com'; // This is your Server URL\n  Parse.initialize(\n    'EjBHB6eHkPYe1zSnuvjLgLnAcimFgedDdkTQKKMp', // This is your Application ID\n    'x2qBBi1Ms1YMtws1NreUEgGsmFrrx13zuyZcxLRR' // This is your Javascript key\n  );\n}\n\nconst UserDB = {\n\n  GetUser: function GetUser() {\n    return new Parse.User()\n  },\n\n  SignUpCommitteeMember: function SignUpCommitteeMember(user, onSuccess, onError){\n    user.set('isCommitteeMember', true);\n    user.signUp().then((user) => {\n      onSuccess(user);\n    }).catch(error => {\n      onError(error);\n    });\n  },\n\n  CreateTenant: function CreateTenant(user, onSuccess, onError){\n    //Check if I'm logged in as a committee member.\n    if ((Parse.User.current() == null) || (!Parse.User.current().get(\"isCommitteeMember\"))) {\n      onError(new Error(\"Not logged in as committee member.\"))\n      return;\n    }\n    \n    //I save this user session for use later so I can revert back to who I am.\n    var sessionToken = Parse.User.current().get(\"sessionToken\");\n    user.set('isCommitteeMember', false);\n    user.signUp().then((user) => {\n      Parse.User.become(sessionToken).then((user) => {\n        // The current user is now set back to creator.\n        onSuccess(user);\n      }).catch(error => {\n        onError(error);\n      });\n    }).catch(error => {\n      onError(error);\n    });\n  },\n\n  LogIn: function LogIn(email, password, onSuccess, onError) {\n    // Pass the username and password to logIn function\n    Parse.User.logIn(email,password).then((user) => {\n      // Do stuff after successful login\n      onSuccess(user);\n      //console.log('Logged in user', user);\n    }).catch(error => {\n      onError(error);\n      //console.error('Error while logging in user', error);\n    })\n  },\n\n  LogOut: function LogOut(onSuccess, onError) {\n    // Pass the username and password to logIn function\n    Parse.User.logOut().then(() => {\n      // Do stuff after successful login\n      onSuccess();\n      //console.log('Logged out');\n    }).catch(error => {\n      onError(error);\n      //console.error('Error while logging out user', error);\n    })\n  },\n\n  GetAllUsers: function GetAllUsers(onSuccess, onError) {\n\n    const UserClass = Parse.Object.extend(\"User\");\n\n    // Creates a new Query object to help us fetch UserClass objects\n    const query = new Parse.Query(UserClass);\n\n    // Executes the query, which returns an array of UserClass\n    query.find().then(results => {\n      onSuccess(results);\n    }).catch((error) =>  {\n      onError(error);\n      //console.error('Error while trying to GetAllUsers', error);\n\n    });\n  },\n\n  FindUserByEmail: function FindUserByEmail(email, onSuccess, onError) {\n\n    const UserClass = Parse.Object.extend(\"User\");\n\n    // Creates a new Query object to help us fetch UserClass objects\n    const query = new Parse.Query(UserClass);\n\n    query.equalTo(\"email\", email);\n\n    // Executes the query, which returns an array of UserClass\n    query.find().then(results => {\n      onSuccess(results);\n    }).catch((error) =>  {\n      onError(error);\n      //console.error('Error while trying to FindUserByEmail', error);\n\n    });\n  },\n\n  FindUserById: function FindUserById(userId, onSuccess, onError) {\n\n    const UserClass = Parse.Object.extend(\"User\");\n\n    // Creates a new Query object to help us fetch UserClass objects\n    const query = new Parse.Query(UserClass);\n\n    query.equalTo(\"objectId\", userId);\n\n    // Executes the query, which returns an array of UserClass\n    query.find().then(results => {\n      onSuccess(results);\n    }).catch((error) =>  {\n      onError(error);\n      //console.error('Error while trying to FindUserByEmail', error);\n\n    });\n  },\n\n  IsLoggedIn: function IsLoggedIn() {\n    return Parse.User.current() != null;\n  },\n\n  GetCurrentUser: function GetCurrentUser() {\n    return Parse.User.current();\n  },\n\n  GetCurrentUserName: function GetCurrentUserName() {\n    if (Parse.User.current() != null) {\n      return Parse.User.current().get('username');\n    } else {\n      return \"\";\n    }\n  },\n\n  \n  GetCurrentUserType: function GetCurrentUserType() {\n    const user = Parse.User.current();\n    if (user == null) {\n      return null;\n    } else {\n      if (user.get('isCommitteeMember')) {\n        return \"admin\";\n      } else {\n        return \"tenant\";\n      }\n    }\n  },\n\n}\n\n\nexport default UserDB;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Alert from 'react-bootstrap/Alert'\nimport UserDB from '../components/UserDB';\n\n\nclass SignUp extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          username: \"\",\n          email:\"\",\n          password: \"\",\n          community:\"\",\n          address:\"\",\n          validated:false,\n          signUpError:false,\n          errorMsg:\"\",\n          //signUpSuccess:false\n        };\n\n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.handleEmailChange = this.handleEmailChange.bind(this);\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\n        this.handleCommunityChange = this.handleCommunityChange.bind(this);\n        this.handleAddressChange = this.handleAddressChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.SignUp = this.SignUp.bind(this);\n        this.OnSignUpSuccess = this.OnSignUpSuccess.bind(this);\n        this.OnSignUpError = this.OnSignUpError.bind(this);\n    }\n\n    handleNameChange (e) {\n        let value = e.target.value;\n        this.setState({username:value});\n        // this.state.username = value;\n        // this.setState(this.state);\n    }\n\n    handleEmailChange (e) {\n        let value = e.target.value;\n        this.setState({email:value});\n        // this.state.email = value;\n        // this.setState(this.state);\n    }\n\n    handlePasswordChange (e) {\n        let value = e.target.value;\n        this.setState({password:value});\n        // this.state.password = value;\n        // this.setState(this.state);\n    }\n\n    handleCommunityChange (e) {\n        let value = e.target.value;\n        this.setState({community:value});\n        // this.state.community = value;\n        // this.setState(this.state);\n    }\n\n    handleAddressChange (e) {\n        let value = e.target.value;\n        this.setState({address:value});\n        // this.state.address = value;\n        // this.setState(this.state);\n    }\n    \n    OnSignUpSuccess(user) {\n        this.props.handleLogin();\n    }\n\n    OnSignUpError(error) {\n        // this.state.errorMsg = error.message;\n        this.setState({errorMsg:error.message, signUpError:true});\n\n        // this.state.signUpError = true;\n        // this.setState(this.state);\n    }\n\n    SignUp() {\n        const user = UserDB.GetUser()\n        user.set('username', this.state.username);\n        user.set('email', this.state.email);\n        user.set('password', this.state.password);\n        user.set('communityName', this.state.community);\n        user.set('address', this.state.address);\n        UserDB.SignUpCommitteeMember(user, this.OnSignUpSuccess, this.OnSignUpError);\n      }\n\n    handleSubmit(e) {\n        const form = e.target;\n        // this.state.validated = true;\n        // this.setState(this.state);\n        this.setState({validated:true});\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (form.checkValidity() === true) {\n            this.SignUp();\n        }\n      }\n\n    render() {\n\n        const destination = (\n            <div className=\"SignUp\">\n                <h1>Create a Homeboy Account</h1>\n                <p>or <a href=\"#/Login\">or log in to your account</a></p>\n                <Alert variant=\"danger\" show={this.state.signUpError}>\n                {this.state.errorMsg}\n                </Alert>\n                <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n                    <Form.Group controlId=\"formBasicName\">\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter name\" onChange={this.handleNameChange} pattern=\"[a-zA-Z]{4,0}\" required/>\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please provide a valid name.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n        \n                    <Form.Group controlId=\"formBasicEmail\">\n                        <Form.Label>Email address</Form.Label>\n                        <Form.Control type=\"email\" placeholder=\"Enter email\" onChange={this.handleEmailChange} pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{3,}$\" required/>\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please provide a valid email.\n                        </Form.Control.Feedback>\n                        <Form.Text className=\"text-muted\">\n                            We'll never share your email with anyone else.\n                        </Form.Text>\n                    </Form.Group>\n        \n                    <Form.Group controlId=\"formBasicPassword\">\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control type=\"password\" placeholder=\"Password\" onChange={this.handlePasswordChange} pattern=\"(?=.*\\d)(?=.*[a-z]).{8,20}\" required/>\n                        <Form.Control.Feedback type=\"invalid\">\n                        Password must be 8-20 characters, contain lowercase letters and numbers, and no spaces, special characters, or emoji.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n        \n                    <Form.Group controlId=\"formBasicCommunity\">\n                        <Form.Label>Building Community Name</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter community name\" onChange={this.handleCommunityChange} pattern=\"[a-zA-Z0-9]{2,}\" required/>\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please choose a name for your building.\n                        </Form.Control.Feedback>\n                        \n                    </Form.Group>\n        \n                    <Form.Group controlId=\"formBasicAddress\">\n                        <Form.Label>Full Address</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter address\" onChange={this.handleAddressChange} required/>\n                        <Form.Control.Feedback type=\"invalid\">\n                        Address is a required field.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    \n                    <Button type=\"submit\" variant=\"success\"  block>\n                        Create New Account\n                    </Button>\n                </Form>\n            </div>    \n        );\n        \n        return (\n            <div>{destination}</div>\n        );\n    }\n}\n\nexport default SignUp;\n","import React from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport UserDB from '../components/UserDB'\nimport Alert from 'react-bootstrap/Alert'\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          email:\"\",\n          password: \"\",\n          validated:false,\n          loginError:false,\n          errorMsg:\"\",\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.Login = this.Login.bind(this);\n        this.OnLoginSuccess = this.OnLoginSuccess.bind(this);\n        this.OnLoginError = this.OnLoginError.bind(this);\n        this.handleEmailChange = this.handleEmailChange.bind(this);\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    }\n\n    handleEmailChange (e) {\n        let value = e.target.value;\n        //this.state.email = value;\n        //this.setState(this.state);\n        this.setState({email:value});\n    }\n\n    handlePasswordChange (e) {\n        let value = e.target.value;\n        this.setState({password:value});\n        // this.state.password = value;\n        // this.setState(this.state);\n    }\n\n    OnLoginSuccess(user) {\n        // this.state.signUpError = false;\n        // this.state.signUpSuccess = true;\n        // this.setState(this.state);\n        this.props.handleLogin();\n    }\n\n    OnLoginError(error) {\n        let errorMsg = error.message.replace(\"username\", \"email\");\n        this.setState({\n                        errorMsg:errorMsg,\n                        loginError:true\n                      });\n\n        // this.state.errorMsg = errorMsg;\n        // this.state.loginError = true;\n        // this.setState(this.state);\n    }\n\n    Login() {\n        UserDB.LogIn(this.state.email, this.state.password, this.OnLoginSuccess, this.OnLoginError);\n      }\n\n    handleSubmit(e) {\n        const form = e.target;\n        // this.state.validated = true;\n        // this.setState(this.state);\n        this.setState({validated:true});\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (form.checkValidity() === true) {\n            this.Login();\n        }\n      }\n\n    render() {\n                return (\n                    <div className=\"Login\">\n                    <h1>Login to Homeboy</h1>\n                    <p>or <a href=\"#/SignUp\">or create an account</a></p>\n                    <Alert variant=\"danger\" show={this.state.loginError}>\n                        {this.state.errorMsg}\n                    </Alert>\n                    <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Email address</Form.Label>\n                            <Form.Control type=\"email\" placeholder=\"Enter email\" autoComplete=\"username\" onChange={this.handleEmailChange} pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{3,}$\" required/>\n                            <Form.Control.Feedback type=\"invalid\">\n                            </Form.Control.Feedback>\n                        </Form.Group>\n\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Password\" autoComplete=\"current-password\" onChange={this.handlePasswordChange} pattern=\"(?=.*\\d)(?=.*[a-z]).{8,20}\" required/>\n                             <Form.Control.Feedback type=\"invalid\">\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Button variant=\"success\" type=\"submit\" block>\n                            Come On In!\n                        </Button>\n                    </Form>\n                </div>\n                );\n        }\n}\n\nexport default Login;\n","var Parse = require('parse');\n\nInitialize();\n\nfunction Initialize() {\n  Parse.serverURL = 'https://parseapi.back4app.com'; // This is your Server URL\n  Parse.initialize(\n    'EjBHB6eHkPYe1zSnuvjLgLnAcimFgedDdkTQKKMp', // This is your Application ID\n    'x2qBBi1Ms1YMtws1NreUEgGsmFrrx13zuyZcxLRR' // This is your Javascript key\n  );\n}\n\nfunction addCommentToObject(object, commentText) {\n  var comments = object.get(\"comments\")\n  if (comments == null) {\n    comments = [];\n  }\n  const newComment = CommentDB.GetComment();\n  newComment.set('parentId', object.id)\n  newComment.set('createdBy', Parse.User.current());\n  newComment.set('createdByUserName', Parse.User.current().get('username'));\n  newComment.set('createdByUserImage', Parse.User.current().get('userImage'));\n\n  newComment.set('text', commentText);\n  comments.push(newComment)\n  object.set('comments', comments);\n}\n\nconst CommentDB = {\n  GetComment: function GetComment() {\n    const Comment = Parse.Object.extend('Comment');\n\n    return new Comment();\n  },\n\n  // CreateComment: function CreateComment(newComment, onSuccess, onError){\n  //\n  // },\n\n\n  GetCommentComments: function GetCommentComments(commentId, onSucces, onError) {\n    const Comment = Parse.Object.extend('Comment');\n    const query = new Parse.Query(Comment);\n    query.get(commentId).then((results) => {\n      const comments = results.get(\"comments\")\n      onSucces(comments);\n      // console.log('Comments found', comments);\n    }, (error) => {\n      onError(error)\n      // console.error('Error while fetching comments', error);\n    });\n  },\n\n  AddCommentToObject: function AddCommentToObject(object, commentText) {\n    addCommentToObject(object, commentText);\n  },\n\n  CommentComment: function CommentComment(commentId, comment, onSuccess, onError) {\n    const Comment = Parse.Object.extend('Comment');\n    const query = new Parse.Query(Comment);\n    // here you put the objectId that you want to update\n    query.get(commentId).then((object) => {\n      addCommentToObject(object, comment);\n      object.save().then((response) => {\n        onSuccess(response);\n        // console.log('Updated Comment', response);\n      }, (error) => {\n        onError(error);\n        // console.error('Error while updating Comment', error);\n      });\n    });\n  },\n  GetObjectComments: function GetObjectComments(objectId, onSucces, onError) {\n    const Comment = Parse.Object.extend('Comment');\n    const query = new Parse.Query(Comment);\n    query.equalTo(\"parentId\", objectId);\n      query.find().then((results) => {\n      onSucces(results);\n      // console.log('Comments found', results);\n    }, (error) => {\n      onError(error)\n      // console.error('Error while fetching comments', error);\n    });\n  },\n}\n\nexport default CommentDB;\n","import CommentDB from '../components/CommentDB';\nvar Parse = require('parse');\n\nInitialize();\n\nfunction Initialize() {\n  Parse.serverURL = 'https://parseapi.back4app.com'; // This is your Server URL\n  Parse.initialize(\n    'EjBHB6eHkPYe1zSnuvjLgLnAcimFgedDdkTQKKMp', // This is your Application ID\n    'x2qBBi1Ms1YMtws1NreUEgGsmFrrx13zuyZcxLRR' // This is your Javascript key\n  );\n}\n\nconst MessageDB = {\n  GetMessage: function GetMessage() {\n    const Message = Parse.Object.extend('Message');\n    return new Message()\n  },\n\n  CreateMessage: function CreateMessage(newMessage, onSuccess, onError){\n    newMessage.set('createdBy', Parse.User.current());\n    //newMessage.set('comments', []);\n\n    newMessage.save().then(\n      (result) => {\n        const id = result.id;\n        onSuccess(id, result);\n        // console.log('Message created', result);\n      },\n      (error) => {\n        onError(error);\n        // console.error('Error while creating Message: ', error);\n      }\n    );\n  },\n\n  GetAllMessages: function GetAllMessages(sortByPriority, onSuccess, onError) {\n    const Message = Parse.Object.extend('Message');\n    const query = new Parse.Query(Message);\n\n    if (sortByPriority === true) {\n      query.descending(\"priority\");\n      query.addDescending(\"updatedAt\");\n    } else {\n      query.descending(\"updatedAt\");\n    }\n    \n    query.find().then((results) => {\n      onSuccess(results);\n      // console.log('Message found', results);\n    }, (error) => {\n      onError(error);\n      // console.error('Error while fetching Message', error);\n    });\n  },\n\n  UpdateMessage: function UpdateMessage(messageId, updatedMessage, onSuccess, onError) {\n    const Message = Parse.Object.extend('Message');\n    const query = new Parse.Query(Message);\n    // here you put the objectId that you want to update\n    query.get(messageId).then((object) => {\n      object.set('createdBy', Parse.User.current());\n      object.set('title', updatedMessage.get('title'));\n      object.set('details', updatedMessage.get('details'));\n      object.set('priority', updatedMessage.get('priority'));\n      object.save().then((response) => {\n        onSuccess(response);\n        // console.log('Updated Message', response);\n      }, (error) => {\n        onError(error);\n        // console.error('Error while updating Message', error);\n      });\n    });\n  },\n\n  GetMessageComments: function GetMessageComments(messageId, onSucces, onError) {\n    const Message = Parse.Object.extend('Message');\n    const query = new Parse.Query(Message);\n    query.get(messageId).then((results) => {\n      const comments = results.get(\"comments\")\n      onSucces(comments);\n      // console.log('Comments found', comments);\n    }, (error) => {\n      onError(error)\n      // console.error('Error while fetching comments', error);\n    });\n\n  },\n\n  CommentMessage: function CommentMessage(messageId, commentText, onSuccess, onError) {\n    const Message = Parse.Object.extend('Message');\n    const query = new Parse.Query(Message);\n    // here you put the objectId that you want to update\n    query.get(messageId).then((object) => {\n      CommentDB.AddCommentToObject(object, commentText);\n      object.save().then((response) => {\n        onSuccess(response);\n        // console.log('Updated Message', response);\n      }, (error) => {\n        onError(error);\n        // console.error('Error while updating Message', error);\n      });\n    });\n  },\n\n  DeleteMessage: function DeleteMessage(MessageId, onSuccess, onError) {\n    const Message = Parse.Object.extend('Message');\n    const query = new Parse.Query(Message);\n    query.get(MessageId).then((object) => {\n      object.destroy().then((response) => {\n        onSuccess(response);\n        // console.log('Deleted Message', response);\n      }, (error) => {\n        // console.error('Error while deleting Message', error);\n      });\n    });\n  }\n\n}\n\nexport default MessageDB;\n","// import cloudinary from 'cloudinary-core';\n// const cloudinaryCore = new cloudinary.Cloudinary({cloud_name: 'dybzbstoi',api_key: \"695564997941263\",\n// api_secret: \"-jpNbRT83us6l2mfUQZfvebBvMg\"\n// });\n\nconst ImageHandler  = {\n  UploadImage: function UploadImage(imageFile, onProgressChange, onImageUploadSuccess, onImageUploadError) {\n    var url = `https://api.cloudinary.com/v1_1/dybzbstoi/upload`;\n    var xhr = new XMLHttpRequest();\n    var fd = new FormData();\n    xhr.open('POST', url, true);\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    // Update progress (can be used to show progress indicator)\n    xhr.upload.addEventListener(\"progress\", function(e) {\n      var progress = Math.round((e.loaded * 100.0) / e.total);\n      if (onProgressChange !== null) {\n        onProgressChange(progress)\n      }\n      // document.getElementById('progress').style.width = progress + \"%\";\n      //\n    //   console.log(`fileuploadprogress data.loaded: ${e.loaded},\n    // data.total: ${e.total}`);\n    });\n\n    xhr.onreadystatechange = function(e) {\n      if (xhr.readyState === 4 && xhr.status === 200) {\n        // File uploaded successfully\n         var response = JSON.parse(xhr.responseText);\n        // // https://res.cloudinary.com/cloudName/image/upload/v1483481128/public_id.jpg\n        //var url = response.secure_url;\n\n        onImageUploadSuccess(response.public_id)\n\n\n      } else if (xhr.status !== 200 ){\n        onImageUploadError(xhr.status)\n      }\n    };\n    const unsignedUploadPreset = 'v2ugydrc';\n    fd.append('upload_preset', unsignedUploadPreset);\n    fd.append('tags', 'browser_upload'); // Optional - add tag for image admin in Cloudinary\n    fd.append('file', imageFile);\n    xhr.send(fd);\n  },\n\n  GetImageUrl: function GetImageUrl(imageId) {\n    if (imageId !== null && imageId !== \"\" && imageId !== undefined) {\n      return (\"http://res.cloudinary.com/dybzbstoi/image/upload/\" + imageId + \".jpg\")\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default ImageHandler;\n","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n// import { thisExpression } from '@babel/types'\n\n\nclass InnerNavbar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { }\n\n        this.onSortChange = this.onSortChange.bind(this);\n\n    }\n\n    onSortChange(changeEvent) {\n        var sortByPriority = false;\n        if (changeEvent.target.value === \"priority\") {\n            sortByPriority = true;\n        } else {\n            sortByPriority = false;\n        }\n        this.props.handleSortChange(sortByPriority);\n    }\n\n    render() {\n        const placeholder = (\n            this.props.filterType === \"tenants\"?\n            \"Filter by name, email or apartment\" :\n            \"Filter by title or details\"\n            );\n        \n        const filters = (\n            this.props.filterType === \"messages\"?\n            <select className=\"browser-default custom-select mobile-center\" onChange={this.props.handleFilterChange}>\n                <option value=\"12\">Filter by priority</option>\n                <option value=\"1\">Information</option>\n                <option value=\"2\">Important</option>     \n            </select>\n            : this.props.filterType === \"issues\"?\n            <select className=\"browser-default custom-select mobile-center\" onChange={this.props.handleFilterChange}>\n                <option value=\"123\">Filter by priority</option>\n                <option value=\"1\">Normal</option>\n                <option value=\"2\">Important</option>     \n                <option value=\"3\">Urgent</option>     \n            </select>\n\n            :null\n        );\n\n        const isHidden = (\n            (this.props.filterType === \"messages\") || (this.props.filterType === \"issues\") ? null\n            : \"hide\"\n        );\n        \n        const colWidth = (\n            (this.props.filterType === \"tenants\") || (this.props.filterType === \"voting\")? \"12\"\n            : \"6\"\n        );\n\n        return (\n            <Container className=\"NavBar\">\n                {/* <Row className=\"border justify-content-center rounded\">\n                    <Col className=\"col-auto px-0 d-flex align-items-center\">\n                        <i className=\"fas fa-search\"></i>\n                    </Col>\n                    <Col className=\"col-11 px-0\">\n                        <Form.Control className=\"border-0\" type=\"text\" placeholder=\"Filter by text in title and details\" onChange={this.handleFilterChange} />\n                    </Col>\n                </Row> */}\n                <Row>\n                    <Col lg={colWidth} className=\"mobile-center pb-2\">\n                        <Row className=\"border rounded justify-content-center\">\n                            <div className=\"col-auto px-0 d-flex align-items-center\">\n                                <i className=\"fas fa-search\"></i>\n                            </div>\n                            <div className=\"col-11 px-0\">\n                                <Form.Control className=\"border-0\" type=\"text\" placeholder={placeholder} onChange={this.props.handleFilterChange} />\n                            </div>\n                        </Row>\n                    </Col>\n                    <Col lg={3} className=\"pr-0 select-wrapper mobile-center pb-2\">\n                        {filters}                           \n                    </Col>\n                    <Col lg={3} className={\"px-0 text-right mobile-center pb-2 \" + isHidden}>\n                        <h6 className=\"d-inline-block align-middle mr-3\">Sort by:</h6>\n                        <div className=\"form-check form-check-inline\">\n                            <input className=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio1\" value=\"date\" defaultChecked onChange={this.onSortChange}/>\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio1\">Date</label>\n                            </div>\n                            <div className=\"form-check form-check-inline mr-0\">\n                            <input className=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"priority\" onChange={this.onSortChange}/>\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Priority</label>\n                        </div>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\n\n\n\nexport default InnerNavbar;","import React from 'react'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Form from 'react-bootstrap/Form'\r\nimport CommentDB from '../components/CommentDB';\r\n\r\n\r\nclass Comments extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            comments : null,\r\n            parentId : this.props.parentId\r\n        }\r\n\r\n        this.getUserImage = this.getUserImage.bind(this);\r\n        this.getCommentRows = this.getCommentRows.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n        this.onGetAllCommentsSuccess = this.onGetAllCommentsSuccess.bind(this);\r\n        this.onGetAllCommentsError = this.onGetAllCommentsError.bind(this);\r\n        this.onAddCommentSuccess = this.onAddCommentSuccess.bind(this);\r\n        this.onAddCommentError = this.onAddCommentError.bind(this);\r\n\r\n        CommentDB.GetObjectComments(this.state.parentId, this.onGetAllCommentsSuccess, this.onGetAllCommentsError)\r\n\r\n        this.commentInput = React.createRef();\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        // console.log(\"Getting All Comments for \" + this.state.parentId);\r\n       // CommentDB.GetObjectComments(this.state.parentId, this.onGetAllCommentsSuccess, this.onGetAllCommentsError)\r\n        //this.props.getAllComments(this.state.parentId, this.onGetAllCommentsSuccess, this.onGetAllCommentsError)\r\n    }\r\n\r\n    onGetAllCommentsSuccess(comments) {\r\n        //this.state.comments = comments;\r\n        //this.setState(this.state);\r\n        this.setState({comments: comments});\r\n    }\r\n\r\n    onGetAllCommentsError(error) {\r\n\r\n    }\r\n\r\n    onAddCommentSuccess(response) {\r\n      this.commentInput.current.value = \"\";\r\n\r\n        CommentDB.GetObjectComments(this.state.parentId, this.onGetAllCommentsSuccess, this.onGetAllCommentsError);\r\n        // this.props.getAllComments(this.state.parentId, this.onGetAllCommentsSuccess, this.onGetAllCommentsError)\r\n    }\r\n\r\n    onAddCommentError(error) {\r\n        \r\n    }\r\n\r\n    handleKeyPress(e) {\r\n        if (e.key === \"Enter\") {\r\n            const commentText = e.target.value;     \r\n            // console.log(commentText);\r\n            this.props.addComment(this.props.parentId, commentText, this.onAddCommentSuccess, this.onAddCommentError);\r\n            // var newComment = { text: event.target.value };\r\n            // this.state.allTasks.push(newTask);\r\n            // this.state.openCount ++ ;\r\n            // this.setState(this.state);\r\n          }\r\n    }\r\n\r\n    getUserImage(comment){\r\n        const image = comment.get('createdByUserImage');\r\n        if(image == null) {\r\n            return \"./images/avatar-placeholder.gif\";\r\n        }\r\n        else {\r\n            return image;\r\n        }\r\n    }\r\n\r\n    getCommentRows(comments) {\r\n        if(comments === null) {\r\n            return null;\r\n        }\r\n        else {\r\n            const commentRows = comments.map((comment,index) =>\r\n                <Row className=\"Comment mt-4 my-2 mx-0\" key={index}>                                            \r\n                    <Col lg={2} sm={2} xs={2} className=\"p-0\">\r\n                        <img className=\"rounded-circle avatar\" src={this.getUserImage(comment)} alt=\"Avatar\"></img>\r\n                    </Col>\r\n                    <Col lg={10} sm={10} xs={10} className=\"pl-0\">\r\n                        <p className=\"font-weight-bold m-0\">{comment.get('createdByUserName')}</p>\r\n                        <p>{comment.get('text')}</p>\r\n                    </Col>\r\n                </Row>\r\n            );\r\n            return commentRows;\r\n        }\r\n    }\r\n\r\n    render () {\r\n        const comments = this.state.comments;\r\n        \r\n\r\n       return (\r\n        <div className=\"Comments\">\r\n            <h6>Comments:</h6>\r\n            {this.getCommentRows(comments)}\r\n            <Form.Control as=\"textarea\" rows=\"3\" ref={this.commentInput} placeholder=\"Add a comment\" className=\"mt-4\" onKeyPress={this.handleKeyPress}/>                   \r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Comments;","import CommentDB from '../components/CommentDB';\nvar Parse = require('parse');\n\nInitialize();\n\nfunction Initialize() {\n  Parse.serverURL = 'https://parseapi.back4app.com'; // This is your Server URL\n  Parse.initialize(\n    'EjBHB6eHkPYe1zSnuvjLgLnAcimFgedDdkTQKKMp', // This is your Application ID\n    'x2qBBi1Ms1YMtws1NreUEgGsmFrrx13zuyZcxLRR' // This is your Javascript key\n  );\n}\n\nconst IssueDB = {\n  GetIssue: function GetIssue() {\n    const Issue = Parse.Object.extend('Issue');\n    return new Issue();\n  },\n\n  CreateIssue: function CreateIssue(newIssue, onSuccess, onError){\n    newIssue.set('createdBy', Parse.User.current());\n    newIssue.set('comments', null);\n    newIssue.set('status', 'open');\n\n    newIssue.save().then(\n      (result) => {\n        const id = result.id;\n        onSuccess(id, result);\n        // console.log('Issue created', result);\n      },\n      (error) => {\n        onError(error);\n        // console.error('Error while creating Issue: ', error);\n      }\n    );\n  },\n\n  GetAllIssues: function GetAllIssues(sortByPriority, onSuccess, onError) {\n    const Issue = Parse.Object.extend('Issue');\n    const query = new Parse.Query(Issue);\n    if (sortByPriority === true) {\n      query.descending(\"priority\");\n      query.addDescending(\"updatedAt\");\n    } else {\n      query.descending(\"updatedAt\");\n    }\n\n    query.find().then((results) => {\n      // console.log('Issues found', results);\n      onSuccess(results);\n    }, (error) => {\n      onError(error);\n      // console.error('Error while fetching Issues', error);\n    });\n  },\n\n  UpdateIssue: function UpdateIssue(issueId, updatedIssue, onSuccess, onError) {\n    const Issue = Parse.Object.extend('Issue');\n    const query = new Parse.Query(Issue);\n    // here you put the objectId that you want to update\n    query.get(issueId).then((object) => {\n      object.set('createdBy', Parse.User.current());\n      object.set('title', updatedIssue.get('title'));\n      object.set('details', updatedIssue.get('details'));\n      object.set('image', updatedIssue.get('image'));\n      object.set('priority', updatedIssue.get('priority'));\n      object.set('status', updatedIssue.get('status'));\n      object.save().then((response) => {\n        onSuccess(response);\n        // console.log('Updated Issue', response);\n      }, (error) => {\n        onError(error);\n        // console.error('Error while updating Issue', error);\n      });\n    });\n  },\n\n  GetIssueComments: function GetIssueComments(issueId, onSucces, onError) {\n    const Issue = Parse.Object.extend('Issue');\n    const query = new Parse.Query(Issue);\n    query.get(issueId).then((results) => {\n      const comments = results.get(\"comments\")\n      onSucces(comments);\n      // console.log('Comments found', comments);\n    }, (error) => {\n      onError(error)\n      // console.error('Error while fetching comments', error);\n    });\n  },\n\n  CommentIssue: function CommentIssue(issueId, commentText, onSuccess, onError) {\n    const Issue = Parse.Object.extend('Issue');\n    const query = new Parse.Query(Issue);\n    // here you put the objectId that you want to update\n    query.get(issueId).then((object) => {\n      CommentDB.AddCommentToObject(object, commentText);\n      object.save().then((response) => {\n        onSuccess(response);\n        // console.log('Updated Issue', response);\n      }, (error) => {\n        onError(error);\n        // console.error('Error while updating Issue', error);\n      });\n    });\n  },\n\n  DeleteIssue: function DeleteIssue(issueId, onSuccess, onError) {\n    const Issue = Parse.Object.extend('Issue');\n    const query = new Parse.Query(Issue);\n    query.get(issueId).then((object) => {\n      object.destroy().then((response) => {\n        onSuccess(response);\n        // console.log('Deleted Issue', response);\n      }, (error) => {\n        // console.error('Error while deleting Issue', error);\n      });\n    });\n  }\n}\n\nexport default IssueDB;\n","import React from 'react'\r\nimport Accordion from 'react-bootstrap/Accordion'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Comments from '../components/Comments'\r\nimport IssueDB from '../components/IssueDB';\r\nimport ImageHandler from '../components/ImageHandler';\r\n\r\n\r\nclass IssuesAccordion extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeCardId: null\r\n        }\r\n\r\n        this.getPriorityIcon = this.getPriorityIcon.bind(this);\r\n        this.handleComment = this.addCommentHanlder.bind(this);\r\n        this.getAllComments = this.getAllComments.bind(this);\r\n        this.handleUpdateClick = this.handleUpdateClick.bind(this);\r\n        this.handleDeleteClick = this.handleDeleteClick.bind(this);\r\n        this.handleAccordionToggle = this.handleAccordionToggle.bind(this);\r\n        this.getToggleClass = this.getToggleClass.bind(this);\r\n    }\r\n\r\n    getPriorityIcon(priority) {\r\n        if (priority === \"3\") {\r\n            return \"exclamation\";\r\n        } else if (priority === \"2\") {\r\n            return \"info\";\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    getPriorityString(priority) {\r\n        if (priority === \"3\") {\r\n            return \"Urgent\";\r\n        } else if (priority === \"2\") {\r\n            return \"Important\";\r\n        } else {\r\n            return \"Normal\";\r\n        }   \r\n    }\r\n    getCardImage(imageId) {\r\n        if(imageId === \"\") {\r\n            return \"./images/placeholder-square.jpg\";\r\n        }\r\n        else {\r\n            return ImageHandler.GetImageUrl(imageId);\r\n        }\r\n    }\r\n\r\n    getAllComments(issueId, onGetAllCommentsSuccess, onGetAllCommentsError) {\r\n        IssueDB.GetIssueComments(issueId, onGetAllCommentsSuccess, onGetAllCommentsError)\r\n    }\r\n\r\n    addCommentHanlder (issueId, commentText, onAddCommentSuccess, onAddCommentError) {\r\n        IssueDB.CommentIssue(issueId, commentText, onAddCommentSuccess, onAddCommentError);\r\n    }\r\n\r\n    handleUpdateClick(e, issue) {\r\n        this.props.openModal(e, issue);\r\n    }\r\n\r\n    handleDeleteClick (issue) {\r\n        this.props.deleteIssue(issue);\r\n    }\r\n\r\n    getToggleClass(issue) { //Presentation logic\r\n        if(issue.id === this.state.activeCardId) { //User triggered re-rendering\r\n            return \"active\";\r\n        }\r\n    }\r\n\r\n    handleAccordionToggle(issue) { //Business logic\r\n        let activeCardId;\r\n        if(issue.id !== this.state.activeCardId) { //First click on card toggle\r\n            activeCardId = issue.id;\r\n        }\r\n        else {                                   //Second click on card toggle\r\n            activeCardId = null; \r\n        }\r\n            this.setState({activeCardId: activeCardId}); //Re-render - getToggleClass will be be triggered again\r\n    }\r\n\r\n    render() {\r\n        const issues = this.props.records;\r\n        const issueCards = issues.map((issue) => \r\n            \r\n                                        <Card key={issue.id}>\r\n                                            <Accordion.Toggle as={Card.Header} eventKey={issue.id} className={this.getToggleClass(issue)} onClick={(e)=>{this.handleAccordionToggle(issue)}}>\r\n                                                {issue.get(\"title\")}{Accordion.Toggle.eventKey}\r\n                                                <i className={\"fas fa-\" + this.getPriorityIcon(issue.get(\"priority\")) + \"-circle float-right\"}></i>\r\n                                            </Accordion.Toggle>\r\n                                            <Accordion.Collapse eventKey={issue.id}>\r\n                                                <Card.Body>\r\n                                                    <Row>\r\n                                                        <Col className=\"issue-box\" lg={6}>\r\n                                                            <Row className=\"h-100\">\r\n                                                                <Col lg={4}>\r\n                                                                    <Card.Img className=\"thumbnail\" src={this.getCardImage(issue.get(\"image\"))}/>\r\n                                                                </Col>\r\n                                                                <Col lg={8}>                    \r\n                                                                    <Card.Text>\r\n                                                                        <li className=\"list-group-item\"><span className=\"font-weight-bold\">Details: </span>{issue.get(\"details\")}</li>\r\n                                                                        <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Priority: </span>{this.getPriorityString(issue.get(\"priority\"))}</li>\r\n                                                                        <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Status: </span>{issue.get(\"status\")}</li>\r\n                                                                    </Card.Text>\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Col>\r\n                                                        <Col lg={4}>\r\n                                                            <Row>\r\n                                                                <Col>\r\n                                                                    <Comments addComment={this.addCommentHanlder} parentId={issue.id}/>\r\n                                                                    {/* {this.getIssueComments(issue)} */}\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Col>\r\n                                                        <Col lg={2} className=\"p-0 d-flex align-items-end justify-content-end pt-3\">\r\n                                                            <Row className=\"w-100 mx-0 text-center\">\r\n                                                                <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\r\n                                                                    <Button variant=\"outline-dark\" className=\"m-0 responsive-btn\" onClick={(e)=>{this.handleUpdateClick(e, issue)}}>Update</Button>\r\n                                                                </Col>\r\n                                                                <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\r\n                                                                    <Button variant=\"danger\" className=\"m-0 responsive-btn\" onClick={(e)=>{this.handleDeleteClick(issue)}}>Delete</Button>\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Col>\r\n                                                    </Row>                                                           \r\n                                                </Card.Body>\r\n                                            </Accordion.Collapse>\r\n                                        </Card>     \r\n                                    );\r\n\r\n        return (\r\n           <div className=\"IssuesAccordion\">\r\n               <Accordion>\r\n                   {issueCards}\r\n                </Accordion>\r\n            </div>\r\n            );\r\n        }\r\n    }\r\n\r\n export default IssuesAccordion;","import React from 'react'\r\nimport Accordion from 'react-bootstrap/Accordion'\r\n// import Card from 'react-bootstrap/Card'\r\n// import Row from 'react-bootstrap/Row'\r\n// import Col from 'react-bootstrap/Col'\r\n// import Form from 'react-bootstrap/Form'\r\n// import Button from 'react-bootstrap/Button'\r\n\r\nclass DashboardIssuesAccordion extends React.Component {\r\n    \r\n    render () {\r\n        // const issues = this.props.records;\r\n        //  const priority = (\r\n        //                     issue.priority == \"important\"? \"star\" : \"exclamation\"\r\n        //                  );\r\n        // const issueCards = issues.map(issue =>\r\n        //     <Card>\r\n        //         <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\r\n        //         {issue.title}\r\n        //         <i className={\"fas fa-\" + issue.priority  + \"-circle float-right\"}></i>\r\n        //         </Accordion.Toggle>\r\n        //         <Accordion.Collapse eventKey=\"0\">\r\n        //             <Card.Body>\r\n        //                 <Row>\r\n        //                     <Col>\r\n        //                         <Row>\r\n        //                             <Col lg={4}>\r\n        //                                 <Card.Img src={issue.image}/>\r\n        //                             </Col>\r\n        //                             <Col lg={8} className=\"pl-0\">                    \r\n        //                                 <Card.Text>\r\n        //                                     <li className=\"text-left list-group-item mobile-center\"><span className=\"font-weight-bold\">Details: </span>{issue.details}</li>\r\n        //                                 </Card.Text>\r\n        //                             </Col>\r\n        //                         </Row>\r\n        //                     </Col>\r\n        //                 </Row>                             \r\n        //             </Card.Body>\r\n        //         </Accordion.Collapse>\r\n        //     </Card>\r\n        // )\r\n\r\n       \r\n    \r\n        return (\r\n            <div className=\"DashboardNewIssuesAccordion\">\r\n                    <Accordion>\r\n                        {/* {issueCards} */}\r\n                        {/* <Card>\r\n                            <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\r\n                            {issue.title}\r\n                            <i className={\"fas fa-\" + priority  + \"-circle float-right\"}></i>\r\n                            </Accordion.Toggle>\r\n                            <Accordion.Collapse eventKey=\"0\">\r\n                                <Card.Body>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Row>\r\n                                                <Col lg={4}>\r\n                                                    <Card.Img src={issue.image}/>\r\n                                                </Col>\r\n                                                <Col lg={8} className=\"pl-0\">                    \r\n                                                    <Card.Text>\r\n                                                        <li className=\"text-left list-group-item mobile-center\"><span className=\"font-weight-bold\">Details: </span>{issue.details}</li>\r\n                                                    </Card.Text>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Col>\r\n                                    </Row>                             \r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>      */}\r\n                </Accordion>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DashboardIssuesAccordion;","import React from 'react'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n//import Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nclass TenantsAccordion extends React.Component {\n \n    render() {\n        return (\n           <div className=\"TenantsAccordion\">\n               <Accordion>\n                    <Card>\n                        <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\n                        Dynamic Tenant Name\n                        </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"0\">\n                            <Card.Body>\n                                <Row>\n                                    <Col lg={10} className=\"pb-1\">\n                                        <Row>\n                                            <Col lg={4}>\n                                                <Card.Img src=\"https://upload.wikimedia.org/wikipedia/commons/9/92/Backyardpool.jpg\"/>\n                                            </Col>\n                                            <Col lg={8}>                    \n                                                <Card.Text>\n                                                    <li className=\"list-group-item\"><span className=\"font-weight-bold\">Name: </span>**Dynamic Tenant Name**</li>\n                                                    <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Email: </span>**Dynamic Tenant Email**</li>\n                                                    <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Apt: </span>**Dynamic Apt**</li>\n                                                </Card.Text>\n                                            </Col>\n                                        </Row>\n                                    </Col>\n                                    <Col lg={2} className=\"p-0 d-flex align-items-end justify-content-end pt-3\">\n                                        <Row className=\"w-100 mx-0 text-center\">\n                                            <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n                                                <Button variant=\"outline-dark\" className=\"m-0 responsive-btn\">Update</Button>\n                                            </Col>\n                                            <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n                                                <Button variant=\"danger\" className=\"m-0 responsive-btn\">Delete</Button>\n                                            </Col>\n                                        </Row>\n                                        {/* <Button variant=\"outline-dark\" className=\"mx-2 align-bottom\">Update</Button>\n                                        <Button variant=\"danger\" className=\"mx-2  align-bottom\">Delete</Button> */}\n                                    </Col>\n                                </Row>\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </Card>\n                </Accordion>\n           </div>\n        );\n    }\n}\n\nexport default TenantsAccordion;","import React from 'react'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport Comments from '../components/Comments'\nimport MessageDB from '../components/MessageDB';\nimport ImageHandler from '../components/ImageHandler';\n\nclass MessagesAccordion extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeCardId: null\n        }\n\n        this.getPriorityIcon = this.getPriorityIcon.bind(this);\n        this.handleComment = this.addCommentHanlder.bind(this);\n        this.getAllComments = this.getAllComments.bind(this);\n        this.handleUpdateClick = this.handleUpdateClick.bind(this);\n        this.handleDeleteClick = this.handleDeleteClick.bind(this);\n        this.handleAccordionToggle = this.handleAccordionToggle.bind(this);\n        this.getToggleClass = this.getToggleClass.bind(this);\n    }\n\n    getPriorityIcon(priority) {\n        if (priority === \"2\") {\n            return \"exclamation\";\n        } else if (priority === \"1\") {\n            return \"info\";\n        } else {\n            return \"\";\n        }\n    }\n\n    getPriorityString(priority) {\n        if (priority === \"1\") {\n            return \"Information\";\n        }\n        else if (priority === \"2\") {\n            return \"Important\";\n        }\n    }\n\n    getCardImage(imageId) {\n        if(imageId === \"\") {\n            return \"./images/placeholder-square.jpg\";\n        }\n        else {\n            return ImageHandler.GetImageUrl(imageId);\n        }\n    }\n\n    getAllComments(messageId, onGetAllCommentsSuccess, onGetAllCommentsError) {\n        MessageDB.GetMessageComments(messageId, onGetAllCommentsSuccess, onGetAllCommentsError)\n    }\n\n    addCommentHanlder (messageId, commentText, onAddCommentSuccess, onAddCommentError) {\n        MessageDB.CommentMessage(messageId, commentText, onAddCommentSuccess, onAddCommentError);\n    }\n\n    handleUpdateClick(e, message) {\n        this.props.openModal(e, message);\n    }\n\n    handleDeleteClick (message) {\n        this.props.deleteMessage(message);\n    }\n\n    getToggleClass(message) { //Presentation logic\n        if(message.id === this.state.activeCardId) { //User triggered re-rendering\n            return \"active\";\n        }\n    }\n\n    handleAccordionToggle(message) { //Business logic\n        let activeCardId;\n        if(message.id !== this.state.activeCardId) { //First click on card toggle\n            activeCardId = message.id;\n        }\n        else {                                   //Second click on card toggle\n            activeCardId = null; \n        }\n            this.setState({activeCardId: activeCardId}); //Re-render - getToggleClass will be be triggered again\n    }\n\n\n    render() {\n        const messages = this.props.records;\n        const messageCards = messages.map((message) => \n            \n                                        <Card key={message.id}>\n                                            <Accordion.Toggle as={Card.Header} eventKey={message.id} className={this.getToggleClass(message)} onClick={(e)=>{this.handleAccordionToggle(message)}}>\n                                                {message.get(\"title\")}{Accordion.Toggle.eventKey}\n                                                <i className={\"fas fa-\" + this.getPriorityIcon(message.get(\"priority\")) + \"-circle float-right\"}></i>\n                                            </Accordion.Toggle>\n                                            <Accordion.Collapse eventKey={message.id}>\n                                                <Card.Body>\n                                                    <Row>\n                                                        <Col className=\"message-box\" lg={6}>\n                                                            <Row className=\"h-100\">\n                                                                <Col lg={4}>\n                                                                    <Card.Img className=\"thumbnail\" src={this.getCardImage(message.get(\"image\"))}/>\n                                                                </Col>\n                                                                <Col lg={8}>                    \n                                                                    <Card.Text>\n                                                                        <li className=\"list-group-item\"><span className=\"font-weight-bold\">Details: </span>{message.get(\"details\")}</li>\n                                                                        <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Priority: </span>{this.getPriorityString(message.get(\"priority\"))}</li>\n                                                                    </Card.Text>\n                                                                </Col>\n                                                            </Row>\n                                                        </Col>\n                                                        <Col lg={4}>\n                                                            <Row>\n                                                                <Col>\n                                                                    <Comments addComment={this.addCommentHanlder} parentId={message.id}/>\n                                                                    {/* {this.getMessageComments(message)} */}\n                                                                </Col>\n                                                            </Row>\n                                                        </Col>\n                                                        <Col lg={2} className=\"p-0 d-flex align-items-end justify-content-end pt-3\">\n                                                            <Row className=\"w-100 mx-0 text-center\">\n                                                                <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n                                                                    <Button variant=\"outline-dark\" className=\"m-0 responsive-btn\" onClick={(e)=>{this.handleUpdateClick(e, message)}}>Update</Button>\n                                                                </Col>\n                                                                <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n                                                                    <Button variant=\"danger\" className=\"m-0 responsive-btn\" onClick={(e)=>{this.handleDeleteClick(message)}}>Delete</Button>\n                                                                </Col>\n                                                            </Row>\n                                                        </Col>\n                                                    </Row>                                                           \n                                                </Card.Body>\n                                            </Accordion.Collapse>\n                                        </Card>     \n                                    );\n\n        return (\n           <div className=\"MessagesAccordion\">\n               <Accordion>\n                   {messageCards}\n                </Accordion>\n            </div>\n            );\n        }\n\n    //     return (\n    //        <div className=\"MessagesAccordion\">\n    //            <Accordion>\n    //                 <Card>\n    //                     <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\n    //                     Dynamic Message Title With Dynamic Icon 2\n    //                     <i className=\"fas fa-exclamation-circle float-right\"></i>\n    //                     </Accordion.Toggle>\n    //                     <Accordion.Collapse eventKey=\"0\">\n    //                         <Card.Body>\n    //                             <Row>\n    //                                 <Col className=\"Message-box\" lg={6}>\n    //                                     <Row>\n    //                                         <Col lg={4}>\n    //                                             <Card.Img src=\"https://upload.wikimedia.org/wikipedia/commons/9/92/Backyardpool.jpg\"/>\n    //                                         </Col>\n    //                                         <Col lg={8}>                    \n    //                                             <Card.Text>\n    //                                                 <li className=\"list-group-item\"><span className=\"font-weight-bold\">Details: </span>**Dynamic Content for message details**</li>\n    //                                                 <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Priority: </span>**Dynamic Content for message priority**</li>\n    //                                             </Card.Text>\n    //                                         </Col>\n    //                                     </Row>\n    //                                 </Col>\n    //                                 <Col lg={4}>\n    //                                     <Row>\n    //                                         <Col>\n    //                                            <Comments />\n    //                                         </Col>\n    //                                     </Row>\n    //                                 </Col>\n    //                                 <Col lg={2} className=\"p-0 d-flex align-items-end justify-content-end pt-3\">\n    //                                     <Row className=\"w-100 mx-0 text-center\">\n    //                                         <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n    //                                             <Button variant=\"outline-dark\" className=\"m-0 responsive-btn\">Update</Button>\n    //                                         </Col>\n    //                                         <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n    //                                             <Button variant=\"danger\" className=\"m-0 responsive-btn\">Delete</Button>\n    //                                         </Col>\n    //                                     </Row>\n    //                                 </Col>\n    //                             </Row>                                            \n    //                         </Card.Body>\n    //                     </Accordion.Collapse>\n    //                 </Card>     \n    //             </Accordion>\n    //        </div>\n    //     );\n    // }\n}\n\nexport default MessagesAccordion;","import React from 'react'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n// import Form from 'react-bootstrap/Form'\n// import Button from 'react-bootstrap/Button'\n\nclass DashboardNewMessagesAccordion extends React.Component {\n   \n    render() {\n        return (\n           <div className=\"DashboardNewMessagesAccordion\">\n               <Accordion>\n                    <Card>\n                        <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\n                        Dynamic Message Title With Dynamic Icon\n                        <i className=\"fas fa-info-circle float-right\"></i>\n                        </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"0\">\n                            <Card.Body>\n                                <Row>\n                                    <Col>\n                                        <Row>\n                                            <Col lg={4}>\n                                                <Card.Img src=\"https://upload.wikimedia.org/wikipedia/commons/9/92/Backyardpool.jpg\"/>\n                                            </Col>\n                                            <Col lg={8}>                    \n                                                <Card.Text>\n                                                    <li className=\"list-group-item\"><span className=\"font-weight-bold\">Details: </span>**Dynamic Content for message details**</li>\n                                                    <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Priority: </span>**Dynamic Content for message details**</li>\n                                                </Card.Text>\n                                            </Col>\n                                        </Row>\n                                    </Col>\n                                </Row>\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </Card>                     \n                    <Card>\n                        <Accordion.Toggle as={Card.Header} eventKey=\"1\" className=\"font-weight-bold\">\n                        Dynamic Message Title With Dynamic Icon 2\n                        <i className=\"fas fa-exclamation-circle float-right\"></i>\n                        </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"1\">\n                            <Card.Body>\n                                <Row>\n                                    <Col>\n                                        <Row>\n                                        <Col lg={4}>\n                                                <Card.Img src=\"https://upload.wikimedia.org/wikipedia/commons/9/92/Backyardpool.jpg\"/>\n                                        </Col>\n                                        <Col lg={8}>                    \n                                            <Card.Text>\n                                                <li className=\"list-group-item\"><span className=\"font-weight-bold\">Details: </span>**Dynamic Content for message details**</li>\n                                                <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Priority: </span>**Dynamic Content for message details**</li>\n                                            </Card.Text>\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Row>                             \n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>     \n            </Accordion>\n        </div>\n        );\n    }\n}\n\nexport default DashboardNewMessagesAccordion;","import React from 'react'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport PieChart from 'react-minimal-pie-chart'\nimport DatePicker from \"react-datepicker\"\nimport 'react-datepicker/dist/react-datepicker.css'\n\n\nclass VotingsAccordion extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    // }    \n\n    render() {\n        const votingAccordion = (\n            <Accordion>\n                    <Card>\n                        <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\n                        <Row>\n                            <Col lg={6} className=\"mobile-center\">Dynamic Voting Title</Col>\n                            <Col lg={6} className=\"text-right mobile-center\">{this.props.votingStatus === \"results\"? <h6>Result: <span className=\"font-weight-normal\">Dynamic record result</span></h6>: null}</Col>\n                        </Row>\n                        {/* {this.props.votingStatus === \"results\"? } */}\n\n                        </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"0\">\n                            <Card.Body>\n                                <Row className=\"mx-0\">\n                                    <Col lg={this.props.votingStatus === \"results\"? 5 : 8} className=\"px-0 d-flex flex-column justify-content-between\">                    \n                                        <Row className=\"py-1 mx-0 mobile-center\">\n                                                <h6 className=\"mr-1\">Details:</h6> <span>*Dynamic Voting Details*</span>\n                                        </Row>\n                                        <Row className=\"py-1 mx-0 mobile-center\">\n                                            <Col className=\"px-0 d-flex align-items-center\">\n                                                <h6 className=\"mr-1\">{this.props.votingStatus === \"active\"? 'End Date': 'Ended'}:</h6> <span>*Date &amp; Hour*</span>\n                                            </Col>\n                                            {this.props.votingStatus === \"results\"? null:\n                                                \n                                            <Col className={this.props.userType === \"tenant\"? \"hide\" : \"px-0\"}>\n                                                <DatePicker placeholderText=\"Update End Date\" withPortal showTimeSelect\n                                                timeFormat=\"HH:mm\"\n                                                timeIntervals={30}\n                                                timeCaption=\"time\"\n                                                dateFormat=\"MMMM d, hh:mm\"/>\n                                            </Col>\n                                            }\n                                        </Row>\n                                        <Row className={this.props.votingStatus === \"results\" || this.props.userType === \"admin\" ? \"hide\" : \"py-1 mx-0 mobile-center\"}>\n                                             <Col className=\"px-0 d-flex align-items-center\">\n                                                <Form.Group as={Row} controlId=\"formPrioritySelect\" className=\"vote-form mx-0 mobile-center w-100\">\n                                                        <Form.Label column lg={3}>\n                                                            Your Vote:\n                                                        </Form.Label>\n                                                        <Col lg={5}>\n                                                            <Form.Control required as=\"select\" className=\"priority-select\">\n                                                                <option value=\"In Favor\">In Favor</option>\n                                                                <option value=\"Against\">Against</option>\n                                                            </Form.Control>\n                                                        </Col>\n                                                        <Col lg={4} className=\"text-right mobile-center\">\n                                                            <Button type=\"submit\">Submit Vote</Button>\n                                                        </Col>\n                                                    </Form.Group>\n                                            </Col>\n                                        </Row>\n                                    </Col>\n                                    <Col lg={this.props.votingStatus === \"results\"? 7 : 4}>\n                                        <Row>\n\n                                        {this.props.votingStatus === \"results\"? \n                                            <Col lg={6} className=\"py-4-mobile\">\n                                                <h6 className=\"text-center mb-3\">Results</h6>\n                                                <PieChart className=\"chart\"\n                                                    data={[\n                                                        { title: 'For', value: 80, color: '#90ee90' },\n                                                        { title: 'Against', value: 20, color: '#a2012c' },\n                                                    ]}\n                                                    />\n                                            </Col>\n                                            :null}\n                                            <Col>\n                                                <h6 className=\"text-center mb-3\">Voting Precentage</h6>\n                                                <PieChart className=\"chart\"\n                                                    data={[\n                                                        { title: 'For', value: 10, color: '#90ee90' },\n                                                        { title: 'Against', value: 15, color: '#a2012c' },\n                                                    ]}\n                                                    />\n                                            </Col>    \n                                        </Row>                                           \n                                    </Col>\n                                </Row>\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </Card>\n                </Accordion>\n        );\n\n        return (\n           <div className=\"VotingsAccordion\">\n               {votingAccordion}\n           </div>\n        );\n    }\n}\n\nexport default VotingsAccordion;","import React from 'react'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport 'react-datepicker/dist/react-datepicker.css'\n\n\nclass PendingVotingsAccordion extends React.Component {\n    \n    render() {\n        const votingAccordion = (\n            <Accordion>\n                    <Card>\n                        <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\n                        <Row>\n                            <Col>Dynamic Voting Title</Col>\n                        </Row>\n                        {/* {this.props.votingStatus === \"results\"? } */}\n\n                        </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"0\">\n                            <Card.Body>\n                                <Row className=\"py-1 mx-0 mobile-center\">\n                                        <Col lg={12} className=\"px-0 d-flex align-items-center\">\n                                            <Form.Group as={Row} controlId=\"formPrioritySelect\" className=\"vote-form mx-0 mobile-center w-100\">\n                                                    <Form.Label column lg={2}>\n                                                        Your Vote:\n                                                    </Form.Label>\n                                                    <Col lg={5}>\n                                                        <Form.Control required as=\"select\" className=\"priority-select\">\n                                                            <option value=\"In Favor\">In Favor</option>\n                                                            <option value=\"Against\">Against</option>\n                                                        </Form.Control>\n                                                    </Col>\n                                                    <Col lg={5} className=\"mobile-center text-left\">\n                                                        <Button type=\"submit\" className=\"ml-2 responsive-btn\">Submit Vote</Button>\n                                                    </Col>\n                                                </Form.Group>\n                                        </Col>\n                                </Row>\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </Card>\n                </Accordion>\n        );\n\n        return (\n           <div className=\"PendingVotingsAccordion\">\n               {votingAccordion}\n           </div>\n        );\n    }\n}\n\nexport default PendingVotingsAccordion;","import React from 'react'\n// import PaginationNav from '../components/PaginationNav';\nimport IssuesAccordion from '../components/IssuesAccordion';\nimport DashboardIssuesAccordion from '../components/DashboardIssuesAccordion';\nimport TenantsAccordion from '../components/TenantsAccordion';\nimport MessagesAccordion from '../components/MessagesAccordion';\nimport DashboardNewMessagesAccordion from '../components/DashboardNewMessagesAccordion';\nimport VotingsAccordion from '../components/VotingsAccordion';\nimport PendingVotingsAccordion from '../components/PendingVotingsAccordion';\n\n\nclass Records extends React.Component {\n    \n    render () {\n        // console.log(\"rendering records \" + this.props.records);\n        const accordion = (\n                    <div>\n                        {\n                            (() => {\n                            switch(this.props.recordType) {\n                                case 'issues':\n                                return <IssuesAccordion records={this.props.records} openModal={this.props.openModal} deleteIssue={this.props.deleteIssue}/>;\n                                case 'new issues':\n                                return <DashboardIssuesAccordion />;\n                                case 'overdue issues':\n                                return <DashboardIssuesAccordion />;\n                                case 'new resolved issues':\n                                return <DashboardIssuesAccordion />;\n                                case 'tenants':\n                                return <TenantsAccordion />;\n                                case 'messages':\n                                return <MessagesAccordion records={this.props.records} openModal={this.props.openModal} deleteMessage={this.props.deleteMessage} />;\n                                case 'new messages':\n                                return <DashboardNewMessagesAccordion />;\n                                case 'active votings':\n                                return <VotingsAccordion votingStatus=\"active\" userType=\"tenant\"/>;\n                                case 'pending votings':\n                                return <PendingVotingsAccordion />;\n                                case 'voting results':\n                                return <VotingsAccordion votingStatus=\"results\"/>;\n                                default:\n                                return null;\n                            }\n                            })()\n                        }\n                  </div>\n            \n        );\n\n        return (\n            //Add a switch for different record types / module name this.props.recordType == \"new issues\" etc \n            <div className=\"Records\">\n                {accordion}\n            </div>\n        );     \n    }\n}\n\nclass NoRecords extends React.Component {\n   \n    render() {\n\n        return (\n            <p className=\"noRecordsMsg\">There are no {this.props.recordType}. :)</p>\n        );\n    }\n}\nclass RecordsDisplay extends React.Component {\n  \n    render() {\n        // console.log(\"rendering RecordsDisplay \" + this.props.records);\n        return (\n            this.props.hasRecords? \n                <div className=\"recordsDisplay\">\n                    <Records recordType={this.props.recordType} records={this.props.records} openModal={this.props.openModal} deleteIssue={this.props.deleteIssue} deleteMessage={this.props.deleteMessage}/>\n                    {/* <PaginationNav />  */}\n                    {/* which class should manage the activePage and totalItemsCount? */}\n                    {/* <PaginationNav activePage={this.state.activePage} totalItemsCount={this.state.totalItemsCount}/> */}\n                </div>\n            : <NoRecords recordType={this.props.recordType}/>\n        );\n    }\n}\n\nexport default RecordsDisplay;","import React from 'react';\nimport MessageDB from '../components/MessageDB';\nimport ImageHandler from '../components/ImageHandler'\nimport InnerNavbar from '../components/InnerNavbar'\nimport RecordsDisplay from '../components/RecordsDisplay'\nimport { Container, Row, Col, Button, Modal, Form, Image } from 'react-bootstrap'\nimport Alert from 'react-bootstrap/Alert'\n\n\n\nclass Messages extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        messages: null, //Get from Parse DB\n        hasRecords: null,\n        filter: {\n            inputFilter:\"\",\n            selectFilter:\"123\"\n        },\n        filteredMessages: null, \n        showModal: false,\n        currentMessageId: null,\n        currentMessageTitle: null,\n        currentMessageDetails: null,\n        currentMessagePriority: null,\n        currentMessageImage: null,\n        modalTrigger: null,\n        showStatusSelect: \"hide\",\n        validated: false,\n        messageError: false,\n        errorMsg:\"\",\n        sortByPriority: false\n      }\n\n      this.onGetAllMessagesSuccess = this.onGetAllMessagesSuccess.bind(this);\n      this.onGetAllMessagesError = this.onGetAllMessagesError.bind(this);\n      this.filterMessages = this.filterMessages.bind(this);\n      this.onCreateMessageSuccess = this.onCreateMessageSuccess.bind(this);\n      this.onCreateMessageError = this.onCreateMessageError.bind(this);\n      this.onImageUploadSuccess = this.onImageUploadSuccess.bind(this);\n      this.onImageUploadError = this.onImageUploadError.bind(this);\n      this.onImageUploadProgress = this.onImageUploadProgress.bind(this);\n      this.openModal = this.openModal.bind(this);\n      this.closeModal = this.closeModal.bind(this);\n      this.createMessage = this.createMessage.bind(this);\n      this.updateMessage = this.updateMessage.bind(this);\n      this.onDeleteMessageError = this.onDeleteMessageError.bind(this);\n      this.onDeleteMessageSuccess = this.onDeleteMessageSuccess.bind(this);\n      this.deleteMessage = this.deleteMessage.bind(this);\n      this.imgChange = this.imgChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n      this.handleFilterChange = this.handleFilterChange.bind(this);\n      this.handleSortChange = this.handleSortChange.bind(this);\n\n      this.titleInput = React.createRef();\n      this.detailsInput = React.createRef();\n      this.priorityInput = React.createRef();\n      this.imgInput = React.createRef();\n    }\n    \n    componentDidMount(){\n        MessageDB.GetAllMessages(this.state.sortByPriority, this.onGetAllMessagesSuccess, this.onGetAllMessagesError);\n    }\n\n    checkCurrentMessage(filter, currentMessageTitle, currentMessageDetails, currentMessagePriority) { //Check if current message matches filter\n        if (\n                // filter by select\n                (filter.selectFilter.indexOf(currentMessagePriority) > -1) && \n\n                //Filter by Input\n                (\n                    //Input filter is not empty\n                    ((filter.inputFilter !== \"\") && (currentMessageTitle.indexOf(filter.inputFilter) > -1 || currentMessageDetails.indexOf(filter.inputFilter) > -1)) ||\n                    //Input Filter is empty so accept any\n                    (filter.inputFilter === \"\")\n                )\n            ) \n        { return true; }\n        \n        else\n        { return false; }\n    }\n\n    filterMessages(filter, originalMessages, filteredMessages) {\n        // Loop through all messages keys, and add those who match the search query to matches array\n        for (var i = 0; i < originalMessages.length; i++) {\n                var currentMessageTitle = originalMessages[i].get(\"title\").toUpperCase();\n                var currentMessageDetails = originalMessages[i].get(\"details\").toUpperCase();\n                var currentMessagePriority = originalMessages[i].get(\"priority\").toUpperCase();\n\n                if (this.checkCurrentMessage(filter, currentMessageTitle, currentMessageDetails, currentMessagePriority)) {\n                    filteredMessages.push(originalMessages[i]);\n                }\n\n         }\n    }\n\n    handleFilterChange(e) {\n        var input;\n        input = e.target;\n        var inputFilter = this.state.filter.inputFilter;\n        var selectFilter = this.state.filter.selectFilter;\n        var filteredMessages = [];\n\n        if(input.tagName === \"INPUT\") {\n            inputFilter = input.value.toUpperCase();\n        }\n        else if (input.tagName === \"SELECT\") {\n            selectFilter = input.value;\n        }\n\n        const newFilter = {\n            inputFilter: inputFilter,\n            selectFilter:selectFilter\n        }\n\n        this.setState({\n            filter:newFilter\n        });  \n\n\n            this.filterMessages(newFilter, this.state.messages, filteredMessages);\n\n        this.setState({filteredMessages:filteredMessages});\n      }\n\n\n\n    handleSortChange(sortByPriority) {\n        this.setState({sortByPriority: sortByPriority});\n        MessageDB.GetAllMessages(sortByPriority, this.onGetAllMessagesSuccess, this.onGetAllMessagesError);\n\n    }\n\n\n    onImageUploadSuccess(imageId) {\n        let currentMessageImage = imageId;\n        this.setState({currentMessageImage: currentMessageImage})\n    }\n\n    onImageUploadError(error) {\n    }\n\n    onImageUploadProgress(progress) {\n        if (progress < 100) {\n            document.getElementById(\"image_progress\").innerHTML = \"Image Uploading: \" + progress + \"%\";\n        } else {\n            document.getElementById(\"image_progress\").innerHTML = \"Image Uploaded Successfully\";\n\n        }\n    }\n    imgChange(ev) {\n\n        let newMessageImg = {};\n        newMessageImg.file = ev.target.files[0];\n        if (newMessageImg.file) {\n            ImageHandler.UploadImage(newMessageImg.file, this.onImageUploadProgress, this.onImageUploadSuccess, this.onImageUploadError);\n\n        } else {\n            newMessageImg.URL = \"\";\n        }\n\n    }\n    \n    handleSubmit(e) {\n        const form = e.target;\n        this.setState({validated:true});\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (form.checkValidity() === true) {\n            if(this.state.modalTrigger === \"New Message\"){\n                this.createMessage();\n            }\n            else {\n                this.updateMessage();\n            }\n        }\n      }\n\n\n    openModal(e, message) {\n        let modalTrigger = e.target.innerHTML;\n        let showStatusSelect;\n        let currentMessageId;\n        let currentMessageTitle = \"\";\n        let currentMessageDetails = \"\";\n        let currentMessagePriority = \"\";\n        // let currentMessageStatus = \"\";\n        let currentMessageImage = \"\";\n\n        if(modalTrigger === \"Update\") {\n            modalTrigger = \"Update Message\";\n            showStatusSelect = \"show\";\n            currentMessageTitle = message.get(\"title\");\n            currentMessageDetails = message.get(\"details\");\n            currentMessagePriority = message.get(\"priority\");\n            // currentMessageStatus = message.get(\"status\");\n            currentMessageImage = message.get(\"image\");\n            currentMessageId = message.id;\n        }\n        else {\n            showStatusSelect = \"hide\";\n        }\n        this.setState({ showModal: true, showStatusSelect: showStatusSelect, modalTrigger: modalTrigger, currentMessageId: currentMessageId, currentMessageTitle: currentMessageTitle, currentMessageDetails:currentMessageDetails, currentMessagePriority: currentMessagePriority, currentMessageImage: currentMessageImage})\n    }\n\n    closeModal() {\n        this.setState({ currentMessageId: null, currentMessageImage:null, showModal: false, validated: false, messageError: false })\n    }\n\n    onCreateMessageSuccess(messageId, message) {\n        MessageDB.GetAllMessages(this.state.sortByPriority, this.onGetAllMessagesSuccess, this.onGetAllMessagesError);\n    }\n\n    onCreateMessageError(error) {\n        \n    }\n    \n    createMessage() {\n         const newMessage = MessageDB.GetMessage();\n         newMessage.set('title', this.titleInput.current.value);\n         newMessage.set('details', this.detailsInput.current.value);\n         newMessage.set('priority', this.priorityInput.current.value);\n        //  newMessage.set('status', this.statusInput.current.value);\n         newMessage.set('image', this.state.currentMessageImage);\n\n        MessageDB.CreateMessage(newMessage, this.onCreateMessageSuccess, this.onCreateMessageError)\n\n        this.closeModal();\n    }\n\n    updateMessage() {\n        const newMessage = MessageDB.GetMessage();\n        newMessage.set('title', this.titleInput.current.value);\n        newMessage.set('details', this.detailsInput.current.value);\n        newMessage.set('priority', this.priorityInput.current.value);\n        // newMessage.set('status', this.statusInput.current.value);\n        newMessage.set('image', this.state.currentMessageImage);\n\n        MessageDB.UpdateMessage(this.state.currentMessageId, newMessage, this.onCreateMessageSuccess, this.onCreateMessageError)\n        this.closeModal();\n   }\n\n   onDeleteMessageSuccess(messageId, message) {\n    MessageDB.GetAllMessages(this.state.sortByPriority, this.onGetAllMessagesSuccess, this.onGetAllMessagesError);\n    }\n\n    onDeleteMessageError(error) {\n        \n    }\n\n\n   deleteMessage(message) {\n    MessageDB.DeleteMessage(message.id, this.onDeleteMessageSuccess, this.onDeleteMessageError)\n    this.closeModal();\n}\n\n\n    onGetAllMessagesSuccess(messages) {\n        var filteredMessages = []\n        var hasRecords = false;\n        if (messages.length > 0) {\n            hasRecords = true;\n        }\n        \n        if(this.state.filter !== null) {\n            this.filterMessages(this.state.filter, messages, filteredMessages);\n        }\n\n        this.setState({messages:messages, filteredMessages:filteredMessages, hasRecords:hasRecords});\n    }\n\n    onGetAllMessagesError(error) {\n    }\n  \n    render() {\n        let recordsDisplay = null;\n        if (this.state.messages == null) {\n            //loading\n            recordsDisplay = \"Loading...\";\n        }\n        else {\n            recordsDisplay = <RecordsDisplay hasRecords={this.state.hasRecords} recordType=\"messages\" records={this.state.filteredMessages} openModal={this.openModal} deleteMessage={this.deleteMessage}/> ;\n        }\n\n        const { showModal, currentMessageImage } = this.state;\n        const currentMessageImageUrl = (currentMessageImage === \"\"? \"./images/placeholder-square.jpg\" : ImageHandler.GetImageUrl(currentMessageImage));\n        const modalAction = (\n            this.state.modalTrigger === \"New Message\" ?  <Button variant=\"primary\" type=\"submit\">Create Message</Button>\n                                                    :  <Button variant=\"primary\" type=\"submit\">Update Message</Button>\n        );\n\n      \n      return (\n                <div className=\"Messages h-100\">\n                    {/* <Navigation isLoggedIn={this.props.isLoggedIn} pageName=\"Messages\"/> */}\n\n                    <Container className=\"py-6 px-5 mobile-padding\">\n                        <InnerNavbar filterType=\"messages\" handleFilterChange={this.handleFilterChange} handleSortChange={this.handleSortChange}/>\n                        <div className=\"text-right pt-4 pb-1 mobile-center\">\n                            <Button variant=\"link\" className=\"new-btn\" onClick={this.openModal}>New Message</Button>\n                        </div>\n                        {recordsDisplay}\n                    </Container>\n                    <Modal show={showModal} onHide={this.closeModal} size=\"lg\">\n                    <Form className=\"messageModalFrm\" noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n\n                        <Modal.Header closeButton>\n                            <Modal.Title>{this.state.modalTrigger}</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <Alert variant=\"danger\" show={this.state.messageError}>\n                                {this.state.errorMsg}\n                            </Alert>\n                                <Form.Group as={Row} controlId=\"formNameTxt\">\n                                    <Form.Label column sm={2}>\n                                        Title:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control type=\"text\" ref={this.titleInput} defaultValue={this.state.currentMessageTitle} pattern=\"([a-zA-Z0-9]{1,20}\\s?){1,10}\" required/>\n                                        <Form.Control.Feedback type=\"invalid\">\n                                        </Form.Control.Feedback>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formDetailsTxt\">\n                                    <Form.Label column sm={2}>\n                                        Details:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control ref={this.detailsInput} defaultValue={this.state.currentMessageDetails} as=\"textarea\" rows=\"3\"/>\n                                        <Form.Control.Feedback type=\"invalid\">\n                                        </Form.Control.Feedback>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formPrioritySelect\">\n                                    <Form.Label column sm={2}>\n                                        Priority:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control ref={this.priorityInput} defaultValue={this.state.currentMessagePriority} as=\"select\" className=\"priority-select\" required>\n                                            <option value=\"1\">Information</option>\n                                            <option value=\"2\">Important</option>\n                                        </Form.Control>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formImgControl\" className=\"align-items-center\">\n                                    <Form.Label column sm={2}>\n                                        Image URL:\n                                    </Form.Label>\n                                    <Col sm={7}>\n                                        <div className=\"custom-file\">\n                                            <input ref={this.imgInput} type=\"file\" className=\"custom-file-input\" id=\"customFile\" accept=\"image/*\" onChange={this.imgChange}/>\n                                            <p id=\"image_progress\"></p>\n                                            <label className=\"custom-file-label\" htmlFor=\"customFile\">Choose image</label>\n                                        </div>\n                                    </Col>\n                                    <Col sm={3}>\n                                        <Image src={currentMessageImageUrl} fluid className=\"thumbnail\"/>\n                                    </Col>\n                                </Form.Group>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button variant=\"secondary\" onClick={this.closeModal}>\n                                Close\n                            </Button>\n                            {modalAction}\n                        </Modal.Footer>\n                        </Form>\n                    </Modal>\n            </div>\n        );\n\n    }\n  }   \n\n\nexport default Messages;\n","import React from 'react';\n//import Nav from 'react-bootstrap/Nav'\n//import Navbar from 'react-bootstrap/Navbar'\n//import Jumbotron from 'react-bootstrap/Jumbotron'\n//import Button from 'react-bootstrap/Button'\n// import TenantsNavbar from '../components/TenantsNavbar'\nimport InnerNavbar from '../components/InnerNavbar'\n\n// import Navigation from '../components/Navigation'\nimport RecordsDisplay from '../components/RecordsDisplay'\nimport Container from 'react-bootstrap/Container'\n//import { Container, Row, Col, Button, Modal, Form, Image } from 'react-bootstrap'\n// import PaginationNav from '../components/PaginationNav';\nimport Button from 'react-bootstrap/Button'\n\n\n//import Modal from 'react-bootstrap/Modal'\n//import Form from 'react-bootstrap/Form'\n//import Row from 'react-bootstrap/Row'\n//import Col from 'react-bootstrap/Col'\n\nclass Tenants extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        activePage: 1,\n        totalItemsCount: 100 // This will come from the relevant page: messages\\votings etc, where the total number of records will be stored in the page's state.\n      }; //what happens when it's 50 records divided by 10 per page?\n      this.handlePageChange = this.handlePageChange.bind(this);\n    }\n    \n    handlePageChange(e) {\n      let val = parseInt(e.target.innerHTML);\n      let pageNumber = this.state.activePage;\n  \n      if (isNaN(val)) {\n        console.log('Not a number ' + val);\n        val = e.target.innerText;\n        if (val.includes(\"‹\")) {\n          console.log(\"Previous\");\n          pageNumber--;\n        }\n        else if (val.includes(\"›\")) {\n          console.log(\"Next\");\n          pageNumber++;\n        }\n        \n      }\n      else {\n        console.log('number ' + val);\n        pageNumber =  val;\n      }\n      console.log('active page is ' + pageNumber);\n      //this.state.activePage = pageNumber;\n      console.log(this.state.activePage);\n      //this.setState(this.state);\n      this.setState({activePage:pageNumber});\n      console.log(this.state.activePage);\n    }\n  \n    render() {\n\n        \n      \n      return (\n        <div className=\"Tenants h-100\">\n           {/* <Navigation isLoggedIn={this.props.isLoggedIn} pageName=\"Tenants\"/> */}\n\n            {/* {votingAccordion}   */}\n            \n            <Container className=\"py-6 px-5 mobile-padding\">\n                {/* <TenantsNavbar /> */}\n                <InnerNavbar filterType=\"tenants\" handleFilterChange={this.handleFilterChange}/>\n\n                <div className=\"text-right pt-4 pb-1 mobile-center\">\n                    <Button variant=\"link\" className=\"new-btn\">New Tenant</Button>\n                </div>\n                <RecordsDisplay hasRecords={true} recordType=\"tenants\" /> \n            </Container>\n\n            {/* All tenants will have a default password of 1-6 */}\n            \n            {/* <Modal show=\"true\" size=\"lg\">\n                <Modal.Header closeButton>\n                    <Modal.Title>New Tenant</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form className=\"tenantModalFrm\">\n                        <Form.Group as={Row} controlId=\"formNameTxt\">\n                            <Form.Label column sm={2}>\n                                Name:\n                            </Form.Label>\n                            <Col sm={10}>\n                                <Form.Control type=\"text\" placeholder=\"Enter tenant's name\" />\n                            </Col>\n                        </Form.Group>\n\n                        <Form.Group as={Row} controlId=\"formEmailTxt\">\n                            <Form.Label column sm={2}>\n                                Email:\n                            </Form.Label>\n                            <Col sm={10}>\n                                <Form.Control type=\"email\" placeholder=\"Enter tenant's email\" />\n                            </Col>\n                        </Form.Group>\n\n                        <Form.Group as={Row} controlId=\"formAptTxt\">\n                            <Form.Label column sm={2}>\n                                Appartment:\n                            </Form.Label>\n                            <Col sm={10}>\n                                <Form.Control type=\"text\" placeholder=\"Enter tenant's appartment\" />\n                            </Col>\n                        </Form.Group>\n\n\n                        <Form.Group as={Row} controlId=\"formImgControl\" className=\"align-items-center\">\n                            <Form.Label column sm={2}>\n                                Image URL:\n                            </Form.Label>\n                            <Col sm={7}>\n                                <div className=\"custom-file\">\n                                    <input type=\"file\" className=\"custom-file-input\" id=\"customFile\" />\n                                    <label className=\"custom-file-label\" htmlFor=\"customFile\">Choose image</label>\n                                </div>\n                            </Col>\n                            <Col sm={3}>\n                                <Image src=\"https://interactive-examples.mdn.mozilla.net/media/examples/grapefruit-slice-332-332.jpg\" fluid/>\n                            </Col>\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\">\n                        Close\n                    </Button>\n                    <Button variant=\"primary\">\n                        Create\n                    </Button>\n                </Modal.Footer>\n            </Modal> */}\n        </div>\n        );\n\n    }\n  }   \n\nexport default Tenants;\n","import React from 'react';\n//import Nav from 'react-bootstrap/Nav'\n//import Navbar from 'react-bootstrap/Navbar'\n//import Jumbotron from 'react-bootstrap/Jumbotron'\nimport Button from 'react-bootstrap/Button'\n// import VotingsNavbar from '../components/VotingsNav'\nimport InnerNavbar from '../components/InnerNavbar'\n\nimport RecordsDisplay from '../components/RecordsDisplay'\nimport { Container, Row, Col} from 'react-bootstrap'\n// import Navigation from '../components/Navigation';\n// import Modal from 'react-bootstrap/Modal'\n// import Form from 'react-bootstrap/Form'\n// import InputGroup from 'react-bootstrap/InputGroup'\n// import FormControl from 'react-bootstrap/FormControl'\n\nclass Votings extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        activePage: 1,\n        totalItemsCount: 14 // This will come from the relevant page: Votings\\votings etc, where the total number of records will be stored in the page's state.\n      };\n      this.handlePageChange = this.handlePageChange.bind(this);\n    }\n    \n    handlePageChange(e) {\n      let val = parseInt(e.target.innerHTML);\n      let pageNumber = this.state.activePage;\n  \n      if (isNaN(val)) {\n        console.log('Not a number ' + val);\n        val = e.target.innerText;\n        if (val.includes(\"‹\")) {\n          console.log(\"Previous\");\n          pageNumber--;\n        }\n        else if (val.includes(\"›\")) {\n          console.log(\"Next\");\n          pageNumber++;\n        }\n        \n      }\n      else {\n        console.log('number ' + val);\n        pageNumber =  val;\n      }\n      console.log('active page is ' + pageNumber);\n      //this.state.activePage = pageNumber;\n      console.log(this.state.activePage);\n      //this.setState(this.state);\n      this.setState({activePage:pageNumber});\n      console.log(this.state.activePage);\n    }\n  \n    render() {\n      \n            return (\n                    <div className=\"Votings h-100\">\n                        {/* <Navigation isLoggedIn={this.props.isLoggedIn} pageName=\"Votings\"/> */}\n\n                        <Container fluid className=\"py-6 px-5 mobile-padding\">\n                            <Row>\n                                <Col lg={6} className=\"issue-box\">\n                                        <h2>Active Votings</h2>\n                                         <div className=\"text-right pt-4 pb-1 mobile-center\">\n                                            <Button variant=\"link\" className=\"new-btn\">New Voting</Button>\n                                        </div>\n                                    <RecordsDisplay hasRecords={true} recordType=\"active votings\" /> \n                                </Col>\n                                <Col lg={6}>\n                                    <h2>Voting Results</h2>\n                                    {/* <VotingsNavbar /> */}\n                                    <InnerNavbar filterType=\"voting\" handleFilterChange={this.handleFilterChange}/>\n\n                                    <RecordsDisplay hasRecords={true} recordType=\"voting results\" /> \n                                </Col>\n                            </Row>\n                        </Container>\n                        {/* <Modal show size=\"lg\">\n                        <Modal.Header closeButton>\n                            <Modal.Title>New Voting</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <Form className=\"VotingModalFrm\">\n                                <Form.Group as={Row} controlId=\"formNameTxt\">\n                                    <Form.Label column lg={2}>\n                                        Title:\n                                    </Form.Label>\n                                    <Col lg={10}>\n                                        <Form.Control required type=\"text\" placeholder=\"Voting title\" />\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formDetailsTxt\">\n                                    <Form.Label column lg={2}>\n                                        Details:\n                                    </Form.Label>\n                                    <Col lg={10}>\n                                        <Form.Control required type=\"text\" placeholder=\"Voting Details\" />\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formPrioritySelect\">\n                                    <Form.Label column lg={2}>\n                                        Options:\n                                    </Form.Label>\n                                    <Col lg={10}>\n                                        <Form.Control required type=\"text\" className=\"mb-2\"/>\n                                        <Form.Control required type=\"text\" />\n                                        <Button variant=\"link\" className=\"pl-0\">+ Add option</Button>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formImgControl\" className=\"align-items-center\">\n                                    <Form.Label column lg={2}>\n                                        End Date:\n                                    </Form.Label>\n                                    <Col lg={5}>\n                                        <Form.Control required type=\"datetime-local\" className=\"w-50\" />     \n                                    </Col>\n                                </Form.Group>\n                            </Form>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button variant=\"secondary\">\n                                Close\n                            </Button>\n                            <Button variant=\"primary\">\n                                Create\n                            </Button>\n                        </Modal.Footer>\n                    </Modal> */}\n                </div>\n                );\n    }\n}\n\nexport default Votings;\n","import React from 'react';\nimport IssueDB from '../components/IssueDB';\nimport ImageHandler from '../components/ImageHandler'\nimport InnerNavbar from '../components/InnerNavbar'\nimport RecordsDisplay from '../components/RecordsDisplay'\nimport { Container, Row, Col, Button, Modal, Form, Image } from 'react-bootstrap'\nimport Alert from 'react-bootstrap/Alert'\n\nclass Issues extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        issues: null, //Get from Parse DB\n        hasRecords: null,\n        filter: {\n            inputFilter:\"\",\n            selectFilter:\"123\"\n        },\n        filteredIssues: null, \n        // activeUserIssues: [],\n        // activePage: 1,\n        showModal: false,\n        currentIssueId: null,\n        currentIssueTitle: null,\n        currentIssueDetails: null,\n        currentIssuePriority: null,\n        currentIssueImage: null,\n        currentIssueStatus: null,\n        modalTrigger: null,\n        showStatusSelect: \"hide\",\n        //totalItemsCount: null, \n        validated: false,\n        issueError: false,\n        errorMsg:\"\",\n        sortByPriority: false\n    }\n      \n      this.onGetAllIssuesSuccess = this.onGetAllIssuesSuccess.bind(this);\n      this.onGetAllIssuesError = this.onGetAllIssuesError.bind(this);\n      this.filterIssues = this.filterIssues.bind(this);\n      this.onCreateIssueSuccess = this.onCreateIssueSuccess.bind(this);\n      this.onCreateIssueError = this.onCreateIssueError.bind(this);\n      this.onImageUploadSuccess = this.onImageUploadSuccess.bind(this);\n      this.onImageUploadError = this.onImageUploadError.bind(this);\n      this.onImageUploadProgress = this.onImageUploadProgress.bind(this);\n      this.openModal = this.openModal.bind(this);\n      this.closeModal = this.closeModal.bind(this);\n      this.createIssue = this.createIssue.bind(this);\n      this.updateIssue = this.updateIssue.bind(this);\n      this.onDeleteIssueError = this.onDeleteIssueError.bind(this);\n      this.onDeleteIssueSuccess = this.onDeleteIssueSuccess.bind(this);\n      this.deleteIssue = this.deleteIssue.bind(this);\n      this.imgChange = this.imgChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n      this.handleFilterChange = this.handleFilterChange.bind(this);\n      this.handleSortChange = this.handleSortChange.bind(this);\n\n      this.titleInput = React.createRef();\n      this.detailsInput = React.createRef();\n      this.priorityInput = React.createRef();\n      this.statusInput = React.createRef();\n      this.imgInput = React.createRef();\n\n    }\n\n    componentDidMount(){\n        IssueDB.GetAllIssues(this.state.sortByPriority, this.onGetAllIssuesSuccess, this.onGetAllIssuesError);\n    }\n\n    checkCurrentIssue(filter, currentIssueTitle, currentIssueDetails, currentIssuePriority) { //Check if current issue matches filter\n        if (\n                // filter by select\n                (filter.selectFilter.indexOf(currentIssuePriority) > -1) && \n\n                //Filter by Input\n                (\n                    //Input filter is not empty\n                    ((filter.inputFilter !== \"\") && (currentIssueTitle.indexOf(filter.inputFilter) > -1 || currentIssueDetails.indexOf(filter.inputFilter) > -1)) ||\n                    //Input Filter is empty so accept any\n                    (filter.inputFilter === \"\")\n                )\n            ) \n        { return true; }\n        \n        else\n        { return false; }\n    }\n\n    filterIssues(filter, originalIssues, filteredIssues) {\n        // Loop through all issues keys, and add those who match the search query to matches array\n        for (var i = 0; i < originalIssues.length; i++) {\n                var currentIssueTitle = originalIssues[i].get(\"title\").toUpperCase();\n                var currentIssueDetails = originalIssues[i].get(\"details\").toUpperCase();\n                var currentIssuePriority = originalIssues[i].get(\"priority\").toUpperCase();\n\n                if (this.checkCurrentIssue(filter, currentIssueTitle, currentIssueDetails, currentIssuePriority)) {\n                    filteredIssues.push(originalIssues[i]);\n                }\n\n         }\n    }\n\n    handleFilterChange(e) {\n        var input;\n        input = e.target;\n        var inputFilter = this.state.filter.inputFilter;\n        var selectFilter = this.state.filter.selectFilter;\n        var filteredIssues = [];\n\n        if(input.tagName === \"INPUT\") {\n            inputFilter = input.value.toUpperCase();\n        }\n        else if (input.tagName === \"SELECT\") {\n            selectFilter = input.value;\n        }\n\n        const newFilter = {\n            inputFilter: inputFilter,\n            selectFilter:selectFilter\n        }\n\n        this.setState({\n            filter:newFilter\n        });  \n\n\n            this.filterIssues(newFilter, this.state.issues, filteredIssues);\n\n        this.setState({filteredIssues:filteredIssues});\n      }\n\n\n\n    handleSortChange(sortByPriority) {\n        this.setState({sortByPriority: sortByPriority});\n        IssueDB.GetAllIssues(sortByPriority, this.onGetAllIssuesSuccess, this.onGetAllIssuesError);\n\n    }\n\n\n    onImageUploadSuccess(imageId) {\n        let currentIssueImage = imageId;\n        this.setState({currentIssueImage: currentIssueImage})\n    }\n\n    onImageUploadError(error) {\n    }\n\n    onImageUploadProgress(progress) {\n        if (progress < 100) {\n            document.getElementById(\"image_progress\").innerHTML = \"Image Uploading: \" + progress + \"%\";\n        } else {\n            document.getElementById(\"image_progress\").innerHTML = \"Image Uploaded Successfully\";\n\n        }\n    }\n    imgChange(ev) {\n\n        let newIssueImg = {};\n        newIssueImg.file = ev.target.files[0];\n        if (newIssueImg.file) {\n            ImageHandler.UploadImage(newIssueImg.file, this.onImageUploadProgress, this.onImageUploadSuccess, this.onImageUploadError);\n\n        } else {\n            newIssueImg.URL = \"\";\n        }\n\n    }\n    \n    handleSubmit(e) {\n        const form = e.target;\n        this.setState({validated:true});\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (form.checkValidity() === true) {\n            if(this.state.modalTrigger === \"New Issue\"){\n                this.createIssue();\n            }\n            else {\n                this.updateIssue();\n            }\n        }\n      }\n\n\n    openModal(e, issue) {\n        let modalTrigger = e.target.innerHTML;\n        let showStatusSelect;\n        let currentIssueId;\n        let currentIssueTitle = \"\";\n        let currentIssueDetails = \"\";\n        let currentIssuePriority = \"\";\n        let currentIssueStatus = \"\";\n        let currentIssueImage = \"\";\n\n        if(modalTrigger === \"Update\") {\n            modalTrigger = \"Update Issue\";\n            showStatusSelect = \"show\";\n            currentIssueTitle = issue.get(\"title\");\n            currentIssueDetails = issue.get(\"details\");\n            currentIssuePriority = issue.get(\"priority\");\n            currentIssueStatus = issue.get(\"status\");\n            currentIssueImage = issue.get(\"image\");\n            currentIssueId = issue.id;\n        }\n        else {\n            showStatusSelect = \"hide\";\n        }\n        this.setState({ showModal: true, showStatusSelect: showStatusSelect, modalTrigger: modalTrigger, currentIssueId: currentIssueId, currentIssueTitle: currentIssueTitle, currentIssueDetails:currentIssueDetails, currentIssuePriority: currentIssuePriority, currentIssueStatus: currentIssueStatus, currentIssueImage: currentIssueImage})\n    }\n\n    closeModal() {\n        this.setState({ currentIssueId: null, currentIssueImage:null, showModal: false, validated: false, issueError: false })\n    }\n\n    onCreateIssueSuccess(issueId, issue) {\n        IssueDB.GetAllIssues(this.state.sortByPriority, this.onGetAllIssuesSuccess, this.onGetAllIssuesError);\n    }\n\n    onCreateIssueError(error) {\n        \n    }\n    \n    createIssue() {\n         const newIssue = IssueDB.GetIssue();\n         newIssue.set('title', this.titleInput.current.value);\n         newIssue.set('details', this.detailsInput.current.value);\n         newIssue.set('priority', this.priorityInput.current.value);\n         newIssue.set('status', this.statusInput.current.value);\n         newIssue.set('image', this.state.currentIssueImage);\n\n        IssueDB.CreateIssue(newIssue, this.onCreateIssueSuccess, this.onCreateIssueError)\n\n        this.closeModal();\n    }\n\n    updateIssue() {\n        const newIssue = IssueDB.GetIssue();\n        newIssue.set('title', this.titleInput.current.value);\n        newIssue.set('details', this.detailsInput.current.value);\n        newIssue.set('priority', this.priorityInput.current.value);\n        newIssue.set('status', this.statusInput.current.value);\n        newIssue.set('image', this.state.currentIssueImage);\n\n        IssueDB.UpdateIssue(this.state.currentIssueId, newIssue, this.onCreateIssueSuccess, this.onCreateIssueError)\n        this.closeModal();\n   }\n\n   onDeleteIssueSuccess(issueId, issue) {\n    IssueDB.GetAllIssues(this.state.sortByPriority, this.onGetAllIssuesSuccess, this.onGetAllIssuesError);\n    }\n\n    onDeleteIssueError(error) {\n        \n    }\n\n\n   deleteIssue(issue) {\n    IssueDB.DeleteIssue(issue.id, this.onDeleteIssueSuccess, this.onDeleteIssueError)\n    this.closeModal();\n}\n\n\n    onGetAllIssuesSuccess(issues) {\n        var filteredIssues = []\n        var hasRecords = false;\n        if (issues.length > 0) {\n            hasRecords = true;\n        }\n        \n        if(this.state.filter !== null) {\n            this.filterIssues(this.state.filter, issues, filteredIssues);\n        }\n\n        this.setState({issues:issues, filteredIssues:filteredIssues, hasRecords:hasRecords});\n    }\n\n    onGetAllIssuesError(error) {\n    }\n\n    render() {\n        let recordsDisplay = null;\n        if (this.state.issues == null) {\n            //loading\n            recordsDisplay = \"Loading...\";\n        }\n        else {\n            recordsDisplay = <RecordsDisplay hasRecords={this.state.hasRecords} recordType=\"issues\" records={this.state.filteredIssues} openModal={this.openModal} deleteIssue={this.deleteIssue}/> ;\n        }\n\n        const { showModal, currentIssueImage } = this.state;\n        const currentIssueImageUrl = (currentIssueImage === \"\"? \"./images/placeholder-square.jpg\" : ImageHandler.GetImageUrl(currentIssueImage));\n        const modalAction = (\n            this.state.modalTrigger === \"New Issue\" ?  <Button variant=\"primary\" type=\"submit\">Create Issue</Button>\n                                                    :  <Button variant=\"primary\" type=\"submit\">Update Issue</Button>\n        );\n\n      return (\n                <div className=\"Issues h-100\">\n                    {/* <Navigation isLoggedIn={this.props.isLoggedIn} pageName=\"Issues\"/> */}\n\n                    <Container className=\"py-6 px-5 mobile-padding\">\n                        <InnerNavbar filterType=\"issues\" handleFilterChange={this.handleFilterChange} handleSortChange={this.handleSortChange}/>\n                        <div className=\"text-right pt-4 pb-1 mobile-center\">\n                            <Button variant=\"link\" className=\"new-btn\" onClick={this.openModal}>New Issue</Button>\n                        </div>\n                        {recordsDisplay}\n                    </Container>\n                    \n                    <Modal show={showModal} onHide={this.closeModal} size=\"lg\">\n                    <Form className=\"issueModalFrm\" noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n\n                        <Modal.Header closeButton>\n                            <Modal.Title>{this.state.modalTrigger}</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <Alert variant=\"danger\" show={this.state.issueError}>\n                                {this.state.errorMsg}\n                            </Alert>\n                                <Form.Group as={Row} controlId=\"formNameTxt\">\n                                    <Form.Label column sm={2}>\n                                        Title:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control type=\"text\" ref={this.titleInput} defaultValue={this.state.currentIssueTitle} pattern=\"([a-zA-Z0-9]{1,20}\\s?){1,10}\" required/>\n\n                                        <Form.Control.Feedback type=\"invalid\">\n                                        </Form.Control.Feedback>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formDetailsTxt\">\n                                    <Form.Label column sm={2}>\n                                        Details:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control ref={this.detailsInput} defaultValue={this.state.currentIssueDetails} as=\"textarea\" rows=\"3\"/>\n                                        <Form.Control.Feedback type=\"invalid\">\n                                        </Form.Control.Feedback>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formPrioritySelect\">\n                                    <Form.Label column sm={2}>\n                                        Priority:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control ref={this.priorityInput} defaultValue={this.state.currentIssuePriority} as=\"select\" className=\"priority-select\" required>\n                                            <option value=\"1\">Normal</option>\n                                            <option value=\"2\">Important</option>\n                                            <option value=\"3\">Urgent</option>\n                                        </Form.Control>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formImgControl\" className=\"align-items-center\">\n                                    <Form.Label column sm={2}>\n                                        Image URL:\n                                    </Form.Label>\n                                    <Col sm={7}>\n                                        <div className=\"custom-file\">\n                                            <input ref={this.imgInput} type=\"file\" className=\"custom-file-input\" id=\"customFile\" accept=\"image/*\" onChange={this.imgChange}/>\n                                            {/* <Form.Control type=\"file\" placeholder=\"Issue image URL\" accept=\"image/*\" onChange={this.imgChange}/> */}\n                                            <p id=\"image_progress\"></p>\n                                            <label className=\"custom-file-label\" htmlFor=\"customFile\">Choose image</label>\n                                        </div>\n                                    </Col>\n                                    <Col sm={3}>\n                                        <Image src={currentIssueImageUrl} fluid className=\"thumbnail\"/>\n                                    </Col>\n                                </Form.Group>\n                                \n                                <Form.Group as={Row} controlId=\"formStatusSelect\" className={this.state.showStatusSelect}>\n                                    <Form.Label column sm={2}>\n                                        Status:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control ref={this.statusInput} defaultValue={this.state.currentIssueStatus} as=\"select\" className=\"status-select\">\n                                            <option value=\"open\">Open</option>\n                                            <option value=\"closed\">Closed</option>\n                                        </Form.Control>\n                                    </Col>\n                                </Form.Group>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button variant=\"secondary\" onClick={this.closeModal}>\n                                Close\n                            </Button>\n                           {modalAction}\n                        </Modal.Footer>\n                        </Form>\n                    </Modal>\n            </div>\n        );\n\n    }\n  }   \n\n\nexport default Issues;\n","import React from 'react'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport PieChart from 'react-minimal-pie-chart'\n\nclass Records extends React.Component {\n    \n    render () {\n        const charts = (\n            this.props.pageName === \"CommitteeDashboard\"?\n            <Row className=\"text-center py-3\">\n\n                <Col className=\"pb-4\" lg={4}>\n                    <h6>Voting Title1</h6> \n                    <p className=\"mb-1 font-weight-normal\">By: Date</p>\n                    <PieChart className=\"chart\"\n                        data={[\n                            { title: 'For', value: 80, color: '#90ee90' },\n                            { title: 'Against', value: 20, color: '#a2012c' },\n                    ]}/>\n                 </Col>\n                  <Col className=\"pb-4\" lg={4}>\n                  <h6>Voting Title1</h6> \n                  <p className=\"mb-1 font-weight-normal\">By: Date</p>\n                  <PieChart className=\"chart\"\n                      data={[\n                          { title: 'For', value: 80, color: '#90ee90' },\n                          { title: 'Against', value: 20, color: '#a2012c' },\n                  ]}/>\n               </Col>\n                <Col className=\"chartBox\" lg={4}>\n                <h6>Voting Title1</h6> \n                <p className=\"mb-1 font-weight-normal\">By: Date</p>\n                <PieChart className=\"chart\"\n                    data={[\n                        { title: 'For', value: 80, color: '#90ee90' },\n                        { title: 'Against', value: 20, color: '#a2012c' },\n                ]}/>\n             </Col>\n             </Row>\n            :\n            <Row className=\"text-center\">\n                <Col className=\"chartBox\" lg={12}>\n                    <h6>Voting Title1</h6> \n                    <p className=\"mb-1 font-weight-normal\">By: Date</p>\n                    <PieChart className=\"chart\"\n                        data={[\n                            { title: 'For', value: 80, color: '#90ee90' },\n                            { title: 'Against', value: 20, color: '#a2012c' },\n                    ]}/>\n                </Col>\n            </Row>\n        );\n\n        return (\n          <div className=\"w-100\"> {charts} </div>\n            \n        );     \n    }\n}\n\nclass NoRecords extends React.Component {\n   \n    render() {\n\n        return (\n            <p className=\"noRecordsMsg\">There are no {this.props.recordType}. :)</p>\n        );\n    }\n}\nclass ChartsDisplay extends React.Component {\n  \n    render() {\n        \n        return (\n            this.props.hasRecords? \n                <Records pageName={this.props.pageName}/>\n            :   <NoRecords recordType={this.props.recordType}/>\n        );\n    }\n}\n\nexport default ChartsDisplay;","import React from 'react';\n//import Nav from 'react-bootstrap/Nav'\n//import Navbar from 'react-bootstrap/Navbar'\n//import Jumbotron from 'react-bootstrap/Jumbotron'\n//import Button from 'react-bootstrap/Button'\n//import DashboardIssuesAccordion from '../components/RecordsDisplay'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport RecordsDisplay from '../components/RecordsDisplay';\n// import Navigation from '../components/Navigation';\nimport ChartsDisplay from '../components/ChartsDisplay';\nimport Badge from 'react-bootstrap/Badge';\n// import PieChart from 'react-minimal-pie-chart'\n\nclass CommitteeDashboard extends React.Component {\n    \n    render() {\n      \n      return (\n                \n                    <Container fluid className=\"px-4\"> \n                            <Row className=\"pb-2\">\n                                <Col lg={6} className=\"issue-box\">\n                                    <h2>New Reported Issues <Badge variant=\"light\">0</Badge></h2> \n                                    {/* Who manages the hasRecords state? */}\n                                    <RecordsDisplay hasRecords={true} recordType=\"new issues\" /> \n                                </Col>\n                                <Col lg={6}>\n                                    <h2>Overdue Issues <Badge variant=\"light\">9</Badge></h2>\n                                     {/* Who manages the hasRecords state? */}\n                                    <RecordsDisplay hasRecords={true} recordType=\"overdue issues\" />\n                                </Col>\n                            </Row>\n                           \n                            <Row className=\"pt-3 border-top\">\n                                <Col>                    \n                                    <h2>Active Voting Percentage</h2>\n                                    {/* Who manages the hasRecords state? */}\n\n                                    <ChartsDisplay hasRecords={true} recordType=\"active votings\" pageName=\"CommitteeDashboard\"/>\n                                    \n                                   \n                                </Col>\n                            </Row>\n                        </Container>\n      );\n\n    }\n  }   \n\n\nclass TenantDashboard extends React.Component {\n  \n    render() {\n     \n      return (\n        <Container fluid className=\"px-4\">\n                <Row className=\"pb-2\">\n                    <Col lg={6} className=\"issue-box\">\n                        <h2>New Messages <Badge variant=\"light\">0</Badge></h2> \n                        {/* Who manages the hasRecords state? */}\n                        <RecordsDisplay hasRecords={true} recordType=\"new messages\" /> \n                    </Col>\n                    <Col lg={6}>\n                        <h2>Pending Votings <Badge variant=\"light\">9</Badge></h2>\n                        <RecordsDisplay hasRecords={true} recordType=\"pending votings\" />\n                    </Col>\n                </Row>\n                \n                <Row className=\"pt-3 border-top\">\n                    <Col className=\"issue-box\" lg={4}>\n                        <h2 className=\"mb-4\">Voting Results</h2>\n                        <ChartsDisplay hasRecords={true} recordType=\"voting results\" pageName=\"TenantDashboard\"/>\n                    </Col>\n                    \n                    <Col className=\"issue-box\" lg={4}>                   \n                        <h2>New Issues <Badge variant=\"light\">2</Badge></h2>\n                        <RecordsDisplay hasRecords={true} recordType=\"new issues\" />\n                    </Col>\n                        <Col lg={4}>                    \n                        <h2>New Resolved Issues <Badge variant=\"light\">3</Badge></h2>\n                        <RecordsDisplay hasRecords={true} recordType=\"new resolved issues\" />\n                        </Col>\n                </Row>\n            </Container>\n        );\n    }\n  }   \n\n  class Dashboard extends React.Component {\n    \n    render() {\n        // console.log(\"this.props.userType = \" + this.props.userType);\n      const dashboard = (\n        this.props.userType === \"admin\"? <CommitteeDashboard /> : <TenantDashboard />\n      );\n\n      return (\n        <div className=\"Dashboard h-100\">\n            {/* <Navigation isLoggedIn={this.props.isLoggedIn} pageName=\"Dashboard\"/> */}\n            {dashboard}\n        </div>\n        );\n\n    }\n}   \n\n\nexport default Dashboard;\n","import React from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\n\nclass Navigation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleLogout = this.handleLogout.bind(this);\n\n}\n\nhandleLogout (e) {\n  this.props.handleLogout();\n}\n  \n\n    render () {\n        const logo = (this.props.isLoggedIn? \"App-logo-inner\" : \"App-logo\");\n        const isLoggedIn = this.props.isLoggedIn;\n        \n        return (\n            <Navbar fixed=\"top\" collapseOnSelect expand=\"lg\">\n              <Row className=\"w-100\">\n                    <Col lg={1} sm= {4} xs={4}>\n                      <Navbar.Brand href=\"#/\"><img className={logo} src=\"./images/homeboy.png\" alt=\"Homeboy - Your Buddy In Da Building\" /></Navbar.Brand>\n                    </Col>\n                   \n                  <Col lg={11} sm= {4} xs={4} className=\"px-0\">\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\n                        <Nav className={isLoggedIn? \"mr-auto\" : \"hide\"}>\n                          <Nav.Link href=\"#/Dashboard\">Dashboard</Nav.Link>\n                          <Nav.Link href=\"#/Tenants\">Tenants</Nav.Link>\n                          <Nav.Link href=\"#/Messages\">Messages</Nav.Link>\n                          <Nav.Link href=\"#/Issues\">Issues</Nav.Link>\n                          <Nav.Link href=\"#/Votings\">Voting</Nav.Link>\n                        </Nav>\n\n                        <Nav className={isLoggedIn? \"hide\" : \"ml-auto\"}>\n                            <Nav.Link href=\"#/Login\">Login</Nav.Link>\n                            <Nav.Link eventKey={2} href=\"#/SignUp\">\n                            Sign Up\n                            </Nav.Link>\n                        </Nav>\n\n                        <Nav className={isLoggedIn? \"ml-auto\" : \"hide\"}>\n                            <Nav.Link onClick={this.handleLogout}>Logout</Nav.Link>\n                        </Nav>\n                    </Navbar.Collapse>\n                  </Col>\n\n                  <Col sm= {4} xs={4} className=\"text-right px-0\">\n                      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                  </Col>\n                \n              </Row>\n          </Navbar>\n  \n        );     \n    }\n}\n\n\n  \nexport default Navigation;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  // Link\n} from \"react-router-dom\";\nimport { Redirect } from 'react-router-dom'\nimport Home from './pages/Home';\nimport SignUp from './pages/SignUp';\nimport Login from './pages//Login';\nimport Messages from './pages/Messages';\nimport Tenants from './pages/Tenants';\nimport Votings from './pages/Votings';\nimport Issues from './pages/Issues';\nimport Dashboard from './pages/Dashboard';\nimport Navigation from './components/Navigation'\nimport UserDB from './components/UserDB';\n\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      activeUser: null,\n      isLoggedIn: UserDB.IsLoggedIn(),\n      // isLoggedIn: null,\n      activePage: \"Home\",\n      //userType: null\n      userType: UserDB.IsLoggedIn() ? UserDB.GetCurrentUserType() : null\n      // allUsers: jsonUsers,\n  }\n\n  // this.changeActivePage = this.changeActivePage.bind(this);\n  this.handleLogin = this.handleLogin.bind(this);\n  this.handleLogout = this.handleLogout.bind(this);\n  this.handleLogoutSuccess = this.handleLogoutSuccess.bind(this);\n  this.handleLogoutError = this.handleLogoutError.bind(this);\n\n  // //Make sure you have all the information you need\n  // if ( this.state.isLoggedIn == null) {\n  //   // this.state.isLoggedIn = UserDB.IsLoggedIn();\n  //   //this.setState(this.state); \n  //   this.setState({isLoggedIn:UserDB.IsLoggedIn()}); \n  // }\n  // if (this.state.isLoggedIn && this.state.userType == null) {\n  //   this.setState({userType:UserDB.GetCurrentUserType()}); \n\n  //   // this.state.userType = UserDB.GetCurrentUserType();\n  //   //this.setState(this.state); \n  // }\n}\n\nhandleLogin() {\n // this.state.isLoggedIn = true;\n  //Check userType with the DB\n  //this.state.userType = UserDB.GetCurrentUserType();\n\n  this.setState({isLoggedIn:true, userType:UserDB.GetCurrentUserType()}); \n\n  // this.setState(this.state);\n}\n\nhandleLogout() {\n  UserDB.LogOut(this.handleLogoutSuccess, this.handleLogoutError);\n}\n\nhandleLogoutSuccess() {\n  // this.state.isLoggedIn = false;\n  // this.state.userType = null;\n  // this.setState(this.state);\n\n  this.setState({isLoggedIn:false, userType:null});\n}\n\nhandleLogoutError() {\n}\n\n// changeActivePage(pageName){\n// if(pageName === \"Dashboard\") {\n//   this.state.isLoggedIn = true;\n// }\n//   this.state.activePage = pageName;\n//   this.setState(this.state);\n// }\n\n  render() {\n    const activeUser = this.state.activeUser;\n\n    const signUpDestination = (\n      this.state.isLoggedIn? <Redirect to=\"/Dashboard\"/>\n      : <SignUp handleLogin={this.handleLogin} />\n    );\n\n    const loginDestination = (\n      this.state.isLoggedIn? <Redirect to=\"/Dashboard\"/>\n      : <Login handleLogin={this.handleLogin} isLoggedIn={this.state.isLoggedIn}/>\n    );\n\n    const homeDestination = (\n      this.state.isLoggedIn? <Redirect to=\"/Dashboard\"/>\n      : <Home />\n    );\n\n    const issuesDestination = (\n      this.state.isLoggedIn? <Issues activeUser={activeUser} handleLogout={this.handleLogout} isLoggedIn={this.state.isLoggedIn}/>\n      :  <Redirect to=\"/Login\"/>\n    );\n\n    const messagesDestination = (\n      this.state.isLoggedIn? <Messages activeUser={activeUser} handleLogout={this.handleLogout} isLoggedIn={this.state.isLoggedIn}/>\n      : <Redirect to=\"/Login\"/>\n    );\n\n    const dashboardDestination = (\n      this.state.isLoggedIn? <Dashboard userType={this.state.userType} activeUser={activeUser} handleLogout={this.handleLogout} isLoggedIn={this.state.isLoggedIn}/>\n      :  <Redirect to=\"/Login\"/>\n    );\n\n    const tenantsDestination = (\n      this.state.isLoggedIn? <Tenants activeUser={activeUser} handleLogout={this.handleLogout} isLoggedIn={this.state.isLoggedIn}/>\n      :  <Redirect to=\"/Login\"/>\n    );\n\n    const votingsDestination = (\n      this.state.isLoggedIn? <Votings activeUser={activeUser} handleLogout={this.handleLogout} isLoggedIn={this.state.isLoggedIn}/>\n      :  <Redirect to=\"/Login\"/>\n    );\n\n    const navigation = (\n      <Navigation isLoggedIn={this.state.isLoggedIn} handleLogout={this.handleLogout}/>\n    );\n\n    return (\n      <div className=\"App\">\n          <Router>\n            <Switch>\n            <Route exact path=\"/\">\n              {navigation}\n              {homeDestination}\n            </Route>\n            <Route path=\"/Login\">\n              {loginDestination}\n            </Route>\n            <Route path=\"/Issues\">\n              {navigation}\n              {issuesDestination}\n            </Route>\n            <Route path=\"/Messages\">\n              {navigation}\n              {messagesDestination}\n            </Route>\n            <Route path=\"/SignUp\">\n              {signUpDestination}\n              </Route>\n            <Route path=\"/Dashboard\">\n              {navigation}\n              {dashboardDestination}\n            </Route>\n            <Route path=\"/Tenants\">\n              {navigation}\n              {tenantsDestination}\n            </Route>\n            <Route path=\"/Votings\">\n              {navigation}\n              {votingsDestination}\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}