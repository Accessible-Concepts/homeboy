{"version":3,"sources":["pages/Home.js","components/UserDB.js","pages/SignUp.js","pages/Login.js","components/CommentDB.js","components/MessageDB.js","components/ImageHandler.js","components/InnerNavbar.js","components/Comments.js","components/IssueDB.js","components/IssuesAccordion.js","components/DashboardIssuesAccordion.js","components/TenantsAccordion.js","components/MessagesAccordion.js","components/DashboardNewMessagesAccordion.js","components/VotingsAccordion.js","components/PendingVotingsAccordion.js","components/RecordsDisplay.js","pages/Messages.js","pages/Tenants.js","pages/Votings.js","pages/Issues.js","components/ChartsDisplay.js","pages/Dashboard.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Main","Jumbotron","className","Button","href","variant","size","Container","CardDeck","Col","lg","Card","Header","Title","Img","src","Body","Text","Footer","block","React","Component","Home","Parse","require","serverURL","initialize","UserDB","GetUser","User","SignUpCommitteeMember","user","onSuccess","onError","set","signUp","then","catch","error","CreateTenant","current","get","sessionToken","become","Error","LogIn","email","password","logIn","LogOut","logOut","GetAllUsers","UserClass","Object","extend","Query","find","results","UpdateUser","tenantId","updatedTenant","Tenant","object","save","response","FindUserByEmail","query","equalTo","FindUserById","userId","IsLoggedIn","GetCurrentUser","GetCurrentUserName","GetCurrentUserType","SignUp","props","state","username","community","address","validated","signUpError","errorMsg","handleNameChange","bind","handleEmailChange","handlePasswordChange","handleCommunityChange","handleAddressChange","handleSubmit","OnSignUpSuccess","OnSignUpError","e","value","target","this","setState","handleLogin","message","form","preventDefault","stopPropagation","checkValidity","destination","Alert","show","Form","noValidate","onSubmit","Group","controlId","Label","Control","type","placeholder","onChange","pattern","required","Feedback","Login","loginError","OnLoginSuccess","OnLoginError","replace","autoComplete","addCommentToObject","commentText","comments","newComment","CommentDB","GetComment","id","push","GetCommentComments","commentId","onSucces","Comment","AddCommentToObject","CommentComment","comment","GetObjectComments","objectId","MessageDB","GetMessage","CreateMessage","newMessage","result","GetAllMessages","sortByPriority","Message","descending","addDescending","UpdateMessage","messageId","updatedMessage","GetMessageComments","CommentMessage","DeleteMessage","MessageId","destroy","ImageHandler","UploadImage","imageFile","onProgressChange","onImageUploadSuccess","onImageUploadError","xhr","XMLHttpRequest","fd","FormData","open","setRequestHeader","upload","addEventListener","progress","Math","round","loaded","total","onreadystatechange","readyState","status","JSON","parse","responseText","public_id","append","send","GetImageUrl","imageId","undefined","InnerNavbar","onSortChange","changeEvent","handleSortChange","filterType","filters","handleFilterChange","isHidden","colWidth","Row","name","defaultChecked","htmlFor","Comments","parentId","getUserImage","getCommentRows","handleKeyPress","onGetAllCommentsSuccess","onGetAllCommentsError","onAddCommentSuccess","onAddCommentError","commentInput","createRef","key","addComment","image","map","index","sm","xs","alt","as","rows","ref","onKeyPress","IssueDB","GetIssue","CreateIssue","newIssue","GetAllIssues","Issue","UpdateIssue","issueId","updatedIssue","GetIssueComments","CommentIssue","DeleteIssue","IssuesAccordion","activeCardId","getPriorityIcon","handleComment","addCommentHanlder","getAllComments","handleUpdateClick","handleDeleteClick","handleAccordionToggle","getToggleClass","priority","issue","openModal","deleteIssue","issueCards","records","Accordion","Toggle","eventKey","onClick","Collapse","getCardImage","getPriorityString","DashboardIssuesAccordion","TenantsAccordion","deleteUser","userCards","MessagesAccordion","deleteMessage","messageCards","DashboardNewMessagesAccordion","VotingsAccordion","votingAccordion","votingStatus","userType","placeholderText","withPortal","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","column","data","title","color","PendingVotingsAccordion","Records","accordion","recordType","NoRecords","RecordsDisplay","hasRecords","Messages","messages","filter","inputFilter","selectFilter","filteredMessages","showModal","currentMessageId","currentMessageTitle","currentMessageDetails","currentMessagePriority","currentMessageImage","modalTrigger","showStatusSelect","messageError","onGetAllMessagesSuccess","onGetAllMessagesError","filterMessages","onCreateMessageSuccess","onCreateMessageError","onImageUploadProgress","closeModal","createMessage","updateMessage","onDeleteMessageError","onDeleteMessageSuccess","imgChange","titleInput","detailsInput","priorityInput","imgInput","indexOf","originalMessages","i","length","toUpperCase","checkCurrentMessage","input","tagName","newFilter","document","getElementById","innerHTML","ev","newMessageImg","file","files","URL","recordsDisplay","currentMessageImageUrl","modalAction","Modal","onHide","closeButton","defaultValue","accept","Image","fluid","Tenants","users","filteredUsers","currentUserId","currentUserName","currentUserEmail","currentUserApt","userError","onGetAllUsersSuccess","onGetAllUsersError","filterUsers","onCreateTenantSuccess","onCreateTenantError","createTenant","updateUser","onDeleteUserError","onDeleteUserSuccess","nameInput","emailInput","aptInput","originalUsers","checkCurrentUser","currentUserImage","newUserImg","UserError","newUser","DeleteUser","console","log","currentUserImageUrl","Votings","activePage","totalItemsCount","handlePageChange","val","parseInt","pageNumber","isNaN","innerText","includes","Issues","issues","filteredIssues","currentIssueId","currentIssueTitle","currentIssueDetails","currentIssuePriority","currentIssueImage","currentIssueStatus","issueError","onGetAllIssuesSuccess","onGetAllIssuesError","filterIssues","onCreateIssueSuccess","onCreateIssueError","createIssue","updateIssue","onDeleteIssueError","onDeleteIssueSuccess","statusInput","originalIssues","checkCurrentIssue","newIssueImg","currentIssueImageUrl","charts","pageName","ChartsDisplay","CommitteeDashboard","Badge","TenantDashboard","Dashboard","dashboard","Navigation","handleLogout","logo","isLoggedIn","Navbar","fixed","collapseOnSelect","expand","Brand","Nav","Link","aria-controls","App","activeUser","handleLogoutSuccess","handleLogoutError","signUpDestination","to","loginDestination","homeDestination","issuesDestination","messagesDestination","dashboardDestination","tenantsDestination","votingsDestination","navigation","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.228a851b.chunk.js","sourcesContent":["import React from 'react';\n//import './Home.css';\n\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Button from 'react-bootstrap/Button'\nimport CardDeck from 'react-bootstrap/CardDeck'\nimport Card from 'react-bootstrap/Card'\nimport Col from 'react-bootstrap/Col'\n// import Navigation from '../components/Navigation'\nimport Container from 'react-bootstrap/Container'\n\n\nclass Main extends React.Component {\n  \n  render () {\n\n    return (\n      <main>\n        <Jumbotron className=\"hero text-center\">\n          <h1>Welcome to Homeboy - Your Building Management Buddy!</h1>\n          <p>\n          With our groundbreaking Homeowner Association Management System,\n          communication between tenants and the homeowner association committee has never been easier!\n          </p>\n          <p>\n            <Button href=\"#/SignUp\" variant=\"primary\" size=\"lg\" className=\"px-5 py-2\">Sign Up - It's Free!</Button>\n          </p>\n        </Jumbotron>\n        <Container className=\"featureWrapper text-center mt-4\">\n          <h2>Love Thy Neighbor</h2>\n          <p>\n          Use Homeboy to make it good in the hood! We’ve got the features you need to prevent gang fights and promote happy neighboring!\n          </p>\n          <CardDeck>\n            <Col lg={4}>\n              <Card>\n                  <Card.Header>\n                    <Card.Title>Issue Management</Card.Title>\n                  </Card.Header>\n                  <Card.Img variant=\"top\" src=\"./images/issue-management.png\" />\n                  <Card.Body>\n                    <Card.Text>\n                    Striving to achieve structured tracking for issues reported by homies?\n                    </Card.Text>\n                  </Card.Body>\n                  <Card.Footer className=\"border-0\">\n                    <Button href=\"#/Issues\" variant=\"primary\" block>Make It Work</Button>\n                  </Card.Footer>\n                </Card>\n              </Col>\n              <Col lg={4}>\n                <Card>\n                  <Card.Header>\n                    <Card.Title>Easy Messaging</Card.Title>\n                  </Card.Header>\n                  <Card.Img variant=\"top\" src=\"./images/messaging.png\" />\n                  <Card.Body>\n                    <Card.Text>\n                    Begging for homies to pay attention to messages from the building's committee?\n                    </Card.Text>\n                  </Card.Body>\n                  <Card.Footer className=\"border-0\">\n                    <Button href=\"#/Messages\" variant=\"primary\" block>Make It Happen</Button>\n                  </Card.Footer>\n                </Card>\n              </Col>\n              <Col lg={4}>\n                <Card>\n                  <Card.Header>\n                    <Card.Title>Open Voting</Card.Title>\n                  </Card.Header>\n                  <Card.Img variant=\"top\" src=\"./images/voting.png\" />\n                  <Card.Body>\n                    <Card.Text>\n                    Dreaming of improving the way financial decisions are made in your building? \n                    </Card.Text>\n                  </Card.Body>\n                  <Card.Footer className=\"border-0\">\n                    <Button href=\"#/Votings\" variant=\"primary\" block>Make It Count</Button>\n                  </Card.Footer>\n              </Card>\n            </Col>\n          </CardDeck>      \n      </Container>\n      </main>\n    );\n  }\n}\n\nclass Home extends React.Component {\n  render () {\n    return (\n      <div className=\"Home\">\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","var Parse = require('parse');\n\nInitialize();\n\n\nfunction Initialize() {\n  Parse.serverURL = 'https://parseapi.back4app.com'; // This is your Server URL\n  Parse.initialize(\n    'EjBHB6eHkPYe1zSnuvjLgLnAcimFgedDdkTQKKMp', // This is your Application ID\n    'x2qBBi1Ms1YMtws1NreUEgGsmFrrx13zuyZcxLRR' // This is your Javascript key\n  );\n}\n\nconst UserDB = {\n\n  GetUser: function GetUser() {\n    return new Parse.User()\n  },\n\n  SignUpCommitteeMember: function SignUpCommitteeMember(user, onSuccess, onError){\n    user.set('isCommitteeMember', true);\n    user.signUp().then((user) => {\n      onSuccess(user);\n    }).catch(error => {\n      onError(error);\n    });\n  },\n\n  CreateTenant: function CreateTenant(user, onSuccess, onError){\n    debugger;\n    //Check if I'm logged in as a committee member.\n    if ((Parse.User.current() == null) || (!Parse.User.current().get(\"isCommitteeMember\"))) {\n      onError(new Error(\"Not logged in as committee member.\"))\n      return;\n    }\n    \n    //I save this user session for use later so I can revert back to who I am.\n    var sessionToken = Parse.User.current().get(\"sessionToken\");\n    user.set('isCommitteeMember', false);\n    user.signUp().then((user) => {\n      Parse.User.become(sessionToken).then((user) => {\n        // The current user is now set back to creator.\n        onSuccess(user);\n      }).catch(error => {\n        onError(error);\n      });\n    }).catch(error => {\n      onError(error);\n    });\n  },\n\n  LogIn: function LogIn(email, password, onSuccess, onError) {\n    // Pass the username and password to logIn function\n    Parse.User.logIn(email,password).then((user) => {\n      // Do stuff after successful login\n      onSuccess(user);\n      //console.log('Logged in user', user);\n    }).catch(error => {\n      onError(error);\n      //console.error('Error while logging in user', error);\n    })\n  },\n\n  LogOut: function LogOut(onSuccess, onError) {\n    // Pass the username and password to logIn function\n    Parse.User.logOut().then(() => {\n      // Do stuff after successful login\n      onSuccess();\n      //console.log('Logged out');\n    }).catch(error => {\n      onError(error);\n      //console.error('Error while logging out user', error);\n    })\n  },\n\n  GetAllUsers: function GetAllUsers(onSuccess, onError) {\n\n    const UserClass = Parse.Object.extend(\"User\");\n\n    // Creates a new Query object to help us fetch UserClass objects\n    const query = new Parse.Query(UserClass);\n\n    // Executes the query, which returns an array of UserClass\n    query.find().then(results => {\n      onSuccess(results);\n    }).catch((error) =>  {\n      onError(error);\n      //console.error('Error while trying to GetAllUsers', error);\n\n    });\n  },\n\n  UpdateUser: function UpdateUser(tenantId, updatedTenant, onSuccess, onError) {\n    const Tenant = Parse.Object.extend('Tenant');\n    const query = new Parse.Query(Tenant);\n    // here you put the objectId that you want to update\n    query.get(tenantId).then((object) => {\n      object.set('createdBy', Parse.User.current());\n      object.set('username', updatedTenant.get('username'));\n      object.set('email', updatedTenant.get('email'));\n      object.set('apartment', updatedTenant.get('apartment'));\n      object.set('userImage', updatedTenant.get('userImage'));\n      object.save().then((response) => {\n        onSuccess(response);\n        // console.log('Updated Tenant', response);\n      }, (error) => {\n        onError(error);\n        // console.error('Error while updating Tenant', error);\n      });\n    });\n  },\n\n  FindUserByEmail: function FindUserByEmail(email, onSuccess, onError) {\n\n    const UserClass = Parse.Object.extend(\"User\");\n\n    // Creates a new Query object to help us fetch UserClass objects\n    const query = new Parse.Query(UserClass);\n\n    query.equalTo(\"email\", email);\n\n    // Executes the query, which returns an array of UserClass\n    query.find().then(results => {\n      onSuccess(results);\n    }).catch((error) =>  {\n      onError(error);\n      //console.error('Error while trying to FindUserByEmail', error);\n\n    });\n  },\n\n  FindUserById: function FindUserById(userId, onSuccess, onError) {\n\n    const UserClass = Parse.Object.extend(\"User\");\n\n    // Creates a new Query object to help us fetch UserClass objects\n    const query = new Parse.Query(UserClass);\n\n    query.equalTo(\"objectId\", userId);\n\n    // Executes the query, which returns an array of UserClass\n    query.find().then(results => {\n      onSuccess(results);\n    }).catch((error) =>  {\n      onError(error);\n      //console.error('Error while trying to FindUserByEmail', error);\n\n    });\n  },\n\n  IsLoggedIn: function IsLoggedIn() {\n    return Parse.User.current() != null;\n  },\n\n  GetCurrentUser: function GetCurrentUser() {\n    return Parse.User.current();\n  },\n\n  GetCurrentUserName: function GetCurrentUserName() {\n    if (Parse.User.current() != null) {\n      return Parse.User.current().get('username');\n    } else {\n      return \"\";\n    }\n  },\n\n  \n  GetCurrentUserType: function GetCurrentUserType() {\n    const user = Parse.User.current();\n    if (user == null) {\n      return null;\n    } else {\n      if (user.get('isCommitteeMember')) {\n        return \"admin\";\n      } else {\n        return \"tenant\";\n      }\n    }\n  },\n\n}\n\n\nexport default UserDB;\n","import React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Alert from 'react-bootstrap/Alert'\nimport UserDB from '../components/UserDB';\n\n\nclass SignUp extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          username: \"\",\n          email:\"\",\n          password: \"\",\n          community:\"\",\n          address:\"\",\n          validated:false,\n          signUpError:false,\n          errorMsg:\"\",\n          //signUpSuccess:false\n        };\n\n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.handleEmailChange = this.handleEmailChange.bind(this);\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\n        this.handleCommunityChange = this.handleCommunityChange.bind(this);\n        this.handleAddressChange = this.handleAddressChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.SignUp = this.SignUp.bind(this);\n        this.OnSignUpSuccess = this.OnSignUpSuccess.bind(this);\n        this.OnSignUpError = this.OnSignUpError.bind(this);\n    }\n\n    handleNameChange (e) {\n        let value = e.target.value;\n        this.setState({username:value});\n        // this.state.username = value;\n        // this.setState(this.state);\n    }\n\n    handleEmailChange (e) {\n        let value = e.target.value;\n        this.setState({email:value});\n        // this.state.email = value;\n        // this.setState(this.state);\n    }\n\n    handlePasswordChange (e) {\n        let value = e.target.value;\n        this.setState({password:value});\n        // this.state.password = value;\n        // this.setState(this.state);\n    }\n\n    handleCommunityChange (e) {\n        let value = e.target.value;\n        this.setState({community:value});\n        // this.state.community = value;\n        // this.setState(this.state);\n    }\n\n    handleAddressChange (e) {\n        let value = e.target.value;\n        this.setState({address:value});\n        // this.state.address = value;\n        // this.setState(this.state);\n    }\n    \n    OnSignUpSuccess(user) {\n        this.props.handleLogin();\n    }\n\n    OnSignUpError(error) {\n        // this.state.errorMsg = error.message;\n        this.setState({errorMsg:error.message, signUpError:true});\n\n        // this.state.signUpError = true;\n        // this.setState(this.state);\n    }\n\n    SignUp() {\n        const user = UserDB.GetUser()\n        user.set('username', this.state.username);\n        user.set('email', this.state.email);\n        user.set('password', this.state.password);\n        user.set('communityName', this.state.community);\n        user.set('address', this.state.address);\n        UserDB.SignUpCommitteeMember(user, this.OnSignUpSuccess, this.OnSignUpError);\n      }\n\n    handleSubmit(e) {\n        const form = e.target;\n        // this.state.validated = true;\n        // this.setState(this.state);\n        this.setState({validated:true});\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (form.checkValidity() === true) {\n            this.SignUp();\n        }\n      }\n\n    render() {\n\n        const destination = (\n            <div className=\"SignUp\">\n                <h1>Create a Homeboy Account</h1>\n                <p>or <a href=\"#/Login\">or log in to your account</a></p>\n                <Alert variant=\"danger\" show={this.state.signUpError}>\n                {this.state.errorMsg}\n                </Alert>\n                <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n                    <Form.Group controlId=\"formBasicName\">\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter name\" onChange={this.handleNameChange} pattern=\"[a-zA-Z]{4,0}\" required/>\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please provide a valid name.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n        \n                    <Form.Group controlId=\"formBasicEmail\">\n                        <Form.Label>Email address</Form.Label>\n                        <Form.Control type=\"email\" placeholder=\"Enter email\" onChange={this.handleEmailChange} pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{3,}$\" required/>\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please provide a valid email.\n                        </Form.Control.Feedback>\n                        <Form.Text className=\"text-muted\">\n                            We'll never share your email with anyone else.\n                        </Form.Text>\n                    </Form.Group>\n        \n                    <Form.Group controlId=\"formBasicPassword\">\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control type=\"password\" placeholder=\"Password\" onChange={this.handlePasswordChange} pattern=\"(?=.*\\d)(?=.*[a-z]).{8,20}\" required/>\n                        <Form.Control.Feedback type=\"invalid\">\n                        Password must be 8-20 characters, contain lowercase letters and numbers, and no spaces, special characters, or emoji.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n        \n                    <Form.Group controlId=\"formBasicCommunity\">\n                        <Form.Label>Building Community Name</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter community name\" onChange={this.handleCommunityChange} pattern=\"[a-zA-Z0-9]{2,}\" required/>\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please choose a name for your building.\n                        </Form.Control.Feedback>\n                        \n                    </Form.Group>\n        \n                    <Form.Group controlId=\"formBasicAddress\">\n                        <Form.Label>Full Address</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Enter address\" onChange={this.handleAddressChange} required/>\n                        <Form.Control.Feedback type=\"invalid\">\n                        Address is a required field.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    \n                    <Button type=\"submit\" variant=\"success\"  block>\n                        Create New Account\n                    </Button>\n                </Form>\n            </div>    \n        );\n        \n        return (\n            <div>{destination}</div>\n        );\n    }\n}\n\nexport default SignUp;\n","import React from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport UserDB from '../components/UserDB'\nimport Alert from 'react-bootstrap/Alert'\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          email:\"\",\n          password: \"\",\n          validated:false,\n          loginError:false,\n          errorMsg:\"\",\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.Login = this.Login.bind(this);\n        this.OnLoginSuccess = this.OnLoginSuccess.bind(this);\n        this.OnLoginError = this.OnLoginError.bind(this);\n        this.handleEmailChange = this.handleEmailChange.bind(this);\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    }\n\n    handleEmailChange (e) {\n        let value = e.target.value;\n        //this.state.email = value;\n        //this.setState(this.state);\n        this.setState({email:value});\n    }\n\n    handlePasswordChange (e) {\n        let value = e.target.value;\n        this.setState({password:value});\n        // this.state.password = value;\n        // this.setState(this.state);\n    }\n\n    OnLoginSuccess(user) {\n        // this.state.signUpError = false;\n        // this.state.signUpSuccess = true;\n        // this.setState(this.state);\n        this.props.handleLogin();\n    }\n\n    OnLoginError(error) {\n        let errorMsg = error.message.replace(\"username\", \"email\");\n        this.setState({\n                        errorMsg:errorMsg,\n                        loginError:true\n                      });\n\n        // this.state.errorMsg = errorMsg;\n        // this.state.loginError = true;\n        // this.setState(this.state);\n    }\n\n    Login() {\n        UserDB.LogIn(this.state.email, this.state.password, this.OnLoginSuccess, this.OnLoginError);\n      }\n\n    handleSubmit(e) {\n        const form = e.target;\n        // this.state.validated = true;\n        // this.setState(this.state);\n        this.setState({validated:true});\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (form.checkValidity() === true) {\n            this.Login();\n        }\n      }\n\n    render() {\n                return (\n                    <div className=\"Login\">\n                    <h1>Login to Homeboy</h1>\n                    <p>or <a href=\"#/SignUp\">or create an account</a></p>\n                    <Alert variant=\"danger\" show={this.state.loginError}>\n                        {this.state.errorMsg}\n                    </Alert>\n                    <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Email address</Form.Label>\n                            <Form.Control type=\"email\" placeholder=\"Enter email\" autoComplete=\"username\" onChange={this.handleEmailChange} pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{3,}$\" required/>\n                            <Form.Control.Feedback type=\"invalid\">\n                            </Form.Control.Feedback>\n                        </Form.Group>\n\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Password\" autoComplete=\"current-password\" onChange={this.handlePasswordChange} pattern=\"(?=.*\\d)(?=.*[a-z]).{8,20}\" required/>\n                             <Form.Control.Feedback type=\"invalid\">\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Button variant=\"success\" type=\"submit\" block>\n                            Come On In!\n                        </Button>\n                    </Form>\n                </div>\n                );\n        }\n}\n\nexport default Login;\n","var Parse = require('parse');\n\nInitialize();\n\nfunction Initialize() {\n  Parse.serverURL = 'https://parseapi.back4app.com'; // This is your Server URL\n  Parse.initialize(\n    'EjBHB6eHkPYe1zSnuvjLgLnAcimFgedDdkTQKKMp', // This is your Application ID\n    'x2qBBi1Ms1YMtws1NreUEgGsmFrrx13zuyZcxLRR' // This is your Javascript key\n  );\n}\n\nfunction addCommentToObject(object, commentText) {\n  var comments = object.get(\"comments\")\n  if (comments == null) {\n    comments = [];\n  }\n  const newComment = CommentDB.GetComment();\n  newComment.set('parentId', object.id)\n  newComment.set('createdBy', Parse.User.current());\n  newComment.set('createdByUserName', Parse.User.current().get('username'));\n  newComment.set('createdByUserImage', Parse.User.current().get('userImage'));\n\n  newComment.set('text', commentText);\n  comments.push(newComment)\n  object.set('comments', comments);\n}\n\nconst CommentDB = {\n  GetComment: function GetComment() {\n    const Comment = Parse.Object.extend('Comment');\n\n    return new Comment();\n  },\n\n  // CreateComment: function CreateComment(newComment, onSuccess, onError){\n  //\n  // },\n\n\n  GetCommentComments: function GetCommentComments(commentId, onSucces, onError) {\n    const Comment = Parse.Object.extend('Comment');\n    const query = new Parse.Query(Comment);\n    query.get(commentId).then((results) => {\n      const comments = results.get(\"comments\")\n      onSucces(comments);\n      // console.log('Comments found', comments);\n    }, (error) => {\n      onError(error)\n      // console.error('Error while fetching comments', error);\n    });\n  },\n\n  AddCommentToObject: function AddCommentToObject(object, commentText) {\n    addCommentToObject(object, commentText);\n  },\n\n  CommentComment: function CommentComment(commentId, comment, onSuccess, onError) {\n    const Comment = Parse.Object.extend('Comment');\n    const query = new Parse.Query(Comment);\n    // here you put the objectId that you want to update\n    query.get(commentId).then((object) => {\n      addCommentToObject(object, comment);\n      object.save().then((response) => {\n        onSuccess(response);\n        // console.log('Updated Comment', response);\n      }, (error) => {\n        onError(error);\n        // console.error('Error while updating Comment', error);\n      });\n    });\n  },\n  GetObjectComments: function GetObjectComments(objectId, onSucces, onError) {\n    const Comment = Parse.Object.extend('Comment');\n    const query = new Parse.Query(Comment);\n    query.equalTo(\"parentId\", objectId);\n      query.find().then((results) => {\n      onSucces(results);\n      // console.log('Comments found', results);\n    }, (error) => {\n      onError(error)\n      // console.error('Error while fetching comments', error);\n    });\n  },\n}\n\nexport default CommentDB;\n","import CommentDB from '../components/CommentDB';\nvar Parse = require('parse');\n\nInitialize();\n\nfunction Initialize() {\n  Parse.serverURL = 'https://parseapi.back4app.com'; // This is your Server URL\n  Parse.initialize(\n    'EjBHB6eHkPYe1zSnuvjLgLnAcimFgedDdkTQKKMp', // This is your Application ID\n    'x2qBBi1Ms1YMtws1NreUEgGsmFrrx13zuyZcxLRR' // This is your Javascript key\n  );\n}\n\nconst MessageDB = {\n  GetMessage: function GetMessage() {\n    const Message = Parse.Object.extend('Message');\n    return new Message()\n  },\n\n  CreateMessage: function CreateMessage(newMessage, onSuccess, onError){\n    newMessage.set('createdBy', Parse.User.current());\n    //newMessage.set('comments', []);\n\n    newMessage.save().then(\n      (result) => {\n        const id = result.id;\n        onSuccess(id, result);\n        // console.log('Message created', result);\n      },\n      (error) => {\n        onError(error);\n        // console.error('Error while creating Message: ', error);\n      }\n    );\n  },\n\n  GetAllMessages: function GetAllMessages(sortByPriority, onSuccess, onError) {\n    const Message = Parse.Object.extend('Message');\n    const query = new Parse.Query(Message);\n\n    if (sortByPriority === true) {\n      query.descending(\"priority\");\n      query.addDescending(\"updatedAt\");\n    } else {\n      query.descending(\"updatedAt\");\n    }\n    \n    query.find().then((results) => {\n      onSuccess(results);\n      // console.log('Message found', results);\n    }, (error) => {\n      onError(error);\n      // console.error('Error while fetching Message', error);\n    });\n  },\n\n  UpdateMessage: function UpdateMessage(messageId, updatedMessage, onSuccess, onError) {\n    const Message = Parse.Object.extend('Message');\n    const query = new Parse.Query(Message);\n    // here you put the objectId that you want to update\n    query.get(messageId).then((object) => {\n      object.set('createdBy', Parse.User.current());\n      object.set('title', updatedMessage.get('title'));\n      object.set('details', updatedMessage.get('details'));\n      object.set('priority', updatedMessage.get('priority'));\n      object.save().then((response) => {\n        onSuccess(response);\n        // console.log('Updated Message', response);\n      }, (error) => {\n        onError(error);\n        // console.error('Error while updating Message', error);\n      });\n    });\n  },\n\n  GetMessageComments: function GetMessageComments(messageId, onSucces, onError) {\n    const Message = Parse.Object.extend('Message');\n    const query = new Parse.Query(Message);\n    query.get(messageId).then((results) => {\n      const comments = results.get(\"comments\")\n      onSucces(comments);\n      // console.log('Comments found', comments);\n    }, (error) => {\n      onError(error)\n      // console.error('Error while fetching comments', error);\n    });\n\n  },\n\n  CommentMessage: function CommentMessage(messageId, commentText, onSuccess, onError) {\n    const Message = Parse.Object.extend('Message');\n    const query = new Parse.Query(Message);\n    // here you put the objectId that you want to update\n    query.get(messageId).then((object) => {\n      CommentDB.AddCommentToObject(object, commentText);\n      object.save().then((response) => {\n        onSuccess(response);\n        // console.log('Updated Message', response);\n      }, (error) => {\n        onError(error);\n        // console.error('Error while updating Message', error);\n      });\n    });\n  },\n\n  DeleteMessage: function DeleteMessage(MessageId, onSuccess, onError) {\n    const Message = Parse.Object.extend('Message');\n    const query = new Parse.Query(Message);\n    query.get(MessageId).then((object) => {\n      object.destroy().then((response) => {\n        onSuccess(response);\n        // console.log('Deleted Message', response);\n      }, (error) => {\n        // console.error('Error while deleting Message', error);\n      });\n    });\n  }\n\n}\n\nexport default MessageDB;\n","// import cloudinary from 'cloudinary-core';\n// const cloudinaryCore = new cloudinary.Cloudinary({cloud_name: 'dybzbstoi',api_key: \"695564997941263\",\n// api_secret: \"-jpNbRT83us6l2mfUQZfvebBvMg\"\n// });\n\nconst ImageHandler  = {\n  UploadImage: function UploadImage(imageFile, onProgressChange, onImageUploadSuccess, onImageUploadError) {\n    var url = `https://api.cloudinary.com/v1_1/dybzbstoi/upload`;\n    var xhr = new XMLHttpRequest();\n    var fd = new FormData();\n    xhr.open('POST', url, true);\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    // Update progress (can be used to show progress indicator)\n    xhr.upload.addEventListener(\"progress\", function(e) {\n      var progress = Math.round((e.loaded * 100.0) / e.total);\n      if (onProgressChange !== null) {\n        onProgressChange(progress)\n      }\n      // document.getElementById('progress').style.width = progress + \"%\";\n      //\n    //   console.log(`fileuploadprogress data.loaded: ${e.loaded},\n    // data.total: ${e.total}`);\n    });\n\n    xhr.onreadystatechange = function(e) {\n      if (xhr.readyState === 4 && xhr.status === 200) {\n        // File uploaded successfully\n         var response = JSON.parse(xhr.responseText);\n        // // https://res.cloudinary.com/cloudName/image/upload/v1483481128/public_id.jpg\n        //var url = response.secure_url;\n\n        onImageUploadSuccess(response.public_id)\n\n\n      } else if (xhr.status !== 200 ){\n        onImageUploadError(xhr.status)\n      }\n    };\n    const unsignedUploadPreset = 'v2ugydrc';\n    fd.append('upload_preset', unsignedUploadPreset);\n    fd.append('tags', 'browser_upload'); // Optional - add tag for image admin in Cloudinary\n    fd.append('file', imageFile);\n    xhr.send(fd);\n  },\n\n  GetImageUrl: function GetImageUrl(imageId) {\n    if (imageId !== null && imageId !== \"\" && imageId !== undefined) {\n      return (\"http://res.cloudinary.com/dybzbstoi/image/upload/\" + imageId + \".jpg\")\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default ImageHandler;\n","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n// import { thisExpression } from '@babel/types'\n\n\nclass InnerNavbar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { }\n\n        this.onSortChange = this.onSortChange.bind(this);\n\n    }\n\n    onSortChange(changeEvent) {\n        var sortByPriority = false;\n        if (changeEvent.target.value === \"priority\") {\n            sortByPriority = true;\n        } else {\n            sortByPriority = false;\n        }\n        this.props.handleSortChange(sortByPriority);\n    }\n\n    render() {\n        const placeholder = (\n            this.props.filterType === \"tenants\"?\n            \"Filter by name, email or apartment\" :\n            \"Filter by title or details\"\n            );\n        \n        const filters = (\n            this.props.filterType === \"messages\"?\n            <select className=\"browser-default custom-select mobile-center\" onChange={this.props.handleFilterChange}>\n                <option value=\"12\">Filter by priority</option>\n                <option value=\"1\">Information</option>\n                <option value=\"2\">Important</option>     \n            </select>\n            : this.props.filterType === \"issues\"?\n            <select className=\"browser-default custom-select mobile-center\" onChange={this.props.handleFilterChange}>\n                <option value=\"123\">Filter by priority</option>\n                <option value=\"1\">Normal</option>\n                <option value=\"2\">Important</option>     \n                <option value=\"3\">Urgent</option>     \n            </select>\n\n            :null\n        );\n\n        const isHidden = (\n            (this.props.filterType === \"messages\") || (this.props.filterType === \"issues\") ? null\n            : \"hide\"\n        );\n        \n        const colWidth = (\n            (this.props.filterType === \"tenants\") || (this.props.filterType === \"voting\")? \"12\"\n            : \"6\"\n        );\n\n        return (\n            <Container className=\"NavBar\">\n                {/* <Row className=\"border justify-content-center rounded\">\n                    <Col className=\"col-auto px-0 d-flex align-items-center\">\n                        <i className=\"fas fa-search\"></i>\n                    </Col>\n                    <Col className=\"col-11 px-0\">\n                        <Form.Control className=\"border-0\" type=\"text\" placeholder=\"Filter by text in title and details\" onChange={this.handleFilterChange} />\n                    </Col>\n                </Row> */}\n                <Row>\n                    <Col lg={colWidth} className=\"mobile-center pb-2\">\n                        <Row className=\"border rounded justify-content-center\">\n                            <div className=\"col-auto px-0 d-flex align-items-center\">\n                                <i className=\"fas fa-search\"></i>\n                            </div>\n                            <div className=\"col-11 px-0\">\n                                <Form.Control className=\"border-0\" type=\"text\" placeholder={placeholder} onChange={this.props.handleFilterChange} />\n                            </div>\n                        </Row>\n                    </Col>\n                    <Col lg={3} className=\"pr-0 select-wrapper mobile-center pb-2\">\n                        {filters}                           \n                    </Col>\n                    <Col lg={3} className={\"px-0 text-right mobile-center pb-2 \" + isHidden}>\n                        <h6 className=\"d-inline-block align-middle mr-3\">Sort by:</h6>\n                        <div className=\"form-check form-check-inline\">\n                            <input className=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio1\" value=\"date\" defaultChecked onChange={this.onSortChange}/>\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio1\">Date</label>\n                            </div>\n                            <div className=\"form-check form-check-inline mr-0\">\n                            <input className=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"priority\" onChange={this.onSortChange}/>\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Priority</label>\n                        </div>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\n\n\n\nexport default InnerNavbar;","import React from 'react'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Form from 'react-bootstrap/Form'\r\nimport CommentDB from '../components/CommentDB';\r\n\r\n\r\nclass Comments extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            comments : null,\r\n            parentId : this.props.parentId\r\n        }\r\n\r\n        this.getUserImage = this.getUserImage.bind(this);\r\n        this.getCommentRows = this.getCommentRows.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n        this.onGetAllCommentsSuccess = this.onGetAllCommentsSuccess.bind(this);\r\n        this.onGetAllCommentsError = this.onGetAllCommentsError.bind(this);\r\n        this.onAddCommentSuccess = this.onAddCommentSuccess.bind(this);\r\n        this.onAddCommentError = this.onAddCommentError.bind(this);\r\n\r\n        CommentDB.GetObjectComments(this.state.parentId, this.onGetAllCommentsSuccess, this.onGetAllCommentsError)\r\n\r\n        this.commentInput = React.createRef();\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        // console.log(\"Getting All Comments for \" + this.state.parentId);\r\n       // CommentDB.GetObjectComments(this.state.parentId, this.onGetAllCommentsSuccess, this.onGetAllCommentsError)\r\n        //this.props.getAllComments(this.state.parentId, this.onGetAllCommentsSuccess, this.onGetAllCommentsError)\r\n    }\r\n\r\n    onGetAllCommentsSuccess(comments) {\r\n        //this.state.comments = comments;\r\n        //this.setState(this.state);\r\n        this.setState({comments: comments});\r\n    }\r\n\r\n    onGetAllCommentsError(error) {\r\n\r\n    }\r\n\r\n    onAddCommentSuccess(response) {\r\n      this.commentInput.current.value = \"\";\r\n\r\n        CommentDB.GetObjectComments(this.state.parentId, this.onGetAllCommentsSuccess, this.onGetAllCommentsError);\r\n        // this.props.getAllComments(this.state.parentId, this.onGetAllCommentsSuccess, this.onGetAllCommentsError)\r\n    }\r\n\r\n    onAddCommentError(error) {\r\n        \r\n    }\r\n\r\n    handleKeyPress(e) {\r\n        if (e.key === \"Enter\") {\r\n            const commentText = e.target.value;     \r\n            // console.log(commentText);\r\n            this.props.addComment(this.props.parentId, commentText, this.onAddCommentSuccess, this.onAddCommentError);\r\n            // var newComment = { text: event.target.value };\r\n            // this.state.allTasks.push(newTask);\r\n            // this.state.openCount ++ ;\r\n            // this.setState(this.state);\r\n          }\r\n    }\r\n\r\n    getUserImage(comment){\r\n        const image = comment.get('createdByUserImage');\r\n        if(image == null) {\r\n            return \"./images/avatar-placeholder.gif\";\r\n        }\r\n        else {\r\n            return image;\r\n        }\r\n    }\r\n\r\n    getCommentRows(comments) {\r\n        if(comments === null) {\r\n            return null;\r\n        }\r\n        else {\r\n            const commentRows = comments.map((comment,index) =>\r\n                <Row className=\"Comment mt-4 my-2 mx-0\" key={index}>                                            \r\n                    <Col lg={2} sm={2} xs={2} className=\"p-0\">\r\n                        <img className=\"rounded-circle avatar\" src={this.getUserImage(comment)} alt=\"Avatar\"></img>\r\n                    </Col>\r\n                    <Col lg={10} sm={10} xs={10} className=\"pl-0\">\r\n                        <p className=\"font-weight-bold m-0\">{comment.get('createdByUserName')}</p>\r\n                        <p>{comment.get('text')}</p>\r\n                    </Col>\r\n                </Row>\r\n            );\r\n            return commentRows;\r\n        }\r\n    }\r\n\r\n    render () {\r\n        const comments = this.state.comments;\r\n        \r\n\r\n       return (\r\n        <div className=\"Comments\">\r\n            <h6>Comments:</h6>\r\n            {this.getCommentRows(comments)}\r\n            <Form.Control as=\"textarea\" rows=\"3\" ref={this.commentInput} placeholder=\"Add a comment\" className=\"mt-4\" onKeyPress={this.handleKeyPress}/>                   \r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Comments;","import CommentDB from '../components/CommentDB';\nvar Parse = require('parse');\n\nInitialize();\n\nfunction Initialize() {\n  Parse.serverURL = 'https://parseapi.back4app.com'; // This is your Server URL\n  Parse.initialize(\n    'EjBHB6eHkPYe1zSnuvjLgLnAcimFgedDdkTQKKMp', // This is your Application ID\n    'x2qBBi1Ms1YMtws1NreUEgGsmFrrx13zuyZcxLRR' // This is your Javascript key\n  );\n}\n\nconst IssueDB = {\n  GetIssue: function GetIssue() {\n    const Issue = Parse.Object.extend('Issue');\n    return new Issue();\n  },\n\n  CreateIssue: function CreateIssue(newIssue, onSuccess, onError){\n    newIssue.set('createdBy', Parse.User.current());\n    newIssue.set('comments', null);\n    newIssue.set('status', 'open');\n\n    newIssue.save().then(\n      (result) => {\n        const id = result.id;\n        onSuccess(id, result);\n        // console.log('Issue created', result);\n      },\n      (error) => {\n        onError(error);\n        // console.error('Error while creating Issue: ', error);\n      }\n    );\n  },\n\n  GetAllIssues: function GetAllIssues(sortByPriority, onSuccess, onError) {\n    const Issue = Parse.Object.extend('Issue');\n    const query = new Parse.Query(Issue);\n    if (sortByPriority === true) {\n      query.descending(\"priority\");\n      query.addDescending(\"updatedAt\");\n    } else {\n      query.descending(\"updatedAt\");\n    }\n\n    query.find().then((results) => {\n      // console.log('Issues found', results);\n      onSuccess(results);\n    }, (error) => {\n      onError(error);\n      // console.error('Error while fetching Issues', error);\n    });\n  },\n\n  UpdateIssue: function UpdateIssue(issueId, updatedIssue, onSuccess, onError) {\n    const Issue = Parse.Object.extend('Issue');\n    const query = new Parse.Query(Issue);\n    // here you put the objectId that you want to update\n    query.get(issueId).then((object) => {\n      object.set('createdBy', Parse.User.current());\n      object.set('title', updatedIssue.get('title'));\n      object.set('details', updatedIssue.get('details'));\n      object.set('image', updatedIssue.get('image'));\n      object.set('priority', updatedIssue.get('priority'));\n      object.set('status', updatedIssue.get('status'));\n      object.save().then((response) => {\n        onSuccess(response);\n        // console.log('Updated Issue', response);\n      }, (error) => {\n        onError(error);\n        // console.error('Error while updating Issue', error);\n      });\n    });\n  },\n\n  GetIssueComments: function GetIssueComments(issueId, onSucces, onError) {\n    const Issue = Parse.Object.extend('Issue');\n    const query = new Parse.Query(Issue);\n    query.get(issueId).then((results) => {\n      const comments = results.get(\"comments\")\n      onSucces(comments);\n      // console.log('Comments found', comments);\n    }, (error) => {\n      onError(error)\n      // console.error('Error while fetching comments', error);\n    });\n  },\n\n  CommentIssue: function CommentIssue(issueId, commentText, onSuccess, onError) {\n    const Issue = Parse.Object.extend('Issue');\n    const query = new Parse.Query(Issue);\n    // here you put the objectId that you want to update\n    query.get(issueId).then((object) => {\n      CommentDB.AddCommentToObject(object, commentText);\n      object.save().then((response) => {\n        onSuccess(response);\n        // console.log('Updated Issue', response);\n      }, (error) => {\n        onError(error);\n        // console.error('Error while updating Issue', error);\n      });\n    });\n  },\n\n  DeleteIssue: function DeleteIssue(issueId, onSuccess, onError) {\n    const Issue = Parse.Object.extend('Issue');\n    const query = new Parse.Query(Issue);\n    query.get(issueId).then((object) => {\n      object.destroy().then((response) => {\n        onSuccess(response);\n        // console.log('Deleted Issue', response);\n      }, (error) => {\n        // console.error('Error while deleting Issue', error);\n      });\n    });\n  }\n}\n\nexport default IssueDB;\n","import React from 'react'\r\nimport Accordion from 'react-bootstrap/Accordion'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Comments from '../components/Comments'\r\nimport IssueDB from '../components/IssueDB';\r\nimport ImageHandler from '../components/ImageHandler';\r\n\r\n\r\nclass IssuesAccordion extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeCardId: null\r\n        }\r\n\r\n        this.getPriorityIcon = this.getPriorityIcon.bind(this);\r\n        this.handleComment = this.addCommentHanlder.bind(this);\r\n        this.getAllComments = this.getAllComments.bind(this);\r\n        this.handleUpdateClick = this.handleUpdateClick.bind(this);\r\n        this.handleDeleteClick = this.handleDeleteClick.bind(this);\r\n        this.handleAccordionToggle = this.handleAccordionToggle.bind(this);\r\n        this.getToggleClass = this.getToggleClass.bind(this);\r\n    }\r\n\r\n    getPriorityIcon(priority) {\r\n        if (priority === \"3\") {\r\n            return \"exclamation\";\r\n        } else if (priority === \"2\") {\r\n            return \"info\";\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    getPriorityString(priority) {\r\n        if (priority === \"3\") {\r\n            return \"Urgent\";\r\n        } else if (priority === \"2\") {\r\n            return \"Important\";\r\n        } else {\r\n            return \"Normal\";\r\n        }   \r\n    }\r\n    getCardImage(imageId) {\r\n        if(imageId === \"\") {\r\n            return \"./images/placeholder-square.jpg\";\r\n        }\r\n        else {\r\n            return ImageHandler.GetImageUrl(imageId);\r\n        }\r\n    }\r\n\r\n    getAllComments(issueId, onGetAllCommentsSuccess, onGetAllCommentsError) {\r\n        IssueDB.GetIssueComments(issueId, onGetAllCommentsSuccess, onGetAllCommentsError)\r\n    }\r\n\r\n    addCommentHanlder (issueId, commentText, onAddCommentSuccess, onAddCommentError) {\r\n        IssueDB.CommentIssue(issueId, commentText, onAddCommentSuccess, onAddCommentError);\r\n    }\r\n\r\n    handleUpdateClick(e, issue) {\r\n        this.props.openModal(e, issue);\r\n    }\r\n\r\n    handleDeleteClick (issue) {\r\n        this.props.deleteIssue(issue);\r\n    }\r\n\r\n    getToggleClass(issue) { //Presentation logic\r\n        if(issue.id === this.state.activeCardId) { //User triggered re-rendering\r\n            return \"active\";\r\n        }\r\n    }\r\n\r\n    handleAccordionToggle(issue) { //Business logic\r\n        let activeCardId;\r\n        if(issue.id !== this.state.activeCardId) { //First click on card toggle\r\n            activeCardId = issue.id;\r\n        }\r\n        else {                                   //Second click on card toggle\r\n            activeCardId = null; \r\n        }\r\n            this.setState({activeCardId: activeCardId}); //Re-render - getToggleClass will be be triggered again\r\n    }\r\n\r\n    render() {\r\n        const issues = this.props.records;\r\n        const issueCards = issues.map((issue) => \r\n            \r\n                                        <Card key={issue.id}>\r\n                                            <Accordion.Toggle as={Card.Header} eventKey={issue.id} className={this.getToggleClass(issue)} onClick={(e)=>{this.handleAccordionToggle(issue)}}>\r\n                                                {issue.get(\"title\")}{Accordion.Toggle.eventKey}\r\n                                                <i className={\"fas fa-\" + this.getPriorityIcon(issue.get(\"priority\")) + \"-circle float-right\"}></i>\r\n                                            </Accordion.Toggle>\r\n                                            <Accordion.Collapse eventKey={issue.id}>\r\n                                                <Card.Body>\r\n                                                    <Row>\r\n                                                        <Col className=\"issue-box\" lg={6}>\r\n                                                            <Row className=\"h-100\">\r\n                                                                <Col lg={4}>\r\n                                                                    <Card.Img className=\"thumbnail\" src={this.getCardImage(issue.get(\"image\"))}/>\r\n                                                                </Col>\r\n                                                                <Col lg={8}>                    \r\n                                                                    <Card.Text>\r\n                                                                        <li className=\"list-group-item\"><span className=\"font-weight-bold\">Details: </span>{issue.get(\"details\")}</li>\r\n                                                                        <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Priority: </span>{this.getPriorityString(issue.get(\"priority\"))}</li>\r\n                                                                        <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Status: </span>{issue.get(\"status\")}</li>\r\n                                                                    </Card.Text>\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Col>\r\n                                                        <Col lg={4}>\r\n                                                            <Row>\r\n                                                                <Col>\r\n                                                                    <Comments addComment={this.addCommentHanlder} parentId={issue.id}/>\r\n                                                                    {/* {this.getIssueComments(issue)} */}\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Col>\r\n                                                        <Col lg={2} className=\"p-0 d-flex align-items-end justify-content-end pt-3\">\r\n                                                            <Row className=\"w-100 mx-0 text-center\">\r\n                                                                <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\r\n                                                                    <Button variant=\"outline-dark\" className=\"m-0 responsive-btn\" onClick={(e)=>{this.handleUpdateClick(e, issue)}}>Update</Button>\r\n                                                                </Col>\r\n                                                                <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\r\n                                                                    <Button variant=\"danger\" className=\"m-0 responsive-btn\" onClick={(e)=>{this.handleDeleteClick(issue)}}>Delete</Button>\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Col>\r\n                                                    </Row>                                                           \r\n                                                </Card.Body>\r\n                                            </Accordion.Collapse>\r\n                                        </Card>     \r\n                                    );\r\n\r\n        return (\r\n           <div className=\"IssuesAccordion\">\r\n               <Accordion>\r\n                   {issueCards}\r\n                </Accordion>\r\n            </div>\r\n            );\r\n        }\r\n    }\r\n\r\n export default IssuesAccordion;","import React from 'react'\r\nimport Accordion from 'react-bootstrap/Accordion'\r\n// import Card from 'react-bootstrap/Card'\r\n// import Row from 'react-bootstrap/Row'\r\n// import Col from 'react-bootstrap/Col'\r\n// import Form from 'react-bootstrap/Form'\r\n// import Button from 'react-bootstrap/Button'\r\n\r\nclass DashboardIssuesAccordion extends React.Component {\r\n    \r\n    render () {\r\n        // const issues = this.props.records;\r\n        //  const priority = (\r\n        //                     issue.priority == \"important\"? \"star\" : \"exclamation\"\r\n        //                  );\r\n        // const issueCards = issues.map(issue =>\r\n        //     <Card>\r\n        //         <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\r\n        //         {issue.title}\r\n        //         <i className={\"fas fa-\" + issue.priority  + \"-circle float-right\"}></i>\r\n        //         </Accordion.Toggle>\r\n        //         <Accordion.Collapse eventKey=\"0\">\r\n        //             <Card.Body>\r\n        //                 <Row>\r\n        //                     <Col>\r\n        //                         <Row>\r\n        //                             <Col lg={4}>\r\n        //                                 <Card.Img src={issue.image}/>\r\n        //                             </Col>\r\n        //                             <Col lg={8} className=\"pl-0\">                    \r\n        //                                 <Card.Text>\r\n        //                                     <li className=\"text-left list-group-item mobile-center\"><span className=\"font-weight-bold\">Details: </span>{issue.details}</li>\r\n        //                                 </Card.Text>\r\n        //                             </Col>\r\n        //                         </Row>\r\n        //                     </Col>\r\n        //                 </Row>                             \r\n        //             </Card.Body>\r\n        //         </Accordion.Collapse>\r\n        //     </Card>\r\n        // )\r\n\r\n       \r\n    \r\n        return (\r\n            <div className=\"DashboardNewIssuesAccordion\">\r\n                    <Accordion>\r\n                        {/* {issueCards} */}\r\n                        {/* <Card>\r\n                            <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\r\n                            {issue.title}\r\n                            <i className={\"fas fa-\" + priority  + \"-circle float-right\"}></i>\r\n                            </Accordion.Toggle>\r\n                            <Accordion.Collapse eventKey=\"0\">\r\n                                <Card.Body>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Row>\r\n                                                <Col lg={4}>\r\n                                                    <Card.Img src={issue.image}/>\r\n                                                </Col>\r\n                                                <Col lg={8} className=\"pl-0\">                    \r\n                                                    <Card.Text>\r\n                                                        <li className=\"text-left list-group-item mobile-center\"><span className=\"font-weight-bold\">Details: </span>{issue.details}</li>\r\n                                                    </Card.Text>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Col>\r\n                                    </Row>                             \r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>      */}\r\n                </Accordion>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DashboardIssuesAccordion;","import React from 'react'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport ImageHandler from '../components/ImageHandler';\n\nclass TenantsAccordion extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeCardId: null\n        }\n\n        this.handleUpdateClick = this.handleUpdateClick.bind(this);\n        this.handleDeleteClick = this.handleDeleteClick.bind(this);\n        this.handleAccordionToggle = this.handleAccordionToggle.bind(this);\n        this.getToggleClass = this.getToggleClass.bind(this);\n    }\n\n    getCardImage(imageId) {\n        if(imageId === \"\") {\n            return \"./images/placeholder-square.jpg\";\n        }\n        else {\n            return ImageHandler.GetImageUrl(imageId);\n        }\n    }\n\n    handleUpdateClick(e, user) {\n        this.props.openModal(e, user);\n    }\n\n    handleDeleteClick (user) {\n        this.props.deleteUser(user);\n    }\n\n    getToggleClass(user) { //Presentation logic\n        if(user.id === this.state.activeCardId) { //User triggered re-rendering\n            return \"active\";\n        }\n    }\n\n    handleAccordionToggle(user) { //Business logic\n        let activeCardId;\n        if(user.id !== this.state.activeCardId) { //First click on card toggle\n            activeCardId = user.id;\n        }\n        else {                                   //Second click on card toggle\n            activeCardId = null; \n        }\n            this.setState({activeCardId: activeCardId}); //Re-render - getToggleClass will be be triggered again\n    }\n\n\n    render() {\n        const users = this.props.records;\n        const userCards = users.map((user) => \n            \n                                        <Card key={user.id}>\n                                            <Accordion.Toggle as={Card.Header} eventKey={user.id} className={this.getToggleClass(user)} onClick={(e)=>{this.handleAccordionToggle(user)}}>\n                                                {user.get(\"username\")}{Accordion.Toggle.eventKey}\n                                            </Accordion.Toggle>\n                                            <Accordion.Collapse eventKey={user.id}>\n                                                <Card.Body>\n                                                    <Row>\n                                                        <Col lg={10} className=\"user-box\">\n                                                            <Row className=\"h-100\">\n                                                                <Col lg={4}>\n                                                                    <Card.Img className=\"thumbnail\" src={this.getCardImage(user.get(\"userImage\"))}/>\n                                                                </Col>\n                                                                <Col lg={8}>                    \n                                                                    <Card.Text>\n                                                                        <li className=\"list-group-item\"><span className=\"font-weight-bold\">Name: </span>{user.get(\"username\")}</li>\n                                                                        <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Email: </span>{user.get(\"email\")}</li>\n                                                                        <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Apartment: </span>{user.get(\"apartment\")}</li>\n                                                                    </Card.Text>\n                                                                </Col>\n                                                            </Row>\n                                                        </Col>\n                                                        \n                                                        <Col lg={2} className=\"p-0 d-flex align-items-end justify-content-end pt-3\">\n                                                            <Row className=\"w-100 mx-0 text-center\">\n                                                                <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n                                                                    <Button variant=\"outline-dark\" className=\"m-0 responsive-btn\" onClick={(e)=>{this.handleUpdateClick(e, user)}}>Update</Button>\n                                                                </Col>\n                                                                <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n                                                                    <Button variant=\"danger\" className=\"m-0 responsive-btn\" onClick={(e)=>{this.handleDeleteClick(user)}}>Delete</Button>\n                                                                </Col>\n                                                            </Row>\n                                                        </Col>\n                                                    </Row>                                                           \n                                                </Card.Body>\n                                            </Accordion.Collapse>\n                                        </Card>     \n                                    );\n\n        return (\n        //    <div className=\"TenantsAccordion\">\n        //        <Accordion>\n        //             <Card>\n        //                 <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\n        //                 Dynamic Tenant Name\n        //                 </Accordion.Toggle>\n        //                 <Accordion.Collapse eventKey=\"0\">\n        //                     <Card.Body>\n        //                         <Row>\n        //                             <Col lg={10} className=\"pb-1\">\n        //                                 <Row>\n        //                                     <Col lg={4}>\n        //                                         <Card.Img src=\"https://upload.wikimedia.org/wikipedia/commons/9/92/Backyardpool.jpg\"/>\n        //                                     </Col>\n        //                                     <Col lg={8}>                    \n        //                                         <Card.Text>\n        //                                             <li className=\"list-group-item\"><span className=\"font-weight-bold\">Name: </span>**Dynamic Tenant Name**</li>\n        //                                             <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Email: </span>**Dynamic Tenant Email**</li>\n        //                                             <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Apt: </span>**Dynamic Apt**</li>\n        //                                         </Card.Text>\n        //                                     </Col>\n        //                                 </Row>\n        //                             </Col>\n        //                             <Col lg={2} className=\"p-0 d-flex align-items-end justify-content-end pt-3\">\n        //                                 <Row className=\"w-100 mx-0 text-center\">\n        //                                     <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n        //                                         <Button variant=\"outline-dark\" className=\"m-0 responsive-btn\">Update</Button>\n        //                                     </Col>\n        //                                     <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n        //                                         <Button variant=\"danger\" className=\"m-0 responsive-btn\">Delete</Button>\n        //                                     </Col>\n        //                                 </Row>\n        //                                 {/* <Button variant=\"outline-dark\" className=\"mx-2 align-bottom\">Update</Button>\n        //                                 <Button variant=\"danger\" className=\"mx-2  align-bottom\">Delete</Button> */}\n        //                             </Col>\n        //                         </Row>\n        //                     </Card.Body>\n        //                 </Accordion.Collapse>\n        //             </Card>\n        //         </Accordion>\n        //    </div>\n            <div className=\"TenantsAccordion\">\n                <Accordion>\n                    {userCards}\n                </Accordion>\n            </div>\n        );\n    }\n}\n\nexport default TenantsAccordion;","import React from 'react'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport Comments from '../components/Comments'\nimport MessageDB from '../components/MessageDB';\nimport ImageHandler from '../components/ImageHandler';\n\nclass MessagesAccordion extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeCardId: null\n        }\n\n        this.getPriorityIcon = this.getPriorityIcon.bind(this);\n        this.handleComment = this.addCommentHanlder.bind(this);\n        this.getAllComments = this.getAllComments.bind(this);\n        this.handleUpdateClick = this.handleUpdateClick.bind(this);\n        this.handleDeleteClick = this.handleDeleteClick.bind(this);\n        this.handleAccordionToggle = this.handleAccordionToggle.bind(this);\n        this.getToggleClass = this.getToggleClass.bind(this);\n    }\n\n    getPriorityIcon(priority) {\n        if (priority === \"2\") {\n            return \"exclamation\";\n        } else if (priority === \"1\") {\n            return \"info\";\n        } else {\n            return \"\";\n        }\n    }\n\n    getPriorityString(priority) {\n        if (priority === \"1\") {\n            return \"Information\";\n        }\n        else if (priority === \"2\") {\n            return \"Important\";\n        }\n    }\n\n    getCardImage(imageId) {\n        if(imageId === \"\") {\n            return \"./images/placeholder-square.jpg\";\n        }\n        else {\n            return ImageHandler.GetImageUrl(imageId);\n        }\n    }\n\n    getAllComments(messageId, onGetAllCommentsSuccess, onGetAllCommentsError) {\n        MessageDB.GetMessageComments(messageId, onGetAllCommentsSuccess, onGetAllCommentsError)\n    }\n\n    addCommentHanlder (messageId, commentText, onAddCommentSuccess, onAddCommentError) {\n        MessageDB.CommentMessage(messageId, commentText, onAddCommentSuccess, onAddCommentError);\n    }\n\n    handleUpdateClick(e, message) {\n        this.props.openModal(e, message);\n    }\n\n    handleDeleteClick (message) {\n        this.props.deleteMessage(message);\n    }\n\n    getToggleClass(message) { //Presentation logic\n        if(message.id === this.state.activeCardId) { //User triggered re-rendering\n            return \"active\";\n        }\n    }\n\n    handleAccordionToggle(message) { //Business logic\n        let activeCardId;\n        if(message.id !== this.state.activeCardId) { //First click on card toggle\n            activeCardId = message.id;\n        }\n        else {                                   //Second click on card toggle\n            activeCardId = null; \n        }\n            this.setState({activeCardId: activeCardId}); //Re-render - getToggleClass will be be triggered again\n    }\n\n\n    render() {\n        const messages = this.props.records;\n        const messageCards = messages.map((message) => \n            \n                                        <Card key={message.id}>\n                                            <Accordion.Toggle as={Card.Header} eventKey={message.id} className={this.getToggleClass(message)} onClick={(e)=>{this.handleAccordionToggle(message)}}>\n                                                {message.get(\"title\")}{Accordion.Toggle.eventKey}\n                                                <i className={\"fas fa-\" + this.getPriorityIcon(message.get(\"priority\")) + \"-circle float-right\"}></i>\n                                            </Accordion.Toggle>\n                                            <Accordion.Collapse eventKey={message.id}>\n                                                <Card.Body>\n                                                    <Row>\n                                                        <Col className=\"message-box\" lg={6}>\n                                                            <Row className=\"h-100\">\n                                                                <Col lg={4}>\n                                                                    <Card.Img className=\"thumbnail\" src={this.getCardImage(message.get(\"image\"))}/>\n                                                                </Col>\n                                                                <Col lg={8}>                    \n                                                                    <Card.Text>\n                                                                        <li className=\"list-group-item\"><span className=\"font-weight-bold\">Details: </span>{message.get(\"details\")}</li>\n                                                                        <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Priority: </span>{this.getPriorityString(message.get(\"priority\"))}</li>\n                                                                    </Card.Text>\n                                                                </Col>\n                                                            </Row>\n                                                        </Col>\n                                                        <Col lg={4}>\n                                                            <Row>\n                                                                <Col>\n                                                                    <Comments addComment={this.addCommentHanlder} parentId={message.id}/>\n                                                                    {/* {this.getMessageComments(message)} */}\n                                                                </Col>\n                                                            </Row>\n                                                        </Col>\n                                                        <Col lg={2} className=\"p-0 d-flex align-items-end justify-content-end pt-3\">\n                                                            <Row className=\"w-100 mx-0 text-center\">\n                                                                <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n                                                                    <Button variant=\"outline-dark\" className=\"m-0 responsive-btn\" onClick={(e)=>{this.handleUpdateClick(e, message)}}>Update</Button>\n                                                                </Col>\n                                                                <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n                                                                    <Button variant=\"danger\" className=\"m-0 responsive-btn\" onClick={(e)=>{this.handleDeleteClick(message)}}>Delete</Button>\n                                                                </Col>\n                                                            </Row>\n                                                        </Col>\n                                                    </Row>                                                           \n                                                </Card.Body>\n                                            </Accordion.Collapse>\n                                        </Card>     \n                                    );\n\n        return (\n           <div className=\"MessagesAccordion\">\n               <Accordion>\n                   {messageCards}\n                </Accordion>\n            </div>\n            );\n        }\n\n    //     return (\n    //        <div className=\"MessagesAccordion\">\n    //            <Accordion>\n    //                 <Card>\n    //                     <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\n    //                     Dynamic Message Title With Dynamic Icon 2\n    //                     <i className=\"fas fa-exclamation-circle float-right\"></i>\n    //                     </Accordion.Toggle>\n    //                     <Accordion.Collapse eventKey=\"0\">\n    //                         <Card.Body>\n    //                             <Row>\n    //                                 <Col className=\"Message-box\" lg={6}>\n    //                                     <Row>\n    //                                         <Col lg={4}>\n    //                                             <Card.Img src=\"https://upload.wikimedia.org/wikipedia/commons/9/92/Backyardpool.jpg\"/>\n    //                                         </Col>\n    //                                         <Col lg={8}>                    \n    //                                             <Card.Text>\n    //                                                 <li className=\"list-group-item\"><span className=\"font-weight-bold\">Details: </span>**Dynamic Content for message details**</li>\n    //                                                 <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Priority: </span>**Dynamic Content for message priority**</li>\n    //                                             </Card.Text>\n    //                                         </Col>\n    //                                     </Row>\n    //                                 </Col>\n    //                                 <Col lg={4}>\n    //                                     <Row>\n    //                                         <Col>\n    //                                            <Comments />\n    //                                         </Col>\n    //                                     </Row>\n    //                                 </Col>\n    //                                 <Col lg={2} className=\"p-0 d-flex align-items-end justify-content-end pt-3\">\n    //                                     <Row className=\"w-100 mx-0 text-center\">\n    //                                         <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n    //                                             <Button variant=\"outline-dark\" className=\"m-0 responsive-btn\">Update</Button>\n    //                                         </Col>\n    //                                         <Col lg={6} className=\"px-0 responsive-btn-wrapper\">\n    //                                             <Button variant=\"danger\" className=\"m-0 responsive-btn\">Delete</Button>\n    //                                         </Col>\n    //                                     </Row>\n    //                                 </Col>\n    //                             </Row>                                            \n    //                         </Card.Body>\n    //                     </Accordion.Collapse>\n    //                 </Card>     \n    //             </Accordion>\n    //        </div>\n    //     );\n    // }\n}\n\nexport default MessagesAccordion;","import React from 'react'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n// import Form from 'react-bootstrap/Form'\n// import Button from 'react-bootstrap/Button'\n\nclass DashboardNewMessagesAccordion extends React.Component {\n   \n    render() {\n        return (\n           <div className=\"DashboardNewMessagesAccordion\">\n               <Accordion>\n                    <Card>\n                        <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\n                        Dynamic Message Title With Dynamic Icon\n                        <i className=\"fas fa-info-circle float-right\"></i>\n                        </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"0\">\n                            <Card.Body>\n                                <Row>\n                                    <Col>\n                                        <Row>\n                                            <Col lg={4}>\n                                                <Card.Img src=\"https://upload.wikimedia.org/wikipedia/commons/9/92/Backyardpool.jpg\"/>\n                                            </Col>\n                                            <Col lg={8}>                    \n                                                <Card.Text>\n                                                    <li className=\"list-group-item\"><span className=\"font-weight-bold\">Details: </span>**Dynamic Content for message details**</li>\n                                                    <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Priority: </span>**Dynamic Content for message details**</li>\n                                                </Card.Text>\n                                            </Col>\n                                        </Row>\n                                    </Col>\n                                </Row>\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </Card>                     \n                    <Card>\n                        <Accordion.Toggle as={Card.Header} eventKey=\"1\" className=\"font-weight-bold\">\n                        Dynamic Message Title With Dynamic Icon 2\n                        <i className=\"fas fa-exclamation-circle float-right\"></i>\n                        </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"1\">\n                            <Card.Body>\n                                <Row>\n                                    <Col>\n                                        <Row>\n                                        <Col lg={4}>\n                                                <Card.Img src=\"https://upload.wikimedia.org/wikipedia/commons/9/92/Backyardpool.jpg\"/>\n                                        </Col>\n                                        <Col lg={8}>                    \n                                            <Card.Text>\n                                                <li className=\"list-group-item\"><span className=\"font-weight-bold\">Details: </span>**Dynamic Content for message details**</li>\n                                                <li className=\"list-group-item\"><span  className=\"font-weight-bold\">Priority: </span>**Dynamic Content for message details**</li>\n                                            </Card.Text>\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Row>                             \n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>     \n            </Accordion>\n        </div>\n        );\n    }\n}\n\nexport default DashboardNewMessagesAccordion;","import React from 'react'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport PieChart from 'react-minimal-pie-chart'\nimport DatePicker from \"react-datepicker\"\nimport 'react-datepicker/dist/react-datepicker.css'\n\n\nclass VotingsAccordion extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    // }    \n\n    render() {\n        const votingAccordion = (\n            <Accordion>\n                    <Card>\n                        <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\n                        <Row>\n                            <Col lg={6} className=\"mobile-center\">Dynamic Voting Title</Col>\n                            <Col lg={6} className=\"text-right mobile-center\">{this.props.votingStatus === \"results\"? <h6>Result: <span className=\"font-weight-normal\">Dynamic record result</span></h6>: null}</Col>\n                        </Row>\n                        {/* {this.props.votingStatus === \"results\"? } */}\n\n                        </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"0\">\n                            <Card.Body>\n                                <Row className=\"mx-0\">\n                                    <Col lg={this.props.votingStatus === \"results\"? 5 : 8} className=\"px-0 d-flex flex-column justify-content-between\">                    \n                                        <Row className=\"py-1 mx-0 mobile-center\">\n                                                <h6 className=\"mr-1\">Details:</h6> <span>*Dynamic Voting Details*</span>\n                                        </Row>\n                                        <Row className=\"py-1 mx-0 mobile-center\">\n                                            <Col className=\"px-0 d-flex align-items-center\">\n                                                <h6 className=\"mr-1\">{this.props.votingStatus === \"active\"? 'End Date': 'Ended'}:</h6> <span>*Date &amp; Hour*</span>\n                                            </Col>\n                                            {this.props.votingStatus === \"results\"? null:\n                                                \n                                            <Col className={this.props.userType === \"tenant\"? \"hide\" : \"px-0\"}>\n                                                <DatePicker placeholderText=\"Update End Date\" withPortal showTimeSelect\n                                                timeFormat=\"HH:mm\"\n                                                timeIntervals={30}\n                                                timeCaption=\"time\"\n                                                dateFormat=\"MMMM d, hh:mm\"/>\n                                            </Col>\n                                            }\n                                        </Row>\n                                        <Row className={this.props.votingStatus === \"results\" || this.props.userType === \"admin\" ? \"hide\" : \"py-1 mx-0 mobile-center\"}>\n                                             <Col className=\"px-0 d-flex align-items-center\">\n                                                <Form.Group as={Row} controlId=\"formPrioritySelect\" className=\"vote-form mx-0 mobile-center w-100\">\n                                                        <Form.Label column lg={3}>\n                                                            Your Vote:\n                                                        </Form.Label>\n                                                        <Col lg={5}>\n                                                            <Form.Control required as=\"select\" className=\"priority-select\">\n                                                                <option value=\"In Favor\">In Favor</option>\n                                                                <option value=\"Against\">Against</option>\n                                                            </Form.Control>\n                                                        </Col>\n                                                        <Col lg={4} className=\"text-right mobile-center\">\n                                                            <Button type=\"submit\">Submit Vote</Button>\n                                                        </Col>\n                                                    </Form.Group>\n                                            </Col>\n                                        </Row>\n                                    </Col>\n                                    <Col lg={this.props.votingStatus === \"results\"? 7 : 4}>\n                                        <Row>\n\n                                        {this.props.votingStatus === \"results\"? \n                                            <Col lg={6} className=\"py-4-mobile\">\n                                                <h6 className=\"text-center mb-3\">Results</h6>\n                                                <PieChart className=\"chart\"\n                                                    data={[\n                                                        { title: 'For', value: 80, color: '#90ee90' },\n                                                        { title: 'Against', value: 20, color: '#a2012c' },\n                                                    ]}\n                                                    />\n                                            </Col>\n                                            :null}\n                                            <Col>\n                                                <h6 className=\"text-center mb-3\">Voting Precentage</h6>\n                                                <PieChart className=\"chart\"\n                                                    data={[\n                                                        { title: 'For', value: 10, color: '#90ee90' },\n                                                        { title: 'Against', value: 15, color: '#a2012c' },\n                                                    ]}\n                                                    />\n                                            </Col>    \n                                        </Row>                                           \n                                    </Col>\n                                </Row>\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </Card>\n                </Accordion>\n        );\n\n        return (\n           <div className=\"VotingsAccordion\">\n               {votingAccordion}\n           </div>\n        );\n    }\n}\n\nexport default VotingsAccordion;","import React from 'react'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport 'react-datepicker/dist/react-datepicker.css'\n\n\nclass PendingVotingsAccordion extends React.Component {\n    \n    render() {\n        const votingAccordion = (\n            <Accordion>\n                    <Card>\n                        <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"font-weight-bold\">\n                        <Row>\n                            <Col>Dynamic Voting Title</Col>\n                        </Row>\n                        {/* {this.props.votingStatus === \"results\"? } */}\n\n                        </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"0\">\n                            <Card.Body>\n                                <Row className=\"py-1 mx-0 mobile-center\">\n                                        <Col lg={12} className=\"px-0 d-flex align-items-center\">\n                                            <Form.Group as={Row} controlId=\"formPrioritySelect\" className=\"vote-form mx-0 mobile-center w-100\">\n                                                    <Form.Label column lg={2}>\n                                                        Your Vote:\n                                                    </Form.Label>\n                                                    <Col lg={5}>\n                                                        <Form.Control required as=\"select\" className=\"priority-select\">\n                                                            <option value=\"In Favor\">In Favor</option>\n                                                            <option value=\"Against\">Against</option>\n                                                        </Form.Control>\n                                                    </Col>\n                                                    <Col lg={5} className=\"mobile-center text-left\">\n                                                        <Button type=\"submit\" className=\"ml-2 responsive-btn\">Submit Vote</Button>\n                                                    </Col>\n                                                </Form.Group>\n                                        </Col>\n                                </Row>\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </Card>\n                </Accordion>\n        );\n\n        return (\n           <div className=\"PendingVotingsAccordion\">\n               {votingAccordion}\n           </div>\n        );\n    }\n}\n\nexport default PendingVotingsAccordion;","import React from 'react'\n// import PaginationNav from '../components/PaginationNav';\nimport IssuesAccordion from '../components/IssuesAccordion';\nimport DashboardIssuesAccordion from '../components/DashboardIssuesAccordion';\nimport TenantsAccordion from '../components/TenantsAccordion';\nimport MessagesAccordion from '../components/MessagesAccordion';\nimport DashboardNewMessagesAccordion from '../components/DashboardNewMessagesAccordion';\nimport VotingsAccordion from '../components/VotingsAccordion';\nimport PendingVotingsAccordion from '../components/PendingVotingsAccordion';\n\n\nclass Records extends React.Component {\n    \n    render () {\n        // console.log(\"rendering records \" + this.props.records);\n        const accordion = (\n                    <div>\n                        {\n                            (() => {\n                            switch(this.props.recordType) {\n                                case 'issues':\n                                return <IssuesAccordion records={this.props.records} openModal={this.props.openModal} deleteIssue={this.props.deleteIssue}/>;\n                                case 'new issues':\n                                return <DashboardIssuesAccordion />;\n                                case 'overdue issues':\n                                return <DashboardIssuesAccordion />;\n                                case 'new resolved issues':\n                                return <DashboardIssuesAccordion />;\n                                case 'tenants':\n                                return <TenantsAccordion records={this.props.records} openModal={this.props.openModal} deleteUser={this.props.deleteUser} />;\n                                case 'messages':\n                                return <MessagesAccordion records={this.props.records} openModal={this.props.openModal} deleteMessage={this.props.deleteMessage} />;\n                                case 'new messages':\n                                return <DashboardNewMessagesAccordion />;\n                                case 'active votings':\n                                return <VotingsAccordion votingStatus=\"active\" userType=\"tenant\"/>;\n                                case 'pending votings':\n                                return <PendingVotingsAccordion />;\n                                case 'voting results':\n                                return <VotingsAccordion votingStatus=\"results\"/>;\n                                default:\n                                return null;\n                            }\n                            })()\n                        }\n                  </div>\n            \n        );\n\n        return (\n            //Add a switch for different record types / module name this.props.recordType == \"new issues\" etc \n            <div className=\"Records\">\n                {accordion}\n            </div>\n        );     \n    }\n}\n\nclass NoRecords extends React.Component {\n   \n    render() {\n\n        return (\n            <p className=\"noRecordsMsg\">There are no {this.props.recordType}. :)</p>\n        );\n    }\n}\nclass RecordsDisplay extends React.Component {\n  \n    render() {\n        // console.log(\"rendering RecordsDisplay \" + this.props.records);\n        return (\n            this.props.hasRecords? \n                <div className=\"recordsDisplay\">\n                    <Records recordType={this.props.recordType} records={this.props.records} openModal={this.props.openModal} deleteIssue={this.props.deleteIssue} deleteMessage={this.props.deleteMessage} deleteUser={this.props.deleteUser}/>\n                    {/* <PaginationNav />  */}\n                    {/* which class should manage the activePage and totalItemsCount? */}\n                    {/* <PaginationNav activePage={this.state.activePage} totalItemsCount={this.state.totalItemsCount}/> */}\n                </div>\n            : <NoRecords recordType={this.props.recordType}/>\n        );\n    }\n}\n\nexport default RecordsDisplay;","import React from 'react';\nimport MessageDB from '../components/MessageDB';\nimport ImageHandler from '../components/ImageHandler'\nimport InnerNavbar from '../components/InnerNavbar'\nimport RecordsDisplay from '../components/RecordsDisplay'\nimport { Container, Row, Col, Button, Modal, Form, Image } from 'react-bootstrap'\nimport Alert from 'react-bootstrap/Alert'\n\n\n\nclass Messages extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        messages: null, //Get from Parse DB\n        hasRecords: null,\n        filter: {\n            inputFilter:\"\",\n            selectFilter:\"123\"\n        },\n        filteredMessages: null, \n        showModal: false,\n        currentMessageId: null,\n        currentMessageTitle: null,\n        currentMessageDetails: null,\n        currentMessagePriority: null,\n        currentMessageImage: null,\n        modalTrigger: null,\n        showStatusSelect: \"hide\",\n        validated: false,\n        messageError: false,\n        errorMsg:\"\",\n        sortByPriority: false\n      }\n\n      this.onGetAllMessagesSuccess = this.onGetAllMessagesSuccess.bind(this);\n      this.onGetAllMessagesError = this.onGetAllMessagesError.bind(this);\n      this.filterMessages = this.filterMessages.bind(this);\n      this.onCreateMessageSuccess = this.onCreateMessageSuccess.bind(this);\n      this.onCreateMessageError = this.onCreateMessageError.bind(this);\n      this.onImageUploadSuccess = this.onImageUploadSuccess.bind(this);\n      this.onImageUploadError = this.onImageUploadError.bind(this);\n      this.onImageUploadProgress = this.onImageUploadProgress.bind(this);\n      this.openModal = this.openModal.bind(this);\n      this.closeModal = this.closeModal.bind(this);\n      this.createMessage = this.createMessage.bind(this);\n      this.updateMessage = this.updateMessage.bind(this);\n      this.onDeleteMessageError = this.onDeleteMessageError.bind(this);\n      this.onDeleteMessageSuccess = this.onDeleteMessageSuccess.bind(this);\n      this.deleteMessage = this.deleteMessage.bind(this);\n      this.imgChange = this.imgChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n      this.handleFilterChange = this.handleFilterChange.bind(this);\n      this.handleSortChange = this.handleSortChange.bind(this);\n\n      this.titleInput = React.createRef();\n      this.detailsInput = React.createRef();\n      this.priorityInput = React.createRef();\n      this.imgInput = React.createRef();\n    }\n    \n    componentDidMount(){\n        MessageDB.GetAllMessages(this.state.sortByPriority, this.onGetAllMessagesSuccess, this.onGetAllMessagesError);\n    }\n\n    checkCurrentMessage(filter, currentMessageTitle, currentMessageDetails, currentMessagePriority) { //Check if current message matches filter\n        if (\n                // filter by select\n                (filter.selectFilter.indexOf(currentMessagePriority) > -1) && \n\n                //Filter by Input\n                (\n                    //Input filter is not empty\n                    ((filter.inputFilter !== \"\") && (currentMessageTitle.indexOf(filter.inputFilter) > -1 || currentMessageDetails.indexOf(filter.inputFilter) > -1)) ||\n                    //Input Filter is empty so accept any\n                    (filter.inputFilter === \"\")\n                )\n            ) \n        { return true; }\n        \n        else\n        { return false; }\n    }\n\n    filterMessages(filter, originalMessages, filteredMessages) {\n        // Loop through all messages keys, and add those who match the search query to matches array\n        for (var i = 0; i < originalMessages.length; i++) {\n                var currentMessageTitle = originalMessages[i].get(\"title\").toUpperCase();\n                var currentMessageDetails = originalMessages[i].get(\"details\").toUpperCase();\n                var currentMessagePriority = originalMessages[i].get(\"priority\").toUpperCase();\n\n                if (this.checkCurrentMessage(filter, currentMessageTitle, currentMessageDetails, currentMessagePriority)) {\n                    filteredMessages.push(originalMessages[i]);\n                }\n\n         }\n    }\n\n    handleFilterChange(e) {\n        var input;\n        input = e.target;\n        var inputFilter = this.state.filter.inputFilter;\n        var selectFilter = this.state.filter.selectFilter;\n        var filteredMessages = [];\n\n        if(input.tagName === \"INPUT\") {\n            inputFilter = input.value.toUpperCase();\n        }\n        else if (input.tagName === \"SELECT\") {\n            selectFilter = input.value;\n        }\n\n        const newFilter = {\n            inputFilter: inputFilter,\n            selectFilter:selectFilter\n        }\n\n        this.setState({\n            filter:newFilter\n        });  \n\n\n            this.filterMessages(newFilter, this.state.messages, filteredMessages);\n\n        this.setState({filteredMessages:filteredMessages});\n      }\n\n\n\n    handleSortChange(sortByPriority) {\n        this.setState({sortByPriority: sortByPriority});\n        MessageDB.GetAllMessages(sortByPriority, this.onGetAllMessagesSuccess, this.onGetAllMessagesError);\n\n    }\n\n\n    onImageUploadSuccess(imageId) {\n        let currentMessageImage = imageId;\n        this.setState({currentMessageImage: currentMessageImage})\n    }\n\n    onImageUploadError(error) {\n    }\n\n    onImageUploadProgress(progress) {\n        if (progress < 100) {\n            document.getElementById(\"image_progress\").innerHTML = \"Image Uploading: \" + progress + \"%\";\n        } else {\n            document.getElementById(\"image_progress\").innerHTML = \"Image Uploaded Successfully\";\n\n        }\n    }\n    imgChange(ev) {\n\n        let newMessageImg = {};\n        newMessageImg.file = ev.target.files[0];\n        if (newMessageImg.file) {\n            ImageHandler.UploadImage(newMessageImg.file, this.onImageUploadProgress, this.onImageUploadSuccess, this.onImageUploadError);\n\n        } else {\n            newMessageImg.URL = \"\";\n        }\n\n    }\n    \n    handleSubmit(e) {\n        const form = e.target;\n        this.setState({validated:true});\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (form.checkValidity() === true) {\n            if(this.state.modalTrigger === \"New Message\"){\n                this.createMessage();\n            }\n            else {\n                this.updateMessage();\n            }\n        }\n      }\n\n\n    openModal(e, message) {\n        let modalTrigger = e.target.innerHTML;\n        let showStatusSelect;\n        let currentMessageId;\n        let currentMessageTitle = \"\";\n        let currentMessageDetails = \"\";\n        let currentMessagePriority = \"\";\n        // let currentMessageStatus = \"\";\n        let currentMessageImage = \"\";\n\n        if(modalTrigger === \"Update\") {\n            modalTrigger = \"Update Message\";\n            showStatusSelect = \"show\";\n            currentMessageTitle = message.get(\"title\");\n            currentMessageDetails = message.get(\"details\");\n            currentMessagePriority = message.get(\"priority\");\n            // currentMessageStatus = message.get(\"status\");\n            currentMessageImage = message.get(\"image\");\n            currentMessageId = message.id;\n        }\n        else {\n            showStatusSelect = \"hide\";\n        }\n        this.setState({ showModal: true, showStatusSelect: showStatusSelect, modalTrigger: modalTrigger, currentMessageId: currentMessageId, currentMessageTitle: currentMessageTitle, currentMessageDetails:currentMessageDetails, currentMessagePriority: currentMessagePriority, currentMessageImage: currentMessageImage})\n    }\n\n    closeModal() {\n        this.setState({ currentMessageId: null, currentMessageImage:null, showModal: false, validated: false, messageError: false })\n    }\n\n    onCreateMessageSuccess(messageId, message) {\n        MessageDB.GetAllMessages(this.state.sortByPriority, this.onGetAllMessagesSuccess, this.onGetAllMessagesError);\n    }\n\n    onCreateMessageError(error) {\n        \n    }\n    \n    createMessage() {\n         const newMessage = MessageDB.GetMessage();\n         newMessage.set('title', this.titleInput.current.value);\n         newMessage.set('details', this.detailsInput.current.value);\n         newMessage.set('priority', this.priorityInput.current.value);\n        //  newMessage.set('status', this.statusInput.current.value);\n         newMessage.set('image', this.state.currentMessageImage);\n\n        MessageDB.CreateMessage(newMessage, this.onCreateMessageSuccess, this.onCreateMessageError)\n\n        this.closeModal();\n    }\n\n    updateMessage() {\n        const newMessage = MessageDB.GetMessage();\n        newMessage.set('title', this.titleInput.current.value);\n        newMessage.set('details', this.detailsInput.current.value);\n        newMessage.set('priority', this.priorityInput.current.value);\n        // newMessage.set('status', this.statusInput.current.value);\n        newMessage.set('image', this.state.currentMessageImage);\n\n        MessageDB.UpdateMessage(this.state.currentMessageId, newMessage, this.onCreateMessageSuccess, this.onCreateMessageError)\n        this.closeModal();\n   }\n\n   onDeleteMessageSuccess(messageId, message) {\n    MessageDB.GetAllMessages(this.state.sortByPriority, this.onGetAllMessagesSuccess, this.onGetAllMessagesError);\n    }\n\n    onDeleteMessageError(error) {\n        \n    }\n\n\n   deleteMessage(message) {\n    MessageDB.DeleteMessage(message.id, this.onDeleteMessageSuccess, this.onDeleteMessageError)\n    this.closeModal();\n}\n\n\n    onGetAllMessagesSuccess(messages) {\n        var filteredMessages = []\n        var hasRecords = false;\n        if (messages.length > 0) {\n            hasRecords = true;\n        }\n        \n        if(this.state.filter !== null) {\n            this.filterMessages(this.state.filter, messages, filteredMessages);\n        }\n\n        this.setState({messages:messages, filteredMessages:filteredMessages, hasRecords:hasRecords});\n    }\n\n    onGetAllMessagesError(error) {\n    }\n  \n    render() {\n        let recordsDisplay = null;\n        if (this.state.messages == null) {\n            //loading\n            recordsDisplay = \"Loading...\";\n        }\n        else {\n            recordsDisplay = <RecordsDisplay hasRecords={this.state.hasRecords} recordType=\"messages\" records={this.state.filteredMessages} openModal={this.openModal} deleteMessage={this.deleteMessage}/> ;\n        }\n\n        const { showModal, currentMessageImage } = this.state;\n        const currentMessageImageUrl = (currentMessageImage === \"\"? \"./images/placeholder-square.jpg\" : ImageHandler.GetImageUrl(currentMessageImage));\n        const modalAction = (\n            this.state.modalTrigger === \"New Message\" ?  <Button variant=\"primary\" type=\"submit\">Create Message</Button>\n                                                    :  <Button variant=\"primary\" type=\"submit\">Update Message</Button>\n        );\n\n      \n      return (\n                <div className=\"Messages h-100\">\n                    {/* <Navigation isLoggedIn={this.props.isLoggedIn} pageName=\"Messages\"/> */}\n\n                    <Container className=\"py-6 px-5 mobile-padding\">\n                        <InnerNavbar filterType=\"messages\" handleFilterChange={this.handleFilterChange} handleSortChange={this.handleSortChange}/>\n                        <div className=\"text-right pt-4 pb-1 mobile-center\">\n                            <Button variant=\"link\" className=\"new-btn\" onClick={this.openModal}>New Message</Button>\n                        </div>\n                        {recordsDisplay}\n                    </Container>\n                    <Modal show={showModal} onHide={this.closeModal} size=\"lg\">\n                    <Form className=\"messageModalFrm\" noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n\n                        <Modal.Header closeButton>\n                            <Modal.Title>{this.state.modalTrigger}</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <Alert variant=\"danger\" show={this.state.messageError}>\n                                {this.state.errorMsg}\n                            </Alert>\n                                <Form.Group as={Row} controlId=\"formNameTxt\">\n                                    <Form.Label column sm={2}>\n                                        Title:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control type=\"text\" ref={this.titleInput} defaultValue={this.state.currentMessageTitle} pattern=\"([a-zA-Z0-9]{1,20}\\s?){1,10}\" required/>\n                                        <Form.Control.Feedback type=\"invalid\">\n                                        </Form.Control.Feedback>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formDetailsTxt\">\n                                    <Form.Label column sm={2}>\n                                        Details:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control ref={this.detailsInput} defaultValue={this.state.currentMessageDetails} as=\"textarea\" rows=\"3\"/>\n                                        <Form.Control.Feedback type=\"invalid\">\n                                        </Form.Control.Feedback>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formPrioritySelect\">\n                                    <Form.Label column sm={2}>\n                                        Priority:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control ref={this.priorityInput} defaultValue={this.state.currentMessagePriority} as=\"select\" className=\"priority-select\" required>\n                                            <option value=\"1\">Information</option>\n                                            <option value=\"2\">Important</option>\n                                        </Form.Control>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formImgControl\" className=\"align-items-center\">\n                                    <Form.Label column sm={2}>\n                                        Image URL:\n                                    </Form.Label>\n                                    <Col sm={7}>\n                                        <div className=\"custom-file\">\n                                            <input ref={this.imgInput} type=\"file\" className=\"custom-file-input\" id=\"customFile\" accept=\"image/*\" onChange={this.imgChange}/>\n                                            <p id=\"image_progress\"></p>\n                                            <label className=\"custom-file-label\" htmlFor=\"customFile\">Choose image</label>\n                                        </div>\n                                    </Col>\n                                    <Col sm={3}>\n                                        <Image src={currentMessageImageUrl} fluid className=\"thumbnail\"/>\n                                    </Col>\n                                </Form.Group>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button variant=\"secondary\" onClick={this.closeModal}>\n                                Close\n                            </Button>\n                            {modalAction}\n                        </Modal.Footer>\n                        </Form>\n                    </Modal>\n            </div>\n        );\n\n    }\n  }   \n\n\nexport default Messages;\n","import React from 'react';\nimport UserDB from '../components/UserDB';\nimport ImageHandler from '../components/ImageHandler'\nimport InnerNavbar from '../components/InnerNavbar'\nimport RecordsDisplay from '../components/RecordsDisplay'\nimport { Container, Row, Col, Button, Modal, Form, Image } from 'react-bootstrap'\nimport Alert from 'react-bootstrap/Alert'\n\n\nclass Tenants extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        users: null, //Get from Parse DB\n        hasRecords: null,\n        filter: {\n            inputFilter:\"\",\n            //selectFilter:\"123\"\n        },\n        filteredUsers: null, \n        showModal: false,\n        currentUserId: null,\n        currentUserName: null,\n        currentUserEmail: null,\n        currentUserApt: null,\n        modalTrigger: null,\n        showStatusSelect: \"hide\",\n        validated: false,\n        userError: false,\n        errorMsg:\"\",\n        sortByPriority: false\n    }\n\n    this.onGetAllUsersSuccess = this.onGetAllUsersSuccess.bind(this);\n    this.onGetAllUsersError = this.onGetAllUsersError.bind(this);\n    // this.checkCurrentUser = this.checkCurrentUser.bind(this);\n    this.filterUsers = this.filterUsers.bind(this);\n    this.onCreateTenantSuccess = this.onCreateTenantSuccess.bind(this);\n    this.onCreateTenantError = this.onCreateTenantError.bind(this);\n    this.onImageUploadSuccess = this.onImageUploadSuccess.bind(this);\n    this.onImageUploadError = this.onImageUploadError.bind(this);\n    this.onImageUploadProgress = this.onImageUploadProgress.bind(this);\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.createTenant = this.createTenant.bind(this);\n    this.updateUser = this.updateUser.bind(this);\n    this.onDeleteUserError = this.onDeleteUserError.bind(this);\n    this.onDeleteUserSuccess = this.onDeleteUserSuccess.bind(this);\n    this.deleteUser = this.deleteUser.bind(this);\n    this.imgChange = this.imgChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleFilterChange = this.handleFilterChange.bind(this);\n\n    this.nameInput = React.createRef();\n    this.emailInput = React.createRef();\n    this.aptInput = React.createRef();\n    this.imgInput = React.createRef();\n\n    }\n    \n    componentDidMount(){\n        UserDB.GetAllUsers(this.onGetAllUsersSuccess, this.onGetAllUsersError);\n    }\n\n    checkCurrentUser(filter, currentUserName, currentUserEmail, currentUserApt) { //Check if current User matches filter\n        if (\n                    //Input filter is not empty\n                    ((filter.inputFilter !== \"\") && (currentUserName.indexOf(filter.inputFilter) > -1 || currentUserEmail.indexOf(filter.inputFilter) > -1 || currentUserApt.indexOf(filter.inputFilter) > -1)) ||\n                    //Input Filter is empty so accept any\n                    (filter.inputFilter === \"\")\n            ) \n        { return true; }\n        \n        else\n        { return false; }\n    }\n\n    filterUsers(filter, originalUsers, filteredUsers) {\n        //debugger;\n\n        // Loop through all users keys, and add those who match the search query to matches array\n        for (var i = 0; i < originalUsers.length; i++) {\n                var currentUserName = originalUsers[i].get(\"username\").toUpperCase();\n                var currentUserEmail = originalUsers[i].get(\"email\").toUpperCase();\n                //var currentUserEmail = \"a@a.com\";\n                var currentUserApt = originalUsers[i].get(\"apartment\").toUpperCase();\n                //console.log(originalUsers[i]);\n                //console.log(currentUserEmail);\n\n                if (this.checkCurrentUser(filter, currentUserName, currentUserEmail, currentUserApt)) {\n                    filteredUsers.push(originalUsers[i]);\n                }\n\n\n         }\n    }\n\n    handleFilterChange(e) {\n        var input;\n        input = e.target;\n        var inputFilter = this.state.filter.inputFilter;\n        var filteredUsers = [];\n\n        if(input.tagName === \"INPUT\") {\n            inputFilter = input.value.toUpperCase();\n        }\n        \n        const newFilter = {\n            inputFilter: inputFilter,\n        }\n\n        this.setState({\n            filter:newFilter\n        });  \n\n\n            this.filterUsers(newFilter, this.state.users, filteredUsers);\n\n        this.setState({filteredUsers:filteredUsers});\n      }\n\n   onImageUploadSuccess(imageId) {\n        let currentUserImage = imageId;\n        this.setState({currentUserImage: currentUserImage})\n    }\n\n    onImageUploadError(error) {\n    }\n\n    onImageUploadProgress(progress) {\n        if (progress < 100) {\n            document.getElementById(\"image_progress\").innerHTML = \"Image Uploading: \" + progress + \"%\";\n        } else {\n            document.getElementById(\"image_progress\").innerHTML = \"Image Uploaded Successfully\";\n\n        }\n    }\n    imgChange(ev) {\n\n        let newUserImg = {};\n        newUserImg.file = ev.target.files[0];\n        if (newUserImg.file) {\n            ImageHandler.UploadImage(newUserImg.file, this.onImageUploadProgress, this.onImageUploadSuccess, this.onImageUploadError);\n\n        } else {\n            newUserImg.URL = \"\";\n        }\n\n    }\n    \n    handleSubmit(e) {\n        const form = e.target;\n        this.setState({validated:true});\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (form.checkValidity() === true) {\n            if(this.state.modalTrigger === \"New Tenant\"){\n                this.createTenant();\n            }\n            else {\n                this.updateUser();\n            }\n        }\n      }\n\n\n    openModal(e, user) {\n        let modalTrigger = e.target.innerHTML;\n        let showStatusSelect;\n        let currentUserId;\n        let currentUserName = \"\";\n        let currentUserEmail = \"\";\n        let currentUserApt = \"\";\n        let currentUserImage = \"\";\n\n        if(modalTrigger === \"Update\") {\n            modalTrigger = \"Update User\";\n            showStatusSelect = \"show\";\n            currentUserName = user.get(\"username\");\n            currentUserEmail = user.get(\"email\");\n            currentUserApt = user.get(\"apartment\");\n            currentUserImage = user.get(\"userImage\");\n            currentUserId = user.id;\n        }\n        else {\n            showStatusSelect = \"hide\";\n        }\n        this.setState({ showModal: true, showStatusSelect: showStatusSelect, modalTrigger: modalTrigger, currentUserId: currentUserId, currentUserName: currentUserName, currentUserEmail:currentUserEmail, currentUserApt: currentUserApt, currentUserImage: currentUserImage})\n    }\n\n    closeModal() {\n        this.setState({ currentUserId: null, currentUserImage:null, showModal: false, validated: false, UserError: false })\n    }\n\n    onCreateTenantSuccess(userId, user) {\n        // console.log(\"onCreateTenantSuccess\");\n        UserDB.GetAllUsers(this.onGetAllUsersSuccess, this.onGetAllUsersError);\n    }\n\n    onCreateTenantError(error) {\n        \n    }\n    \n    createTenant() {\n         const newUser = UserDB.GetUser();\n         newUser.set('username', this.nameInput.current.value);\n         newUser.set('email', this.emailInput.current.value);\n         newUser.set('apartment', this.aptInput.current.value);\n         newUser.set('userImage', this.state.currentUserImage);\n\n        UserDB.CreateTenant(newUser, this.onCreateTenantSuccess, this.onCreateTenantError)\n\n        this.closeModal();\n    }\n\n    updateUser() {\n        const newUser = UserDB.GetUser();\n        newUser.set('username', this.nameInput.current.value);\n        newUser.set('email', this.emailInput.current.value);\n        newUser.set('apartment', this.aptInput.current.value);\n        newUser.set('userImage', this.state.currentUserImage);\n\n        UserDB.UpdateUser(this.state.currentUserId, newUser, this.onCreateTenantSuccess, this.onCreateTenantError)\n        this.closeModal();\n   }\n\n   onDeleteUserSuccess(userId, user) {\n    UserDB.GetAllUsers(this.onGetAllUsersSuccess, this.onGetAllUsersError);\n    }\n\n    onDeleteUserError(error) {\n        \n    }\n\n\n   deleteUser(user) {\n    UserDB.DeleteUser(user.id, this.onDeleteUserSuccess, this.onDeleteUserError)\n    this.closeModal();\n}\n\n\n    onGetAllUsersSuccess(users) {\n        console.log(\"get all users success\");\n        console.log(users.length);\n        var filteredUsers = []\n        var hasRecords = false;\n        if (users.length > 0) {\n            hasRecords = true;\n            console.log(hasRecords);\n        }\n        \n        if(this.state.filter !== null) { //is this really needed considering the initial state value?\n            this.filterUsers(this.state.filter, users, filteredUsers);\n        }\n        this.setState({users:users, filteredUsers:filteredUsers, hasRecords:hasRecords});\n    }\n\n    onGetAllUsersError(error) {\n    }\n\n\n    render() {\n        let recordsDisplay = null;\n        if (this.state.users == null) {\n            //loading\n            recordsDisplay = \"Loading...\";\n        }\n        else {\n            recordsDisplay = <RecordsDisplay hasRecords={this.state.hasRecords} recordType=\"tenants\" records={this.state.filteredUsers} openModal={this.openModal} deleteUser={this.deleteUser}/> ;\n        }\n\n        const { showModal, currentUserImage } = this.state;\n        const currentUserImageUrl = (currentUserImage === \"\"? \"./images/placeholder-square.jpg\" : ImageHandler.GetImageUrl(currentUserImage));\n        const modalAction = (\n            this.state.modalTrigger === \"New Tenant\" ?  <Button variant=\"primary\" type=\"submit\">Create Tenant</Button>\n                                                    :  <Button variant=\"primary\" type=\"submit\">Update Tenant</Button>\n        );\n      \n      return (\n        <div className=\"Tenants h-100\">\n            <Container className=\"py-6 px-5 mobile-padding\">\n                {/* <TenantsNavbar /> */}\n                <InnerNavbar filterType=\"tenants\" handleFilterChange={this.handleFilterChange}/>\n\n                <div className=\"text-right pt-4 pb-1 mobile-center\">\n                    <Button variant=\"link\" className=\"new-btn\" onClick={this.openModal}>New Tenant</Button>\n                </div>\n                {recordsDisplay}\n            </Container>\n\n            {/* All tenants will have a default password of 1-6 */}\n            \n            <Modal show={showModal} onHide={this.closeModal} size=\"lg\">\n                <Form className=\"userModalFrm\" noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{this.state.modalTrigger}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Alert variant=\"danger\" show={this.state.userError}>\n                            {this.state.errorMsg}\n                        </Alert>\n                            <Form.Group as={Row} controlId=\"formNameTxt\">\n                                <Form.Label column sm={2}>\n                                    Name:\n                                </Form.Label>\n                                <Col sm={10}>\n                                    <Form.Control type=\"text\" ref={this.nameInput} defaultValue={this.state.currentUserName} placeholder=\"Enter tenant's name\" pattern=\"([a-zA-Z0-9]{1,20}\\s?){1,10}\" required/>\n\n                                    <Form.Control.Feedback type=\"invalid\">\n                                    </Form.Control.Feedback>\n                                </Col>\n                            </Form.Group>\n\n                            <Form.Group as={Row} controlId=\"formEmailTxt\">\n                                <Form.Label column sm={2}>\n                                    Email:\n                                </Form.Label>\n                                <Col sm={10}>\n                                    <Form.Control type=\"text\" ref={this.emailInput} defaultValue={this.state.currentUserEmail} placeholder=\"Enter tenant's email\" pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{3,}$\" required/>\n                                    <Form.Control.Feedback type=\"invalid\">\n                                    </Form.Control.Feedback>\n                                </Col>\n                            </Form.Group>\n\n                            <Form.Group as={Row} controlId=\"formAptTxt\">\n                                <Form.Label column sm={2}>\n                                    Apartment:\n                                </Form.Label>\n                                <Col sm={10}>\n                                    <Form.Control type=\"text\" ref={this.aptInput} defaultValue={this.state.currentUserApt} placeholder=\"Enter tenant's apartment\" pattern=\"([a-zA-Z0-9]{1,20}\\s?){1,5}\" required/>\n                                </Col>\n                            </Form.Group>\n\n                            <Form.Group as={Row} controlId=\"formImgControl\" className=\"align-items-center\">\n                                <Form.Label column sm={2}>\n                                    Image URL:\n                                </Form.Label>\n                                <Col sm={7}>\n                                    <div className=\"custom-file\">\n                                        <input ref={this.imgInput} type=\"file\" className=\"custom-file-input\" id=\"customFile\" accept=\"image/*\" onChange={this.imgChange}/>\n                                        {/* <Form.Control type=\"file\" placeholder=\"User image URL\" accept=\"image/*\" onChange={this.imgChange}/> */}\n                                        <p id=\"image_progress\"></p>\n                                        <label className=\"custom-file-label\" htmlFor=\"customFile\">Choose image</label>\n                                    </div>\n                                </Col>\n                                <Col sm={3}>\n                                    <Image src={currentUserImageUrl} fluid className=\"thumbnail\"/>\n                                </Col>\n                            </Form.Group>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.closeModal}>\n                            Close\n                        </Button>\n                        {modalAction}\n                    </Modal.Footer>\n                    </Form>\n                </Modal>\n        </div>\n        );\n\n    }\n  }   \n\nexport default Tenants;\n","import React from 'react';\n//import Nav from 'react-bootstrap/Nav'\n//import Navbar from 'react-bootstrap/Navbar'\n//import Jumbotron from 'react-bootstrap/Jumbotron'\nimport Button from 'react-bootstrap/Button'\n// import VotingsNavbar from '../components/VotingsNav'\nimport InnerNavbar from '../components/InnerNavbar'\n\nimport RecordsDisplay from '../components/RecordsDisplay'\nimport { Container, Row, Col} from 'react-bootstrap'\n// import Navigation from '../components/Navigation';\n// import Modal from 'react-bootstrap/Modal'\n// import Form from 'react-bootstrap/Form'\n// import InputGroup from 'react-bootstrap/InputGroup'\n// import FormControl from 'react-bootstrap/FormControl'\n\nclass Votings extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        activePage: 1,\n        totalItemsCount: 14 // This will come from the relevant page: Votings\\votings etc, where the total number of records will be stored in the page's state.\n      };\n      this.handlePageChange = this.handlePageChange.bind(this);\n    }\n    \n    handlePageChange(e) {\n      let val = parseInt(e.target.innerHTML);\n      let pageNumber = this.state.activePage;\n  \n      if (isNaN(val)) {\n        console.log('Not a number ' + val);\n        val = e.target.innerText;\n        if (val.includes(\"‹\")) {\n          console.log(\"Previous\");\n          pageNumber--;\n        }\n        else if (val.includes(\"›\")) {\n          console.log(\"Next\");\n          pageNumber++;\n        }\n        \n      }\n      else {\n        console.log('number ' + val);\n        pageNumber =  val;\n      }\n      console.log('active page is ' + pageNumber);\n      //this.state.activePage = pageNumber;\n      console.log(this.state.activePage);\n      //this.setState(this.state);\n      this.setState({activePage:pageNumber});\n      console.log(this.state.activePage);\n    }\n  \n    render() {\n      \n            return (\n                    <div className=\"Votings h-100\">\n                        {/* <Navigation isLoggedIn={this.props.isLoggedIn} pageName=\"Votings\"/> */}\n\n                        <Container fluid className=\"py-6 px-5 mobile-padding\">\n                            <Row>\n                                <Col lg={6} className=\"issue-box\">\n                                        <h2>Active Votings</h2>\n                                         <div className=\"text-right pt-4 pb-1 mobile-center\">\n                                            <Button variant=\"link\" className=\"new-btn\">New Voting</Button>\n                                        </div>\n                                    <RecordsDisplay hasRecords={true} recordType=\"active votings\" /> \n                                </Col>\n                                <Col lg={6}>\n                                    <h2>Voting Results</h2>\n                                    {/* <VotingsNavbar /> */}\n                                    <InnerNavbar filterType=\"voting\" handleFilterChange={this.handleFilterChange}/>\n\n                                    <RecordsDisplay hasRecords={true} recordType=\"voting results\" /> \n                                </Col>\n                            </Row>\n                        </Container>\n                        {/* <Modal show size=\"lg\">\n                        <Modal.Header closeButton>\n                            <Modal.Title>New Voting</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <Form className=\"VotingModalFrm\">\n                                <Form.Group as={Row} controlId=\"formNameTxt\">\n                                    <Form.Label column lg={2}>\n                                        Title:\n                                    </Form.Label>\n                                    <Col lg={10}>\n                                        <Form.Control required type=\"text\" placeholder=\"Voting title\" />\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formDetailsTxt\">\n                                    <Form.Label column lg={2}>\n                                        Details:\n                                    </Form.Label>\n                                    <Col lg={10}>\n                                        <Form.Control required type=\"text\" placeholder=\"Voting Details\" />\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formPrioritySelect\">\n                                    <Form.Label column lg={2}>\n                                        Options:\n                                    </Form.Label>\n                                    <Col lg={10}>\n                                        <Form.Control required type=\"text\" className=\"mb-2\"/>\n                                        <Form.Control required type=\"text\" />\n                                        <Button variant=\"link\" className=\"pl-0\">+ Add option</Button>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formImgControl\" className=\"align-items-center\">\n                                    <Form.Label column lg={2}>\n                                        End Date:\n                                    </Form.Label>\n                                    <Col lg={5}>\n                                        <Form.Control required type=\"datetime-local\" className=\"w-50\" />     \n                                    </Col>\n                                </Form.Group>\n                            </Form>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button variant=\"secondary\">\n                                Close\n                            </Button>\n                            <Button variant=\"primary\">\n                                Create\n                            </Button>\n                        </Modal.Footer>\n                    </Modal> */}\n                </div>\n                );\n    }\n}\n\nexport default Votings;\n","import React from 'react';\nimport IssueDB from '../components/IssueDB';\nimport ImageHandler from '../components/ImageHandler'\nimport InnerNavbar from '../components/InnerNavbar'\nimport RecordsDisplay from '../components/RecordsDisplay'\nimport { Container, Row, Col, Button, Modal, Form, Image } from 'react-bootstrap'\nimport Alert from 'react-bootstrap/Alert'\n\nclass Issues extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        issues: null, //Get from Parse DB\n        hasRecords: null,\n        filter: {\n            inputFilter:\"\",\n            selectFilter:\"123\"\n        },\n        filteredIssues: null, \n        // activeUserIssues: [],\n        // activePage: 1,\n        showModal: false,\n        currentIssueId: null,\n        currentIssueTitle: null,\n        currentIssueDetails: null,\n        currentIssuePriority: null,\n        currentIssueImage: null,\n        currentIssueStatus: null,\n        modalTrigger: null,\n        showStatusSelect: \"hide\",\n        //totalItemsCount: null, \n        validated: false,\n        issueError: false,\n        errorMsg:\"\",\n        sortByPriority: false\n    }\n      \n      this.onGetAllIssuesSuccess = this.onGetAllIssuesSuccess.bind(this);\n      this.onGetAllIssuesError = this.onGetAllIssuesError.bind(this);\n      this.filterIssues = this.filterIssues.bind(this);\n      this.onCreateIssueSuccess = this.onCreateIssueSuccess.bind(this);\n      this.onCreateIssueError = this.onCreateIssueError.bind(this);\n      this.onImageUploadSuccess = this.onImageUploadSuccess.bind(this);\n      this.onImageUploadError = this.onImageUploadError.bind(this);\n      this.onImageUploadProgress = this.onImageUploadProgress.bind(this);\n      this.openModal = this.openModal.bind(this);\n      this.closeModal = this.closeModal.bind(this);\n      this.createIssue = this.createIssue.bind(this);\n      this.updateIssue = this.updateIssue.bind(this);\n      this.onDeleteIssueError = this.onDeleteIssueError.bind(this);\n      this.onDeleteIssueSuccess = this.onDeleteIssueSuccess.bind(this);\n      this.deleteIssue = this.deleteIssue.bind(this);\n      this.imgChange = this.imgChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n      this.handleFilterChange = this.handleFilterChange.bind(this);\n      this.handleSortChange = this.handleSortChange.bind(this);\n\n      this.titleInput = React.createRef();\n      this.detailsInput = React.createRef();\n      this.priorityInput = React.createRef();\n      this.statusInput = React.createRef();\n      this.imgInput = React.createRef();\n    }\n\n    componentDidMount(){\n        IssueDB.GetAllIssues(this.state.sortByPriority, this.onGetAllIssuesSuccess, this.onGetAllIssuesError);\n    }\n\n    checkCurrentIssue(filter, currentIssueTitle, currentIssueDetails, currentIssuePriority) { //Check if current issue matches filter\n        if (\n                // filter by select\n                (filter.selectFilter.indexOf(currentIssuePriority) > -1) && \n\n                //Filter by Input\n                (\n                    //Input filter is not empty\n                    ((filter.inputFilter !== \"\") && (currentIssueTitle.indexOf(filter.inputFilter) > -1 || currentIssueDetails.indexOf(filter.inputFilter) > -1)) ||\n                    //Input Filter is empty so accept any\n                    (filter.inputFilter === \"\")\n                )\n            ) \n        { return true; }\n        \n        else\n        { return false; }\n    }\n\n    filterIssues(filter, originalIssues, filteredIssues) {\n        // Loop through all issues keys, and add those who match the search query to matches array\n        for (var i = 0; i < originalIssues.length; i++) {\n                var currentIssueTitle = originalIssues[i].get(\"title\").toUpperCase();\n                var currentIssueDetails = originalIssues[i].get(\"details\").toUpperCase();\n                var currentIssuePriority = originalIssues[i].get(\"priority\").toUpperCase();\n\n                if (this.checkCurrentIssue(filter, currentIssueTitle, currentIssueDetails, currentIssuePriority)) {\n                    filteredIssues.push(originalIssues[i]);\n                }\n\n         }\n    }\n\n    handleFilterChange(e) {\n        var input;\n        input = e.target;\n        var inputFilter = this.state.filter.inputFilter;\n        var selectFilter = this.state.filter.selectFilter;\n        var filteredIssues = [];\n\n        if(input.tagName === \"INPUT\") {\n            inputFilter = input.value.toUpperCase();\n        }\n        else if (input.tagName === \"SELECT\") {\n            selectFilter = input.value;\n        }\n\n        const newFilter = {\n            inputFilter: inputFilter,\n            selectFilter:selectFilter\n        }\n\n        this.setState({\n            filter:newFilter\n        });  \n\n\n            this.filterIssues(newFilter, this.state.issues, filteredIssues);\n\n        this.setState({filteredIssues:filteredIssues});\n      }\n\n\n\n    handleSortChange(sortByPriority) {\n        this.setState({sortByPriority: sortByPriority});\n        IssueDB.GetAllIssues(sortByPriority, this.onGetAllIssuesSuccess, this.onGetAllIssuesError);\n\n    }\n\n\n    onImageUploadSuccess(imageId) {\n        let currentIssueImage = imageId;\n        this.setState({currentIssueImage: currentIssueImage})\n    }\n\n    onImageUploadError(error) {\n    }\n\n    onImageUploadProgress(progress) {\n        if (progress < 100) {\n            document.getElementById(\"image_progress\").innerHTML = \"Image Uploading: \" + progress + \"%\";\n        } else {\n            document.getElementById(\"image_progress\").innerHTML = \"Image Uploaded Successfully\";\n\n        }\n    }\n    imgChange(ev) {\n\n        let newIssueImg = {};\n        newIssueImg.file = ev.target.files[0];\n        if (newIssueImg.file) {\n            ImageHandler.UploadImage(newIssueImg.file, this.onImageUploadProgress, this.onImageUploadSuccess, this.onImageUploadError);\n\n        } else {\n            newIssueImg.URL = \"\";\n        }\n\n    }\n    \n    handleSubmit(e) {\n        const form = e.target;\n        this.setState({validated:true});\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (form.checkValidity() === true) {\n            if(this.state.modalTrigger === \"New Issue\"){\n                this.createIssue();\n            }\n            else {\n                this.updateIssue();\n            }\n        }\n      }\n\n\n    openModal(e, issue) {\n        let modalTrigger = e.target.innerHTML;\n        let showStatusSelect;\n        let currentIssueId;\n        let currentIssueTitle = \"\";\n        let currentIssueDetails = \"\";\n        let currentIssuePriority = \"\";\n        let currentIssueStatus = \"\";\n        let currentIssueImage = \"\";\n\n        if(modalTrigger === \"Update\") {\n            modalTrigger = \"Update Issue\";\n            showStatusSelect = \"show\";\n            currentIssueTitle = issue.get(\"title\");\n            currentIssueDetails = issue.get(\"details\");\n            currentIssuePriority = issue.get(\"priority\");\n            currentIssueStatus = issue.get(\"status\");\n            currentIssueImage = issue.get(\"image\");\n            currentIssueId = issue.id;\n        }\n        else {\n            showStatusSelect = \"hide\";\n        }\n        this.setState({ showModal: true, showStatusSelect: showStatusSelect, modalTrigger: modalTrigger, currentIssueId: currentIssueId, currentIssueTitle: currentIssueTitle, currentIssueDetails:currentIssueDetails, currentIssuePriority: currentIssuePriority, currentIssueStatus: currentIssueStatus, currentIssueImage: currentIssueImage})\n    }\n\n    closeModal() {\n        this.setState({ currentIssueId: null, currentIssueImage:null, showModal: false, validated: false, issueError: false })\n    }\n\n    onCreateIssueSuccess(issueId, issue) {\n        IssueDB.GetAllIssues(this.state.sortByPriority, this.onGetAllIssuesSuccess, this.onGetAllIssuesError);\n    }\n\n    onCreateIssueError(error) {\n        \n    }\n    \n    createIssue() {\n         const newIssue = IssueDB.GetIssue();\n         newIssue.set('title', this.titleInput.current.value);\n         newIssue.set('details', this.detailsInput.current.value);\n         newIssue.set('priority', this.priorityInput.current.value);\n         newIssue.set('status', this.statusInput.current.value);\n         newIssue.set('image', this.state.currentIssueImage);\n\n        IssueDB.CreateIssue(newIssue, this.onCreateIssueSuccess, this.onCreateIssueError)\n\n        this.closeModal();\n    }\n\n    updateIssue() {\n        const newIssue = IssueDB.GetIssue();\n        newIssue.set('title', this.titleInput.current.value);\n        newIssue.set('details', this.detailsInput.current.value);\n        newIssue.set('priority', this.priorityInput.current.value);\n        newIssue.set('status', this.statusInput.current.value);\n        newIssue.set('image', this.state.currentIssueImage);\n\n        IssueDB.UpdateIssue(this.state.currentIssueId, newIssue, this.onCreateIssueSuccess, this.onCreateIssueError)\n        this.closeModal();\n   }\n\n   onDeleteIssueSuccess(issueId, issue) {\n    IssueDB.GetAllIssues(this.state.sortByPriority, this.onGetAllIssuesSuccess, this.onGetAllIssuesError);\n    }\n\n    onDeleteIssueError(error) {\n        \n    }\n\n\n   deleteIssue(issue) {\n    IssueDB.DeleteIssue(issue.id, this.onDeleteIssueSuccess, this.onDeleteIssueError)\n    this.closeModal();\n}\n\n\n    onGetAllIssuesSuccess(issues) {\n        var filteredIssues = []\n        var hasRecords = false;\n        if (issues.length > 0) {\n            hasRecords = true;\n        }\n        \n        if(this.state.filter !== null) {\n            this.filterIssues(this.state.filter, issues, filteredIssues);\n        }\n\n        this.setState({issues:issues, filteredIssues:filteredIssues, hasRecords:hasRecords});\n    }\n\n    onGetAllIssuesError(error) {\n    }\n\n    render() {\n        let recordsDisplay = null;\n        if (this.state.issues == null) {\n            //loading\n            recordsDisplay = \"Loading...\";\n        }\n        else {\n            recordsDisplay = <RecordsDisplay hasRecords={this.state.hasRecords} recordType=\"issues\" records={this.state.filteredIssues} openModal={this.openModal} deleteIssue={this.deleteIssue}/> ;\n        }\n\n        const { showModal, currentIssueImage } = this.state;\n        const currentIssueImageUrl = (currentIssueImage === \"\"? \"./images/placeholder-square.jpg\" : ImageHandler.GetImageUrl(currentIssueImage));\n        const modalAction = (\n            this.state.modalTrigger === \"New Issue\" ?  <Button variant=\"primary\" type=\"submit\">Create Issue</Button>\n                                                    :  <Button variant=\"primary\" type=\"submit\">Update Issue</Button>\n        );\n\n      return (\n                <div className=\"Issues h-100\">\n                    <Container className=\"py-6 px-5 mobile-padding\">\n                        <InnerNavbar filterType=\"issues\" handleFilterChange={this.handleFilterChange} handleSortChange={this.handleSortChange}/>\n                        <div className=\"text-right pt-4 pb-1 mobile-center\">\n                            <Button variant=\"link\" className=\"new-btn\" onClick={this.openModal}>New Issue</Button>\n                        </div>\n                        {recordsDisplay}\n                    </Container>\n                    \n                    <Modal show={showModal} onHide={this.closeModal} size=\"lg\">\n                    <Form className=\"issueModalFrm\" noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n\n                        <Modal.Header closeButton>\n                            <Modal.Title>{this.state.modalTrigger}</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <Alert variant=\"danger\" show={this.state.issueError}>\n                                {this.state.errorMsg}\n                            </Alert>\n                                <Form.Group as={Row} controlId=\"formNameTxt\">\n                                    <Form.Label column sm={2}>\n                                        Title:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control type=\"text\" ref={this.titleInput} defaultValue={this.state.currentIssueTitle} pattern=\"([a-zA-Z0-9]{1,20}\\s?){1,10}\" required/>\n\n                                        <Form.Control.Feedback type=\"invalid\">\n                                        </Form.Control.Feedback>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formDetailsTxt\">\n                                    <Form.Label column sm={2}>\n                                        Details:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control ref={this.detailsInput} defaultValue={this.state.currentIssueDetails} as=\"textarea\" rows=\"3\"/>\n                                        <Form.Control.Feedback type=\"invalid\">\n                                        </Form.Control.Feedback>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formPrioritySelect\">\n                                    <Form.Label column sm={2}>\n                                        Priority:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control ref={this.priorityInput} defaultValue={this.state.currentIssuePriority} as=\"select\" className=\"priority-select\" required>\n                                            <option value=\"1\">Normal</option>\n                                            <option value=\"2\">Important</option>\n                                            <option value=\"3\">Urgent</option>\n                                        </Form.Control>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row} controlId=\"formImgControl\" className=\"align-items-center\">\n                                    <Form.Label column sm={2}>\n                                        Image URL:\n                                    </Form.Label>\n                                    <Col sm={7}>\n                                        <div className=\"custom-file\">\n                                            <input ref={this.imgInput} type=\"file\" className=\"custom-file-input\" id=\"customFile\" accept=\"image/*\" onChange={this.imgChange}/>\n                                            {/* <Form.Control type=\"file\" placeholder=\"Issue image URL\" accept=\"image/*\" onChange={this.imgChange}/> */}\n                                            <p id=\"image_progress\"></p>\n                                            <label className=\"custom-file-label\" htmlFor=\"customFile\">Choose image</label>\n                                        </div>\n                                    </Col>\n                                    <Col sm={3}>\n                                        <Image src={currentIssueImageUrl} fluid className=\"thumbnail\"/>\n                                    </Col>\n                                </Form.Group>\n                                \n                                <Form.Group as={Row} controlId=\"formStatusSelect\" className={this.state.showStatusSelect}>\n                                    <Form.Label column sm={2}>\n                                        Status:\n                                    </Form.Label>\n                                    <Col sm={10}>\n                                        <Form.Control ref={this.statusInput} defaultValue={this.state.currentIssueStatus} as=\"select\" className=\"status-select\">\n                                            <option value=\"open\">Open</option>\n                                            <option value=\"closed\">Closed</option>\n                                        </Form.Control>\n                                    </Col>\n                                </Form.Group>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button variant=\"secondary\" onClick={this.closeModal}>\n                                Close\n                            </Button>\n                           {modalAction}\n                        </Modal.Footer>\n                        </Form>\n                    </Modal>\n            </div>\n        );\n\n    }\n  }   \n\n\nexport default Issues;\n","import React from 'react'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport PieChart from 'react-minimal-pie-chart'\n\nclass Records extends React.Component {\n    \n    render () {\n        const charts = (\n            this.props.pageName === \"CommitteeDashboard\"?\n            <Row className=\"text-center py-3\">\n\n                <Col className=\"pb-4\" lg={4}>\n                    <h6>Voting Title1</h6> \n                    <p className=\"mb-1 font-weight-normal\">By: Date</p>\n                    <PieChart className=\"chart\"\n                        data={[\n                            { title: 'For', value: 80, color: '#90ee90' },\n                            { title: 'Against', value: 20, color: '#a2012c' },\n                    ]}/>\n                 </Col>\n                  <Col className=\"pb-4\" lg={4}>\n                  <h6>Voting Title1</h6> \n                  <p className=\"mb-1 font-weight-normal\">By: Date</p>\n                  <PieChart className=\"chart\"\n                      data={[\n                          { title: 'For', value: 80, color: '#90ee90' },\n                          { title: 'Against', value: 20, color: '#a2012c' },\n                  ]}/>\n               </Col>\n                <Col className=\"chartBox\" lg={4}>\n                <h6>Voting Title1</h6> \n                <p className=\"mb-1 font-weight-normal\">By: Date</p>\n                <PieChart className=\"chart\"\n                    data={[\n                        { title: 'For', value: 80, color: '#90ee90' },\n                        { title: 'Against', value: 20, color: '#a2012c' },\n                ]}/>\n             </Col>\n             </Row>\n            :\n            <Row className=\"text-center\">\n                <Col className=\"chartBox\" lg={12}>\n                    <h6>Voting Title1</h6> \n                    <p className=\"mb-1 font-weight-normal\">By: Date</p>\n                    <PieChart className=\"chart\"\n                        data={[\n                            { title: 'For', value: 80, color: '#90ee90' },\n                            { title: 'Against', value: 20, color: '#a2012c' },\n                    ]}/>\n                </Col>\n            </Row>\n        );\n\n        return (\n          <div className=\"w-100\"> {charts} </div>\n            \n        );     \n    }\n}\n\nclass NoRecords extends React.Component {\n   \n    render() {\n\n        return (\n            <p className=\"noRecordsMsg\">There are no {this.props.recordType}. :)</p>\n        );\n    }\n}\nclass ChartsDisplay extends React.Component {\n  \n    render() {\n        \n        return (\n            this.props.hasRecords? \n                <Records pageName={this.props.pageName}/>\n            :   <NoRecords recordType={this.props.recordType}/>\n        );\n    }\n}\n\nexport default ChartsDisplay;","import React from 'react';\n//import Nav from 'react-bootstrap/Nav'\n//import Navbar from 'react-bootstrap/Navbar'\n//import Jumbotron from 'react-bootstrap/Jumbotron'\n//import Button from 'react-bootstrap/Button'\n//import DashboardIssuesAccordion from '../components/RecordsDisplay'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport RecordsDisplay from '../components/RecordsDisplay';\n// import Navigation from '../components/Navigation';\nimport ChartsDisplay from '../components/ChartsDisplay';\nimport Badge from 'react-bootstrap/Badge';\n// import PieChart from 'react-minimal-pie-chart'\n\nclass CommitteeDashboard extends React.Component {\n    \n    render() {\n      \n      return (\n                \n                    <Container fluid className=\"px-4\"> \n                            <Row className=\"pb-2\">\n                                <Col lg={6} className=\"issue-box\">\n                                    <h2>New Reported Issues <Badge variant=\"light\">0</Badge></h2> \n                                    {/* Who manages the hasRecords state? */}\n                                    <RecordsDisplay hasRecords={true} recordType=\"new issues\" /> \n                                </Col>\n                                <Col lg={6}>\n                                    <h2>Overdue Issues <Badge variant=\"light\">9</Badge></h2>\n                                     {/* Who manages the hasRecords state? */}\n                                    <RecordsDisplay hasRecords={true} recordType=\"overdue issues\" />\n                                </Col>\n                            </Row>\n                           \n                            <Row className=\"pt-3 border-top\">\n                                <Col>                    \n                                    <h2>Active Voting Percentage</h2>\n                                    {/* Who manages the hasRecords state? */}\n\n                                    <ChartsDisplay hasRecords={true} recordType=\"active votings\" pageName=\"CommitteeDashboard\"/>\n                                    \n                                   \n                                </Col>\n                            </Row>\n                        </Container>\n      );\n\n    }\n  }   \n\n\nclass TenantDashboard extends React.Component {\n  \n    render() {\n     \n      return (\n        <Container fluid className=\"px-4\">\n                <Row className=\"pb-2\">\n                    <Col lg={6} className=\"issue-box\">\n                        <h2>New Messages <Badge variant=\"light\">0</Badge></h2> \n                        {/* Who manages the hasRecords state? */}\n                        <RecordsDisplay hasRecords={true} recordType=\"new messages\" /> \n                    </Col>\n                    <Col lg={6}>\n                        <h2>Pending Votings <Badge variant=\"light\">9</Badge></h2>\n                        <RecordsDisplay hasRecords={true} recordType=\"pending votings\" />\n                    </Col>\n                </Row>\n                \n                <Row className=\"pt-3 border-top\">\n                    <Col className=\"issue-box\" lg={4}>\n                        <h2 className=\"mb-4\">Voting Results</h2>\n                        <ChartsDisplay hasRecords={true} recordType=\"voting results\" pageName=\"TenantDashboard\"/>\n                    </Col>\n                    \n                    <Col className=\"issue-box\" lg={4}>                   \n                        <h2>New Issues <Badge variant=\"light\">2</Badge></h2>\n                        <RecordsDisplay hasRecords={true} recordType=\"new issues\" />\n                    </Col>\n                        <Col lg={4}>                    \n                        <h2>New Resolved Issues <Badge variant=\"light\">3</Badge></h2>\n                        <RecordsDisplay hasRecords={true} recordType=\"new resolved issues\" />\n                        </Col>\n                </Row>\n            </Container>\n        );\n    }\n  }   \n\n  class Dashboard extends React.Component {\n    \n    render() {\n        // console.log(\"this.props.userType = \" + this.props.userType);\n      const dashboard = (\n        this.props.userType === \"admin\"? <CommitteeDashboard /> : <TenantDashboard />\n      );\n\n      return (\n        <div className=\"Dashboard h-100\">\n            {/* <Navigation isLoggedIn={this.props.isLoggedIn} pageName=\"Dashboard\"/> */}\n            {dashboard}\n        </div>\n        );\n\n    }\n}   \n\n\nexport default Dashboard;\n","import React from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\n\nclass Navigation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleLogout = this.handleLogout.bind(this);\n\n}\n\nhandleLogout (e) {\n  this.props.handleLogout();\n}\n  \n\n    render () {\n        const logo = (this.props.isLoggedIn? \"App-logo-inner\" : \"App-logo\");\n        const isLoggedIn = this.props.isLoggedIn;\n        \n        return (\n            <Navbar fixed=\"top\" collapseOnSelect expand=\"lg\">\n              <Row className=\"w-100\">\n                    <Col lg={1} sm= {4} xs={4}>\n                      <Navbar.Brand href=\"#/\"><img className={logo} src=\"./images/homeboy.png\" alt=\"Homeboy - Your Buddy In Da Building\" /></Navbar.Brand>\n                    </Col>\n                   \n                  <Col lg={11} sm= {4} xs={4} className=\"px-0\">\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\n                        <Nav className={isLoggedIn? \"mr-auto\" : \"hide\"}>\n                          <Nav.Link href=\"#/Dashboard\">Dashboard</Nav.Link>\n                          <Nav.Link href=\"#/Tenants\">Tenants</Nav.Link>\n                          <Nav.Link href=\"#/Messages\">Messages</Nav.Link>\n                          <Nav.Link href=\"#/Issues\">Issues</Nav.Link>\n                          <Nav.Link href=\"#/Votings\">Voting</Nav.Link>\n                        </Nav>\n\n                        <Nav className={isLoggedIn? \"hide\" : \"ml-auto\"}>\n                            <Nav.Link href=\"#/Login\">Login</Nav.Link>\n                            <Nav.Link eventKey={2} href=\"#/SignUp\">\n                            Sign Up\n                            </Nav.Link>\n                        </Nav>\n\n                        <Nav className={isLoggedIn? \"ml-auto\" : \"hide\"}>\n                            <Nav.Link onClick={this.handleLogout}>Logout</Nav.Link>\n                        </Nav>\n                    </Navbar.Collapse>\n                  </Col>\n\n                  <Col sm= {4} xs={4} className=\"text-right px-0\">\n                      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                  </Col>\n                \n              </Row>\n          </Navbar>\n  \n        );     \n    }\n}\n\n\n  \nexport default Navigation;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  // Link\n} from \"react-router-dom\";\nimport { Redirect } from 'react-router-dom'\nimport Home from './pages/Home';\nimport SignUp from './pages/SignUp';\nimport Login from './pages//Login';\nimport Messages from './pages/Messages';\nimport Tenants from './pages/Tenants';\nimport Votings from './pages/Votings';\nimport Issues from './pages/Issues';\nimport Dashboard from './pages/Dashboard';\nimport Navigation from './components/Navigation'\nimport UserDB from './components/UserDB';\n\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      activeUser: null,\n      isLoggedIn: UserDB.IsLoggedIn(),\n      // isLoggedIn: null,\n      activePage: \"Home\",\n      //userType: null\n      userType: UserDB.IsLoggedIn() ? UserDB.GetCurrentUserType() : null\n      // allUsers: jsonUsers,\n  }\n\n  // this.changeActivePage = this.changeActivePage.bind(this);\n  this.handleLogin = this.handleLogin.bind(this);\n  this.handleLogout = this.handleLogout.bind(this);\n  this.handleLogoutSuccess = this.handleLogoutSuccess.bind(this);\n  this.handleLogoutError = this.handleLogoutError.bind(this);\n\n  // //Make sure you have all the information you need\n  // if ( this.state.isLoggedIn == null) {\n  //   // this.state.isLoggedIn = UserDB.IsLoggedIn();\n  //   //this.setState(this.state); \n  //   this.setState({isLoggedIn:UserDB.IsLoggedIn()}); \n  // }\n  // if (this.state.isLoggedIn && this.state.userType == null) {\n  //   this.setState({userType:UserDB.GetCurrentUserType()}); \n\n  //   // this.state.userType = UserDB.GetCurrentUserType();\n  //   //this.setState(this.state); \n  // }\n}\n\nhandleLogin() {\n // this.state.isLoggedIn = true;\n  //Check userType with the DB\n  //this.state.userType = UserDB.GetCurrentUserType();\n\n  this.setState({isLoggedIn:true, userType:UserDB.GetCurrentUserType()}); \n\n  // this.setState(this.state);\n}\n\nhandleLogout() {\n  UserDB.LogOut(this.handleLogoutSuccess, this.handleLogoutError);\n}\n\nhandleLogoutSuccess() {\n  // this.state.isLoggedIn = false;\n  // this.state.userType = null;\n  // this.setState(this.state);\n\n  this.setState({isLoggedIn:false, userType:null});\n}\n\nhandleLogoutError() {\n}\n\n// changeActivePage(pageName){\n// if(pageName === \"Dashboard\") {\n//   this.state.isLoggedIn = true;\n// }\n//   this.state.activePage = pageName;\n//   this.setState(this.state);\n// }\n\n  render() {\n    const activeUser = this.state.activeUser;\n\n    const signUpDestination = (\n      this.state.isLoggedIn? <Redirect to=\"/Dashboard\"/>\n      : <SignUp handleLogin={this.handleLogin} />\n    );\n\n    const loginDestination = (\n      this.state.isLoggedIn? <Redirect to=\"/Dashboard\"/>\n      : <Login handleLogin={this.handleLogin} isLoggedIn={this.state.isLoggedIn}/>\n    );\n\n    const homeDestination = (\n      this.state.isLoggedIn? <Redirect to=\"/Dashboard\"/>\n      : <Home />\n    );\n\n    const issuesDestination = (\n      this.state.isLoggedIn? <Issues activeUser={activeUser} handleLogout={this.handleLogout} isLoggedIn={this.state.isLoggedIn}/>\n      :  <Redirect to=\"/Login\"/>\n    );\n\n    const messagesDestination = (\n      this.state.isLoggedIn? <Messages activeUser={activeUser} handleLogout={this.handleLogout} isLoggedIn={this.state.isLoggedIn}/>\n      : <Redirect to=\"/Login\"/>\n    );\n\n    const dashboardDestination = (\n      this.state.isLoggedIn? <Dashboard userType={this.state.userType} activeUser={activeUser} handleLogout={this.handleLogout} isLoggedIn={this.state.isLoggedIn}/>\n      :  <Redirect to=\"/Login\"/>\n    );\n\n    const tenantsDestination = (\n      this.state.isLoggedIn? <Tenants activeUser={activeUser} handleLogout={this.handleLogout} isLoggedIn={this.state.isLoggedIn}/>\n      :  <Redirect to=\"/Login\"/>\n    );\n\n    const votingsDestination = (\n      this.state.isLoggedIn? <Votings activeUser={activeUser} handleLogout={this.handleLogout} isLoggedIn={this.state.isLoggedIn}/>\n      :  <Redirect to=\"/Login\"/>\n    );\n\n    const navigation = (\n      <Navigation isLoggedIn={this.state.isLoggedIn} handleLogout={this.handleLogout}/>\n    );\n\n    return (\n      <div className=\"App\">\n          <Router>\n            <Switch>\n            <Route exact path=\"/\">\n              {navigation}\n              {homeDestination}\n            </Route>\n            <Route path=\"/Login\">\n              {loginDestination}\n            </Route>\n            <Route path=\"/Issues\">\n              {navigation}\n              {issuesDestination}\n            </Route>\n            <Route path=\"/Messages\">\n              {navigation}\n              {messagesDestination}\n            </Route>\n            <Route path=\"/SignUp\">\n              {signUpDestination}\n              </Route>\n            <Route path=\"/Dashboard\">\n              {navigation}\n              {dashboardDestination}\n            </Route>\n            <Route path=\"/Tenants\">\n              {navigation}\n              {tenantsDestination}\n            </Route>\n            <Route path=\"/Votings\">\n              {navigation}\n              {votingsDestination}\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}